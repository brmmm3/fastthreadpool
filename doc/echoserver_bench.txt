CPU: Ryzen 7, Linux Mint 18.3, kernel 4.13.0-37-generic

Too echoserver and echoclient examples from uvloop project and extended it with fastthreadpool support.
Some benchmarks below. Impressive is the speed if the receive buffer is bigger than the sent message size.
With a big enough buffer fastthreadpool is up to 4 times faster than uvloop with EchoProtocol!
The buffer size shouldn't be too big. A too big buffer has a negative impact to the speed.

### echoserver.py: uvloop using simple protocol and 1000 bytes message size on the client side

python3.6 echoserver.py --uvloop --proto
python3.6 echoclient.py --workers 5 --times 3

3000000 in 23.39732313156128
128219.79604808804 requests/sec

### echoserver.py: pool_echo_client with 4096 bytes buffer size and 1000 bytes message size on the client side

python3.6 echoserver.py --pool
python3.6 echoclient.py --workers 5 --times 3

3000000 in 7.0884130001068115
423225.90401473426 requests/sec

### echoserver.py: uvloop using simple protocol and 4096 bytes message size on the client side

python3.6 echoserver.py --uvloop --proto
python3.6 echoclient.py --workers 5 --times 3 --msize 4096

3000000 in 27.629255771636963
108580.55768116904 requests/sec

### echoserver.py: pool_echo_client with 4096 bytes buffer size and 4096 bytes message size on the client side

python3.6 echoserver.py --pool
python3.6 echoclient.py --workers 5 --times 3

3000000 in 26.77788472175598
112032.74758900645 requests/sec

### echoserver.py: pool_echo_client with 8192 bytes buffer size and 4096 bytes message size on the client side

python3.6 echoserver.py --pool --buf 8192
python3.6 echoclient.py --workers 5 --times 3 --msize 4096

3000000 in 11.698738813400269
256437.89880697767 requests/sec

### echoserver.py: pool_echo_client with 16384 bytes buffer size and 4096 bytes message size on the client side

python3.6 echoserver.py --pool --buf 16384
python3.6 echoclient.py --workers 5 --times 3 --msize 4096

3000000 in 7.867398500442505
381320.45806898735 requests/sec

### echoserver.py: uvloop using simple protocol and 65536 bytes message size on the client side

python3.6 echoserver.py --uvloop --proto
python3.6 echoclient.py --workers 5 --times 3 --msize 65536

3000000 in 115.3659815788269
26004.199495760105 requests/sec

### echoserver.py: pool_echo_client with 4096 bytes buffer size and 65536 bytes message size on the client side

python3.6 echoserver.py --pool
python3.6 echoclient.py --workers 5 --times 3 --msize 65536

3000000 in 448.44305634498596
6689.812580556735 requests/sec --> buffer size is too small

### echoserver.py: pool_echo_client with 65536 bytes buffer size and 65536 bytes message size on the client side

python3.6 echoserver.py --pool --buf 65536
python3.6 echoclient.py --workers 5 --times 3 --msize 65536

3000000 in 44.99662494659424
66671.66712082631 requests/sec --> best performance

### echoserver.py: pool_echo_client with 2*65536 bytes buffer size and 65536 bytes message size on the client side

python3.6 echoserver.py --pool --buf 131072
python3.6 echoclient.py --workers 5 --times 3 --msize 65536

3000000 in 48.20351791381836
62236.12154954356 requests/sec

### echoserver.py: pool_echo_client with 4*65536 bytes buffer size and 65536 bytes message size on the client side

python3.6 echoserver.py --pool --buf 262144
python3.6 echoclient.py --workers 5 --times 3 --msize 65536

3000000 in 49.7581262588501
60291.65938430837 requests/sec

