/* Generated by Cython 0.28.4 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "fastthreadpool.fastthreadpool",
        "sources": [
            "fastthreadpool/fastthreadpool.pyx"
        ]
    },
    "module_name": "fastthreadpool.fastthreadpool"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_28_4"
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0; // PyThread_create_key reports success always
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif // TSS (Thread Specific Storage) API
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__fastthreadpool__fastthreadpool
#define __PYX_HAVE_API__fastthreadpool__fastthreadpool
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "pythread.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "fastthreadpool/fastthreadpool.pyx",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/
struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore;
struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool;
struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed;
struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire;

/* "fastthreadpool/fastthreadpool.pyx":102
 *         return self._value
 * 
 *     cpdef bint acquire(self, bint blocking=True):             # <<<<<<<<<<<<<<
 *     #p def acquire(self, blocking=True):
 *         cdef int value, wait
 */
struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire {
  int __pyx_n;
  int blocking;
};

/* "fastthreadpool/fastthreadpool.pyx":69
 * 
 * 
 * cdef class Semaphore:             # <<<<<<<<<<<<<<
 * #p class Semaphore(object):
 *     """Fast semaphore.
 */
struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore {
  PyObject_HEAD
  struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_vtab;
  PyThread_type_lock _lock;
  PyThread_type_lock _value_lock;
  int _value;
};


/* "fastthreadpool/fastthreadpool.pyx":145
 * 
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 * #p class Pool(object):
 * 
 */
struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool {
  PyObject_HEAD
  struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *__pyx_vtab;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *_job_cnt;
  PyObject *children;
  int max_children;
  PyObject *child_name_prefix;
  int result_id;
  int _child_cnt;
  int _busy_cnt;
  PyThread_type_lock _busy_lock;
  PyObject *_delayed;
  PyObject *_scheduled;
  PyObject *_jobs;
  PyObject *_jobs_append;
  PyObject *_jobs_appendleft;
  PyObject *_done;
  PyObject *_failed;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *_done_cnt;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *_failed_cnt;
  int _shutdown;
  int _shutdown_children;
  PyObject *logger;
  PyObject *init_callback;
  PyObject *_thr_done;
  PyObject *_thr_failed;
};


/* "fastthreadpool/fastthreadpool.pyx":459
 *         return self._scheduled
 * 
 *     def as_completed(self, wait=None):             # <<<<<<<<<<<<<<
 *         cdef float to
 *         cdef object pyto
 */
struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed {
  PyObject_HEAD
  int __pyx_v_do_sleep;
  PyObject *__pyx_v_done;
  PyObject *__pyx_v_done_popleft;
  PyObject *__pyx_v_failed;
  PyObject *__pyx_v_failed_popleft;
  PyObject *__pyx_v_pyto;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self;
  float __pyx_v_to;
  PyObject *__pyx_v_wait;
};



/* "fastthreadpool/fastthreadpool.pyx":69
 * 
 * 
 * cdef class Semaphore:             # <<<<<<<<<<<<<<
 * #p class Semaphore(object):
 *     """Fast semaphore.
 */

struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore {
  int (*acquire)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *, int __pyx_skip_dispatch, struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire *__pyx_optional_args);
  void (*release)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_vtabptr_14fastthreadpool_14fastthreadpool_Semaphore;


/* "fastthreadpool/fastthreadpool.pyx":145
 * 
 * 
 * cdef class Pool:             # <<<<<<<<<<<<<<
 * #p class Pool(object):
 * 
 */

struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool {
  void (*_busy_lock_inc)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *);
  void (*_busy_lock_dec)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *);
  PyObject *(*_submit)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, int);
  PyObject *(*_submit_later)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
  PyObject *(*_submit_at)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
  PyObject *(*_schedule)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
  void (*_delayed_cancel)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *);
  void (*_scheduled_cancel)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *);
};
static struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *__pyx_vtabptr_14fastthreadpool_14fastthreadpool_Pool;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* py_set_remove.proto */
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* CallableCheck.proto */
#if CYTHON_USE_TYPE_SLOTS && PY_MAJOR_VERSION >= 3
#define __Pyx_PyCallable_Check(obj)   ((obj)->ob_type->tp_call != NULL)
#else
#define __Pyx_PyCallable_Check(obj)   PyCallable_Check(obj)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* py_set_discard.proto */
static CYTHON_INLINE int __Pyx_PySet_Discard(PyObject *set, PyObject *key);

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchInspect.proto */
static PyObject* __Pyx_patch_inspect(PyObject* module);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_acquire(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire *__pyx_optional_args); /* proto*/
static void __pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_release(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__busy_lock_inc(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto*/
static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__busy_lock_dec(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, int __pyx_v_high_priority); /* proto*/
static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit_later(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_delay, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto*/
static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit_at(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto*/
static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__schedule(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto*/
static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__delayed_cancel(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto*/
static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__scheduled_cancel(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'fastthreadpool.fastthreadpool' */
static PyTypeObject *__pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore = 0;
static PyTypeObject *__pyx_ptype_14fastthreadpool_14fastthreadpool_Pool = 0;
static PyTypeObject *__pyx_ptype_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_sys = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_Lock = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_Thread = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_Timer = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_islice = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_deque = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool__time = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_sleep = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count = 0;
static PyObject *__pyx_v_14fastthreadpool_14fastthreadpool__pools = 0;
#define __Pyx_MODULE_NAME "fastthreadpool.fastthreadpool"
extern int __pyx_module_is_main_fastthreadpool__fastthreadpool;
int __pyx_module_is_main_fastthreadpool__fastthreadpool = 0;

/* Implementation of 'fastthreadpool.fastthreadpool' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_KeyboardInterrupt;
static const char __pyx_k_t[] = "t";
static const char __pyx_k__7[] = "";
static const char __pyx_k_fn[] = "fn";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_os[] = "os";
static const char __pyx_k__10[] = "-";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_itr[] = "itr";
static const char __pyx_k_now[] = "now";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_Lock[] = "Lock";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_pool[] = "pool";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_soon[] = "soon";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_wait[] = "wait";
static const char __pyx_k_Timer[] = "Timer";
static const char __pyx_k_child[] = "_child";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_delay[] = "delay";
static const char __pyx_k_deque[] = "deque";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_runat[] = "_runat";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_timer[] = "timer";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_Thread[] = "Thread";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_atexit[] = "atexit";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_cancel[] = "cancel";
static const char __pyx_k_daemon[] = "daemon";
static const char __pyx_k_exc_tb[] = "exc_tb";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_islice[] = "islice";
static const char __pyx_k_job_id[] = "job_id";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_mktime[] = "mktime";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_target[] = "target";
static const char __pyx_k_thread[] = "thread";
static const char __pyx_k_acquire[] = "acquire";
static const char __pyx_k_exc_val[] = "exc_val";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_popleft[] = "popleft";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_release[] = "release";
static const char __pyx_k_timeout[] = "timeout";
static const char __pyx_k_TimerObj[] = "TimerObj";
static const char __pyx_k_blocking[] = "blocking";
static const char __pyx_k_exc_type[] = "exc_type";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_interval[] = "interval";
static const char __pyx_k_is_alive[] = "is_alive";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setLevel[] = "setLevel";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_shutdown[] = "shutdown";
static const char __pyx_k_timer_id[] = "timer_id";
static const char __pyx_k_Formatter[] = "Formatter";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_cpu_count[] = "cpu_count";
static const char __pyx_k_exception[] = "exception";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_log_level[] = "log_level";
static const char __pyx_k_map_child[] = "_map_child";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_monotonic[] = "monotonic";
static const char __pyx_k_propagate[] = "propagate";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_result_id[] = "result_id";
static const char __pyx_k_threading[] = "threading";
static const char __pyx_k_timer_obj[] = "timer_obj";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_addHandler[] = "addHandler";
static const char __pyx_k_appendleft[] = "appendleft";
static const char __pyx_k_imap_child[] = "_imap_child";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_LOGGER_NAME[] = "LOGGER_NAME";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PoolStopped[] = "PoolStopped";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_done_thread[] = "_done_thread";
static const char __pyx_k_join_thread[] = "_join_thread";
static const char __pyx_k_schedule_do[] = "_schedule_do";
static const char __pyx_k_struct_time[] = "struct_time";
static const char __pyx_k_PoolCallback[] = "PoolCallback";
static const char __pyx_k_ThreadPool_s[] = "ThreadPool%s-";
static const char __pyx_k_TimeoutError[] = "TimeoutError";
static const char __pyx_k_as_completed[] = "as_completed";
static const char __pyx_k_max_children[] = "max_children";
static const char __pyx_k_old_timer_id[] = "old_timer_id";
static const char __pyx_k_setFormatter[] = "setFormatter";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_StreamHandler[] = "StreamHandler";
static const char __pyx_k_done_callback[] = "done_callback";
static const char __pyx_k_failed_thread[] = "_failed_thread";
static const char __pyx_k_init_callback[] = "init_callback";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_ThreadPoolDone[] = "ThreadPoolDone";
static const char __pyx_k_fastthreadpool[] = "fastthreadpool";
static const char __pyx_k_TimerObj___init[] = "TimerObj.__init__";
static const char __pyx_k_failed_callback[] = "failed_callback";
static const char __pyx_k_multiprocessing[] = "multiprocessing";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_submit_later_do[] = "_submit_later_do";
static const char __pyx_k_Pool_not_running[] = "Pool not running";
static const char __pyx_k_ThreadPoolFailed[] = "ThreadPoolFailed";
static const char __pyx_k_KeyboardInterrupt[] = "KeyboardInterrupt";
static const char __pyx_k_Pool_as_completed[] = "Pool.as_completed";
static const char __pyx_k_child_name_prefix[] = "child_name_prefix";
static const char __pyx_k_shutdown_children[] = "shutdown_children";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_Using_done_callback[] = "Using done_callback!";
static const char __pyx_k_isgeneratorfunction[] = "isgeneratorfunction";
static const char __pyx_k_Using_failed_callback[] = "Using failed_callback!";
static const char __pyx_k_DEFAULT_LOGGING_FORMAT[] = "DEFAULT_LOGGING_FORMAT";
static const char __pyx_k_runat_has_invalid_value[] = "_runat has invalid value!";
static const char __pyx_k_fastthreadpool_fastthreadpool[] = "fastthreadpool.fastthreadpool";
static const char __pyx_k_Martin_Bammer_mrbm74_gmail_com[] = "Martin Bammer (mrbm74@gmail.com)";
static const char __pyx_k_Number_of_child_threads_must_be[] = "Number of child threads must be greater than 0";
static const char __pyx_k_levelname_s_processName_s_messa[] = "[%(levelname)s/%(processName)s] %(message)s";
static const char __pyx_k_Implements_a_lightweight_and_fas[] = "Implements a lightweight and fast thread pool.";
static const char __pyx_k_Semaphore_Parameter_value_must_n[] = "Semaphore: Parameter 'value' must not be less than 0";
static const char __pyx_k_fastthreadpool_fastthreadpool_py[] = "fastthreadpool/fastthreadpool.pyx";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_DEFAULT_LOGGING_FORMAT;
static PyObject *__pyx_n_s_Formatter;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_KeyboardInterrupt;
static PyObject *__pyx_n_s_LOGGER_NAME;
static PyObject *__pyx_n_s_Lock;
static PyObject *__pyx_kp_u_Martin_Bammer_mrbm74_gmail_com;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Number_of_child_threads_must_be;
static PyObject *__pyx_n_s_PoolCallback;
static PyObject *__pyx_n_s_PoolStopped;
static PyObject *__pyx_n_s_Pool_as_completed;
static PyObject *__pyx_kp_u_Pool_not_running;
static PyObject *__pyx_kp_u_Semaphore_Parameter_value_must_n;
static PyObject *__pyx_n_s_StreamHandler;
static PyObject *__pyx_n_s_Thread;
static PyObject *__pyx_n_u_ThreadPoolDone;
static PyObject *__pyx_n_u_ThreadPoolFailed;
static PyObject *__pyx_kp_u_ThreadPool_s;
static PyObject *__pyx_n_s_TimeoutError;
static PyObject *__pyx_n_s_Timer;
static PyObject *__pyx_n_s_TimerObj;
static PyObject *__pyx_n_s_TimerObj___init;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_Using_done_callback;
static PyObject *__pyx_kp_u_Using_failed_callback;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_n_s_acquire;
static PyObject *__pyx_n_s_addHandler;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_appendleft;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_completed;
static PyObject *__pyx_n_s_atexit;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_blocking;
static PyObject *__pyx_n_s_cancel;
static PyObject *__pyx_n_s_child;
static PyObject *__pyx_n_s_child_name_prefix;
static PyObject *__pyx_n_s_clear;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_n_s_cpu_count;
static PyObject *__pyx_n_s_daemon;
static PyObject *__pyx_n_s_delay;
static PyObject *__pyx_n_s_deque;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_done_callback;
static PyObject *__pyx_n_s_done_thread;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_type;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_exception;
static PyObject *__pyx_n_s_failed_callback;
static PyObject *__pyx_n_s_failed_thread;
static PyObject *__pyx_n_u_fastthreadpool;
static PyObject *__pyx_n_s_fastthreadpool_fastthreadpool;
static PyObject *__pyx_kp_s_fastthreadpool_fastthreadpool_py;
static PyObject *__pyx_n_s_fn;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_imap_child;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init_callback;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_interval;
static PyObject *__pyx_n_s_is_alive;
static PyObject *__pyx_n_s_isgeneratorfunction;
static PyObject *__pyx_n_s_islice;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_itr;
static PyObject *__pyx_n_s_job_id;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_join_thread;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_kp_u_levelname_s_processName_s_messa;
static PyObject *__pyx_n_s_log_level;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map_child;
static PyObject *__pyx_n_s_max_children;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_mktime;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_monotonic;
static PyObject *__pyx_n_s_multiprocessing;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_now;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_old_timer_id;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_pool;
static PyObject *__pyx_n_s_popleft;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_propagate;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_release;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_result_id;
static PyObject *__pyx_n_s_runat;
static PyObject *__pyx_kp_u_runat_has_invalid_value;
static PyObject *__pyx_n_s_schedule_do;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setFormatter;
static PyObject *__pyx_n_s_setLevel;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shutdown;
static PyObject *__pyx_n_s_shutdown_children;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_soon;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_struct_time;
static PyObject *__pyx_n_s_submit_later_do;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thread;
static PyObject *__pyx_n_s_threading;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_timeout;
static PyObject *__pyx_n_s_timer;
static PyObject *__pyx_n_s_timer_id;
static PyObject *__pyx_n_s_timer_obj;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_version_info;
static PyObject *__pyx_n_s_wait;
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_shutdown(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_now); /* proto */
static int __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore___cinit__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_v_value); /* proto */
static void __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_2__dealloc__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_5value___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_4acquire(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_v_blocking); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_6release(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_8TimerObj___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool___cinit__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, int __pyx_v_max_children, PyObject *__pyx_v_child_name_prefix, PyObject *__pyx_v_init_callback, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_failed_callback, int __pyx_v_log_level, int __pyx_v_result_id); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_2__del__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4__enter__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_6__exit__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_8_done_thread(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_done_callback); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_10_failed_thread(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_failed_callback); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_12_child(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_14submit(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_16submit_done(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_18submit_first(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_20submit_done_first(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_22_submit_later_do(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timer_obj, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_24submit_later(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_delay, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_26submit_done_later(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_delay, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_28submit_at(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_30submit_done_at(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_7delayed___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_32_schedule_do(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timer_obj, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_34schedule(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_36schedule_done(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_9scheduled___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_38as_completed(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_wait); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_41_map_child(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_itr, PyObject *__pyx_v_done_callback); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_43_imap_child(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_itr, PyObject *__pyx_v_done_callback); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_45map(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_itr, PyObject *__pyx_v_done_callback); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_47clear(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_5alive___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4busy___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_7pending___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4jobs___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4done___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_8done_cnt___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_6failed___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_10failed_cnt___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_49_join_thread(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_thread, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_51shutdown_children(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_53shutdown(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timeout, PyObject *__pyx_v_soon); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_55join(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timeout); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_57cancel(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_job_id, PyObject *__pyx_v_timer); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_59__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_61__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_14fastthreadpool_14fastthreadpool_Semaphore(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14fastthreadpool_14fastthreadpool_Pool(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__30;
/* Late includes */

/* "fastthreadpool/fastthreadpool.pyx":52
 * 
 * 
 * def shutdown(now=True):             # <<<<<<<<<<<<<<
 *     for pool in _pools:
 *         if now:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_1shutdown(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14fastthreadpool_14fastthreadpool_1shutdown = {"shutdown", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_1shutdown, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_1shutdown(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_now = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_now,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_now);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shutdown") < 0)) __PYX_ERR(0, 52, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_now = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shutdown", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 52, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_shutdown(__pyx_self, __pyx_v_now);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_shutdown(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_now) {
  PyObject *__pyx_v_pool = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("shutdown", 0);

  /* "fastthreadpool/fastthreadpool.pyx":53
 * 
 * def shutdown(now=True):
 *     for pool in _pools:             # <<<<<<<<<<<<<<
 *         if now:
 *             pool.shutdown_children()
 */
  __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_set_iterator(__pyx_v_14fastthreadpool_14fastthreadpool__pools, 1, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_6 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, __pyx_t_4);
    if (unlikely(__pyx_t_6 == 0)) break;
    if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_pool, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":54
 * def shutdown(now=True):
 *     for pool in _pools:
 *         if now:             # <<<<<<<<<<<<<<
 *             pool.shutdown_children()
 *             pool.cancel(None, True)
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_now); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "fastthreadpool/fastthreadpool.pyx":55
 *     for pool in _pools:
 *         if now:
 *             pool.shutdown_children()             # <<<<<<<<<<<<<<
 *             pool.cancel(None, True)
 *             pool.shutdown(None, True)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_shutdown_children); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 55, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":56
 *         if now:
 *             pool.shutdown_children()
 *             pool.cancel(None, True)             # <<<<<<<<<<<<<<
 *             pool.shutdown(None, True)
 *         else:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_cancel); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":57
 *             pool.shutdown_children()
 *             pool.cancel(None, True)
 *             pool.shutdown(None, True)             # <<<<<<<<<<<<<<
 *         else:
 *             pool.cancel(None, False)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_shutdown); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":54
 * def shutdown(now=True):
 *     for pool in _pools:
 *         if now:             # <<<<<<<<<<<<<<
 *             pool.shutdown_children()
 *             pool.cancel(None, True)
 */
      goto __pyx_L5;
    }

    /* "fastthreadpool/fastthreadpool.pyx":59
 *             pool.shutdown(None, True)
 *         else:
 *             pool.cancel(None, False)             # <<<<<<<<<<<<<<
 *             pool.shutdown()
 * 
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_cancel); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":60
 *         else:
 *             pool.cancel(None, False)
 *             pool.shutdown()             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_pool, __pyx_n_s_shutdown); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_L5:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":52
 * 
 * 
 * def shutdown(now=True):             # <<<<<<<<<<<<<<
 *     for pool in _pools:
 *         if now:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pool);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":76
 *     cdef int _value
 * 
 *     def __cinit__(self, int value=1):             # <<<<<<<<<<<<<<
 *     #p def __init__(self, value=1):
 *         if value < 0:
 */

/* Python wrapper */
static int __pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 76, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_value = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 76, __pyx_L3_error)
    } else {
      __pyx_v_value = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 76, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore___cinit__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore___cinit__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":78
 *     def __cinit__(self, int value=1):
 *     #p def __init__(self, value=1):
 *         if value < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")
 *         self._lock = pythread.PyThread_allocate_lock()
 */
  __pyx_t_1 = ((__pyx_v_value < 0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "fastthreadpool/fastthreadpool.pyx":79
 *     #p def __init__(self, value=1):
 *         if value < 0:
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")             # <<<<<<<<<<<<<<
 *         self._lock = pythread.PyThread_allocate_lock()
 *         if not self._lock:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 79, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":78
 *     def __cinit__(self, int value=1):
 *     #p def __init__(self, value=1):
 *         if value < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")
 *         self._lock = pythread.PyThread_allocate_lock()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":80
 *         if value < 0:
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")
 *         self._lock = pythread.PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *         if not self._lock:
 *             raise MemoryError()
 */
  __pyx_v_self->_lock = PyThread_allocate_lock();

  /* "fastthreadpool/fastthreadpool.pyx":81
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")
 *         self._lock = pythread.PyThread_allocate_lock()
 *         if not self._lock:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._value_lock = pythread.PyThread_allocate_lock()
 */
  __pyx_t_1 = ((!(__pyx_v_self->_lock != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "fastthreadpool/fastthreadpool.pyx":82
 *         self._lock = pythread.PyThread_allocate_lock()
 *         if not self._lock:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._value_lock = pythread.PyThread_allocate_lock()
 *         if not self._value_lock:
 */
    PyErr_NoMemory(); __PYX_ERR(0, 82, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":81
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")
 *         self._lock = pythread.PyThread_allocate_lock()
 *         if not self._lock:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._value_lock = pythread.PyThread_allocate_lock()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":83
 *         if not self._lock:
 *             raise MemoryError()
 *         self._value_lock = pythread.PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *         if not self._value_lock:
 *             raise MemoryError()
 */
  __pyx_v_self->_value_lock = PyThread_allocate_lock();

  /* "fastthreadpool/fastthreadpool.pyx":84
 *             raise MemoryError()
 *         self._value_lock = pythread.PyThread_allocate_lock()
 *         if not self._value_lock:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         #p self._lock = Lock()
 */
  __pyx_t_1 = ((!(__pyx_v_self->_value_lock != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "fastthreadpool/fastthreadpool.pyx":85
 *         self._value_lock = pythread.PyThread_allocate_lock()
 *         if not self._value_lock:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         #p self._lock = Lock()
 *         #p self._value_lock = Lock()
 */
    PyErr_NoMemory(); __PYX_ERR(0, 85, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":84
 *             raise MemoryError()
 *         self._value_lock = pythread.PyThread_allocate_lock()
 *         if not self._value_lock:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         #p self._lock = Lock()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":88
 *         #p self._lock = Lock()
 *         #p self._value_lock = Lock()
 *         self._value = value             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_value = __pyx_v_value;

  /* "fastthreadpool/fastthreadpool.pyx":76
 *     cdef int _value
 * 
 *     def __cinit__(self, int value=1):             # <<<<<<<<<<<<<<
 *     #p def __init__(self, value=1):
 *         if value < 0:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":90
 *         self._value = value
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._lock:
 *             pythread.PyThread_free_lock(self._lock)
 */

/* Python wrapper */
static void __pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_2__dealloc__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_2__dealloc__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":91
 * 
 *     def __dealloc__(self):
 *         if self._lock:             # <<<<<<<<<<<<<<
 *             pythread.PyThread_free_lock(self._lock)
 *             self._lock = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_lock != 0);
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":92
 *     def __dealloc__(self):
 *         if self._lock:
 *             pythread.PyThread_free_lock(self._lock)             # <<<<<<<<<<<<<<
 *             self._lock = NULL
 *         if self._value_lock:
 */
    PyThread_free_lock(__pyx_v_self->_lock);

    /* "fastthreadpool/fastthreadpool.pyx":93
 *         if self._lock:
 *             pythread.PyThread_free_lock(self._lock)
 *             self._lock = NULL             # <<<<<<<<<<<<<<
 *         if self._value_lock:
 *             pythread.PyThread_free_lock(self._value_lock)
 */
    __pyx_v_self->_lock = NULL;

    /* "fastthreadpool/fastthreadpool.pyx":91
 * 
 *     def __dealloc__(self):
 *         if self._lock:             # <<<<<<<<<<<<<<
 *             pythread.PyThread_free_lock(self._lock)
 *             self._lock = NULL
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":94
 *             pythread.PyThread_free_lock(self._lock)
 *             self._lock = NULL
 *         if self._value_lock:             # <<<<<<<<<<<<<<
 *             pythread.PyThread_free_lock(self._value_lock)
 *             self._value_lock = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_value_lock != 0);
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":95
 *             self._lock = NULL
 *         if self._value_lock:
 *             pythread.PyThread_free_lock(self._value_lock)             # <<<<<<<<<<<<<<
 *             self._value_lock = NULL
 * 
 */
    PyThread_free_lock(__pyx_v_self->_value_lock);

    /* "fastthreadpool/fastthreadpool.pyx":96
 *         if self._value_lock:
 *             pythread.PyThread_free_lock(self._value_lock)
 *             self._value_lock = NULL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->_value_lock = NULL;

    /* "fastthreadpool/fastthreadpool.pyx":94
 *             pythread.PyThread_free_lock(self._lock)
 *             self._lock = NULL
 *         if self._value_lock:             # <<<<<<<<<<<<<<
 *             pythread.PyThread_free_lock(self._value_lock)
 *             self._value_lock = NULL
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":90
 *         self._value = value
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._lock:
 *             pythread.PyThread_free_lock(self._lock)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fastthreadpool/fastthreadpool.pyx":99
 * 
 *     @property
 *     def value(self):             # <<<<<<<<<<<<<<
 *         return self._value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_5value___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_5value___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":100
 *     @property
 *     def value(self):
 *         return self._value             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint acquire(self, bint blocking=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":99
 * 
 *     @property
 *     def value(self):             # <<<<<<<<<<<<<<
 *         return self._value
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":102
 *         return self._value
 * 
 *     cpdef bint acquire(self, bint blocking=True):             # <<<<<<<<<<<<<<
 *     #p def acquire(self, blocking=True):
 *         cdef int value, wait
 */

static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5acquire(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_acquire(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire *__pyx_optional_args) {
  int __pyx_v_blocking = ((int)1);
  int __pyx_v_value;
  int __pyx_v_wait;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("acquire", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_blocking = __pyx_optional_args->blocking;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_acquire); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5acquire)) {
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_blocking); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "fastthreadpool/fastthreadpool.pyx":105
 *     #p def acquire(self, blocking=True):
 *         cdef int value, wait
 *         pythread.PyThread_acquire_lock(self._value_lock, 1)             # <<<<<<<<<<<<<<
 *         #p self._value_lock.acquire()
 *         self._value -= 1
 */
  (void)(PyThread_acquire_lock(__pyx_v_self->_value_lock, 1));

  /* "fastthreadpool/fastthreadpool.pyx":107
 *         pythread.PyThread_acquire_lock(self._value_lock, 1)
 *         #p self._value_lock.acquire()
 *         self._value -= 1             # <<<<<<<<<<<<<<
 *         value = self._value
 *         pythread.PyThread_release_lock(self._value_lock)
 */
  __pyx_v_self->_value = (__pyx_v_self->_value - 1);

  /* "fastthreadpool/fastthreadpool.pyx":108
 *         #p self._value_lock.acquire()
 *         self._value -= 1
 *         value = self._value             # <<<<<<<<<<<<<<
 *         pythread.PyThread_release_lock(self._value_lock)
 *         #p self._value_lock.release()
 */
  __pyx_t_5 = __pyx_v_self->_value;
  __pyx_v_value = __pyx_t_5;

  /* "fastthreadpool/fastthreadpool.pyx":109
 *         self._value -= 1
 *         value = self._value
 *         pythread.PyThread_release_lock(self._value_lock)             # <<<<<<<<<<<<<<
 *         #p self._value_lock.release()
 *         if value >= 0:
 */
  PyThread_release_lock(__pyx_v_self->_value_lock);

  /* "fastthreadpool/fastthreadpool.pyx":111
 *         pythread.PyThread_release_lock(self._value_lock)
 *         #p self._value_lock.release()
 *         if value >= 0:             # <<<<<<<<<<<<<<
 *             return False
 *         with nogil:
 */
  __pyx_t_4 = ((__pyx_v_value >= 0) != 0);
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":112
 *         #p self._value_lock.release()
 *         if value >= 0:
 *             return False             # <<<<<<<<<<<<<<
 *         with nogil:
 *         #p if True:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "fastthreadpool/fastthreadpool.pyx":111
 *         pythread.PyThread_release_lock(self._value_lock)
 *         #p self._value_lock.release()
 *         if value >= 0:             # <<<<<<<<<<<<<<
 *             return False
 *         with nogil:
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":113
 *         if value >= 0:
 *             return False
 *         with nogil:             # <<<<<<<<<<<<<<
 *         #p if True:
 *             wait = pythread.WAIT_LOCK if blocking else pythread.NOWAIT_LOCK
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":115
 *         with nogil:
 *         #p if True:
 *             wait = pythread.WAIT_LOCK if blocking else pythread.NOWAIT_LOCK             # <<<<<<<<<<<<<<
 *             #p wait = blocking
 *             while True:
 */
        if ((__pyx_v_blocking != 0)) {
          __pyx_t_6 = WAIT_LOCK;
        } else {
          __pyx_t_6 = NOWAIT_LOCK;
        }
        __pyx_v_wait = __pyx_t_6;

        /* "fastthreadpool/fastthreadpool.pyx":117
 *             wait = pythread.WAIT_LOCK if blocking else pythread.NOWAIT_LOCK
 *             #p wait = blocking
 *             while True:             # <<<<<<<<<<<<<<
 *                 if pythread.PyThread_acquire_lock(self._lock, wait):
 *                 #p if self._lock.acquire(wait):
 */
        while (1) {

          /* "fastthreadpool/fastthreadpool.pyx":118
 *             #p wait = blocking
 *             while True:
 *                 if pythread.PyThread_acquire_lock(self._lock, wait):             # <<<<<<<<<<<<<<
 *                 #p if self._lock.acquire(wait):
 *                     break
 */
          __pyx_t_4 = (PyThread_acquire_lock(__pyx_v_self->_lock, __pyx_v_wait) != 0);
          if (__pyx_t_4) {

            /* "fastthreadpool/fastthreadpool.pyx":120
 *                 if pythread.PyThread_acquire_lock(self._lock, wait):
 *                 #p if self._lock.acquire(wait):
 *                     break             # <<<<<<<<<<<<<<
 *                 if wait == pythread.NOWAIT_LOCK:
 *                 #p if not wait:
 */
            goto __pyx_L8_break;

            /* "fastthreadpool/fastthreadpool.pyx":118
 *             #p wait = blocking
 *             while True:
 *                 if pythread.PyThread_acquire_lock(self._lock, wait):             # <<<<<<<<<<<<<<
 *                 #p if self._lock.acquire(wait):
 *                     break
 */
          }

          /* "fastthreadpool/fastthreadpool.pyx":121
 *                 #p if self._lock.acquire(wait):
 *                     break
 *                 if wait == pythread.NOWAIT_LOCK:             # <<<<<<<<<<<<<<
 *                 #p if not wait:
 *                     return False
 */
          __pyx_t_4 = ((__pyx_v_wait == NOWAIT_LOCK) != 0);
          if (__pyx_t_4) {

            /* "fastthreadpool/fastthreadpool.pyx":123
 *                 if wait == pythread.NOWAIT_LOCK:
 *                 #p if not wait:
 *                     return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
            __pyx_r = 0;
            goto __pyx_L4_return;

            /* "fastthreadpool/fastthreadpool.pyx":121
 *                 #p if self._lock.acquire(wait):
 *                     break
 *                 if wait == pythread.NOWAIT_LOCK:             # <<<<<<<<<<<<<<
 *                 #p if not wait:
 *                     return False
 */
          }
        }
        __pyx_L8_break:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":113
 *         if value >= 0:
 *             return False
 *         with nogil:             # <<<<<<<<<<<<<<
 *         #p if True:
 *             wait = pythread.WAIT_LOCK if blocking else pythread.NOWAIT_LOCK
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L4_return: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L0;
        }
        __pyx_L6:;
      }
  }

  /* "fastthreadpool/fastthreadpool.pyx":124
 *                 #p if not wait:
 *                     return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cpdef void release(self):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":102
 *         return self._value
 * 
 *     cpdef bint acquire(self, bint blocking=True):             # <<<<<<<<<<<<<<
 *     #p def acquire(self, blocking=True):
 *         cdef int value, wait
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("fastthreadpool.fastthreadpool.Semaphore.acquire", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5acquire(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5acquire(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_blocking;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("acquire (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_blocking,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blocking);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "acquire") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_blocking = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_blocking == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
    } else {
      __pyx_v_blocking = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("acquire", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.acquire", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_4acquire(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self), __pyx_v_blocking);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_4acquire(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_v_blocking) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("acquire", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.blocking = __pyx_v_blocking;
  __pyx_t_1 = __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Semaphore->acquire(__pyx_v_self, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.acquire", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":126
 *         return True
 * 
 *     cpdef void release(self):             # <<<<<<<<<<<<<<
 *     #p def release(self):
 *         pythread.PyThread_acquire_lock(self._value_lock, 1)
 */

static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_7release(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static void __pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_release(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("release", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_release); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_7release)) {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "fastthreadpool/fastthreadpool.pyx":128
 *     cpdef void release(self):
 *     #p def release(self):
 *         pythread.PyThread_acquire_lock(self._value_lock, 1)             # <<<<<<<<<<<<<<
 *         #p self._value_lock.acquire()
 *         self._value += 1
 */
  (void)(PyThread_acquire_lock(__pyx_v_self->_value_lock, 1));

  /* "fastthreadpool/fastthreadpool.pyx":130
 *         pythread.PyThread_acquire_lock(self._value_lock, 1)
 *         #p self._value_lock.acquire()
 *         self._value += 1             # <<<<<<<<<<<<<<
 *         if self._value >= 0:
 *             pythread.PyThread_release_lock(self._lock)
 */
  __pyx_v_self->_value = (__pyx_v_self->_value + 1);

  /* "fastthreadpool/fastthreadpool.pyx":131
 *         #p self._value_lock.acquire()
 *         self._value += 1
 *         if self._value >= 0:             # <<<<<<<<<<<<<<
 *             pythread.PyThread_release_lock(self._lock)
 *             #p self._lock.release()
 */
  __pyx_t_3 = ((__pyx_v_self->_value >= 0) != 0);
  if (__pyx_t_3) {

    /* "fastthreadpool/fastthreadpool.pyx":132
 *         self._value += 1
 *         if self._value >= 0:
 *             pythread.PyThread_release_lock(self._lock)             # <<<<<<<<<<<<<<
 *             #p self._lock.release()
 *         pythread.PyThread_release_lock(self._value_lock)
 */
    PyThread_release_lock(__pyx_v_self->_lock);

    /* "fastthreadpool/fastthreadpool.pyx":131
 *         #p self._value_lock.acquire()
 *         self._value += 1
 *         if self._value >= 0:             # <<<<<<<<<<<<<<
 *             pythread.PyThread_release_lock(self._lock)
 *             #p self._lock.release()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":134
 *             pythread.PyThread_release_lock(self._lock)
 *             #p self._lock.release()
 *         pythread.PyThread_release_lock(self._value_lock)             # <<<<<<<<<<<<<<
 *         #p self._value_lock.release()
 * 
 */
  PyThread_release_lock(__pyx_v_self->_value_lock);

  /* "fastthreadpool/fastthreadpool.pyx":126
 *         return True
 * 
 *     cpdef void release(self):             # <<<<<<<<<<<<<<
 *     #p def release(self):
 *         pythread.PyThread_acquire_lock(self._value_lock, 1)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("fastthreadpool.fastthreadpool.Semaphore.release", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_7release(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_7release(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("release (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_6release(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_6release(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("release", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_release(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.release", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_8__reduce_cython__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_10__setstate_cython__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_9Semaphore_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Semaphore.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":140
 * class TimerObj(object):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.old_timer_id = None   # Old timer id
 *         self.timer_id = None
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_8TimerObj_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_14fastthreadpool_14fastthreadpool_8TimerObj_1__init__ = {"__init__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_8TimerObj_1__init__, METH_O, 0};
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_8TimerObj_1__init__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_8TimerObj___init__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_8TimerObj___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":141
 * 
 *     def __init__(self):
 *         self.old_timer_id = None   # Old timer id             # <<<<<<<<<<<<<<
 *         self.timer_id = None
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_old_timer_id, Py_None) < 0) __PYX_ERR(0, 141, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":142
 *     def __init__(self):
 *         self.old_timer_id = None   # Old timer id
 *         self.timer_id = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_timer_id, Py_None) < 0) __PYX_ERR(0, 142, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":140
 * class TimerObj(object):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.old_timer_id = None   # Old timer id
 *         self.timer_id = None
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.TimerObj.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":162
 *     cdef object _thr_done, _thr_failed
 * 
 *     def __cinit__(self, int max_children=-9999, str child_name_prefix="", init_callback=None,             # <<<<<<<<<<<<<<
 *                   done_callback=None, failed_callback=None, int log_level=0, bint result_id=False):
 *     #p def __init__(self, max_children=-9999, child_name_prefix="", init_callback=None,
 */

/* Python wrapper */
static int __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_max_children;
  PyObject *__pyx_v_child_name_prefix = 0;
  PyObject *__pyx_v_init_callback = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_failed_callback = 0;
  int __pyx_v_log_level;
  int __pyx_v_result_id;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max_children,&__pyx_n_s_child_name_prefix,&__pyx_n_s_init_callback,&__pyx_n_s_done_callback,&__pyx_n_s_failed_callback,&__pyx_n_s_log_level,&__pyx_n_s_result_id,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject*)__pyx_kp_u__7);
    values[2] = ((PyObject *)Py_None);

    /* "fastthreadpool/fastthreadpool.pyx":163
 * 
 *     def __cinit__(self, int max_children=-9999, str child_name_prefix="", init_callback=None,
 *                   done_callback=None, failed_callback=None, int log_level=0, bint result_id=False):             # <<<<<<<<<<<<<<
 *     #p def __init__(self, max_children=-9999, child_name_prefix="", init_callback=None,
 *                  #p done_callback=None, failed_callback=None, log_level=None, result_id=False):
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_children);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child_name_prefix);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_init_callback);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_failed_callback);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_log_level);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_result_id);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_max_children = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_max_children == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
    } else {
      __pyx_v_max_children = ((int)-9999);
    }
    __pyx_v_child_name_prefix = ((PyObject*)values[1]);
    __pyx_v_init_callback = values[2];
    __pyx_v_done_callback = values[3];
    __pyx_v_failed_callback = values[4];
    if (values[5]) {
      __pyx_v_log_level = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_log_level == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L3_error)
    } else {
      __pyx_v_log_level = ((int)0);
    }
    if (values[6]) {
      __pyx_v_result_id = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_result_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 163, __pyx_L3_error)
    } else {
      __pyx_v_result_id = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child_name_prefix), (&PyUnicode_Type), 1, "child_name_prefix", 1))) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool___cinit__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_max_children, __pyx_v_child_name_prefix, __pyx_v_init_callback, __pyx_v_done_callback, __pyx_v_failed_callback, __pyx_v_log_level, __pyx_v_result_id);

  /* "fastthreadpool/fastthreadpool.pyx":162
 *     cdef object _thr_done, _thr_failed
 * 
 *     def __cinit__(self, int max_children=-9999, str child_name_prefix="", init_callback=None,             # <<<<<<<<<<<<<<
 *                   done_callback=None, failed_callback=None, int log_level=0, bint result_id=False):
 *     #p def __init__(self, max_children=-9999, child_name_prefix="", init_callback=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool___cinit__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, int __pyx_v_max_children, PyObject *__pyx_v_child_name_prefix, PyObject *__pyx_v_init_callback, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_failed_callback, int __pyx_v_log_level, int __pyx_v_result_id) {
  PyObject *__pyx_v_logging = NULL;
  PyObject *__pyx_v_formatter = NULL;
  PyObject *__pyx_v_handler = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":166
 *     #p def __init__(self, max_children=-9999, child_name_prefix="", init_callback=None,
 *                  #p done_callback=None, failed_callback=None, log_level=None, result_id=False):
 *         self._job_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self.children = set()
 *         if max_children <= -9999:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore), __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_job_cnt);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_job_cnt));
  __pyx_v_self->_job_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":167
 *                  #p done_callback=None, failed_callback=None, log_level=None, result_id=False):
 *         self._job_cnt = Semaphore(0)
 *         self.children = set()             # <<<<<<<<<<<<<<
 *         if max_children <= -9999:
 *             self.max_children = cpu_count()
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->children);
  __Pyx_DECREF(__pyx_v_self->children);
  __pyx_v_self->children = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":168
 *         self._job_cnt = Semaphore(0)
 *         self.children = set()
 *         if max_children <= -9999:             # <<<<<<<<<<<<<<
 *             self.max_children = cpu_count()
 *         elif max_children > 0:
 */
  __pyx_t_2 = ((__pyx_v_max_children <= -9999L) != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":169
 *         self.children = set()
 *         if max_children <= -9999:
 *             self.max_children = cpu_count()             # <<<<<<<<<<<<<<
 *         elif max_children > 0:
 *             self.max_children = max_children
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_self->max_children = __pyx_t_3;

    /* "fastthreadpool/fastthreadpool.pyx":168
 *         self._job_cnt = Semaphore(0)
 *         self.children = set()
 *         if max_children <= -9999:             # <<<<<<<<<<<<<<
 *             self.max_children = cpu_count()
 *         elif max_children > 0:
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":170
 *         if max_children <= -9999:
 *             self.max_children = cpu_count()
 *         elif max_children > 0:             # <<<<<<<<<<<<<<
 *             self.max_children = max_children
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_max_children > 0) != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":171
 *             self.max_children = cpu_count()
 *         elif max_children > 0:
 *             self.max_children = max_children             # <<<<<<<<<<<<<<
 *         else:
 *             self.max_children = cpu_count() + max_children
 */
    __pyx_v_self->max_children = __pyx_v_max_children;

    /* "fastthreadpool/fastthreadpool.pyx":170
 *         if max_children <= -9999:
 *             self.max_children = cpu_count()
 *         elif max_children > 0:             # <<<<<<<<<<<<<<
 *             self.max_children = max_children
 *         else:
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":173
 *             self.max_children = max_children
 *         else:
 *             self.max_children = cpu_count() + max_children             # <<<<<<<<<<<<<<
 *         if self.max_children <= 0:
 *             raise ValueError("Number of child threads must be greater than 0")
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_max_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_self->max_children = __pyx_t_3;
  }
  __pyx_L3:;

  /* "fastthreadpool/fastthreadpool.pyx":174
 *         else:
 *             self.max_children = cpu_count() + max_children
 *         if self.max_children <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Number of child threads must be greater than 0")
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)
 */
  __pyx_t_2 = ((__pyx_v_self->max_children <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "fastthreadpool/fastthreadpool.pyx":175
 *             self.max_children = cpu_count() + max_children
 *         if self.max_children <= 0:
 *             raise ValueError("Number of child threads must be greater than 0")             # <<<<<<<<<<<<<<
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)
 *         self.result_id = result_id
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 175, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":174
 *         else:
 *             self.max_children = cpu_count() + max_children
 *         if self.max_children <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Number of child threads must be greater than 0")
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":176
 *         if self.max_children <= 0:
 *             raise ValueError("Number of child threads must be greater than 0")
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)             # <<<<<<<<<<<<<<
 *         self.result_id = result_id
 *         self._child_cnt = 0
 */
  __pyx_t_2 = (__pyx_v_child_name_prefix != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_v_child_name_prefix) != 0);
  if (__pyx_t_2) {
    __pyx_t_4 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_child_name_prefix, __pyx_kp_u__10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyUnicode_Format(__pyx_kp_u_ThreadPool_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->child_name_prefix);
  __Pyx_DECREF(__pyx_v_self->child_name_prefix);
  __pyx_v_self->child_name_prefix = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":177
 *             raise ValueError("Number of child threads must be greater than 0")
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)
 *         self.result_id = result_id             # <<<<<<<<<<<<<<
 *         self._child_cnt = 0
 *         self._busy_lock = pythread.PyThread_allocate_lock()
 */
  __pyx_v_self->result_id = __pyx_v_result_id;

  /* "fastthreadpool/fastthreadpool.pyx":178
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)
 *         self.result_id = result_id
 *         self._child_cnt = 0             # <<<<<<<<<<<<<<
 *         self._busy_lock = pythread.PyThread_allocate_lock()
 *         #p self._busy_lock = Lock()
 */
  __pyx_v_self->_child_cnt = 0;

  /* "fastthreadpool/fastthreadpool.pyx":179
 *         self.result_id = result_id
 *         self._child_cnt = 0
 *         self._busy_lock = pythread.PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *         #p self._busy_lock = Lock()
 *         self._busy_cnt = 0
 */
  __pyx_v_self->_busy_lock = PyThread_allocate_lock();

  /* "fastthreadpool/fastthreadpool.pyx":181
 *         self._busy_lock = pythread.PyThread_allocate_lock()
 *         #p self._busy_lock = Lock()
 *         self._busy_cnt = 0             # <<<<<<<<<<<<<<
 *         self._delayed = deque()
 *         self._scheduled = deque()
 */
  __pyx_v_self->_busy_cnt = 0;

  /* "fastthreadpool/fastthreadpool.pyx":182
 *         #p self._busy_lock = Lock()
 *         self._busy_cnt = 0
 *         self._delayed = deque()             # <<<<<<<<<<<<<<
 *         self._scheduled = deque()
 *         self._jobs = deque()
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_deque); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_delayed);
  __Pyx_DECREF(__pyx_v_self->_delayed);
  __pyx_v_self->_delayed = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":183
 *         self._busy_cnt = 0
 *         self._delayed = deque()
 *         self._scheduled = deque()             # <<<<<<<<<<<<<<
 *         self._jobs = deque()
 *         self._jobs_append = self._jobs.append
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_deque); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_scheduled);
  __Pyx_DECREF(__pyx_v_self->_scheduled);
  __pyx_v_self->_scheduled = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":184
 *         self._delayed = deque()
 *         self._scheduled = deque()
 *         self._jobs = deque()             # <<<<<<<<<<<<<<
 *         self._jobs_append = self._jobs.append
 *         self._jobs_appendleft = self._jobs.appendleft
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_deque); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_jobs);
  __Pyx_DECREF(__pyx_v_self->_jobs);
  __pyx_v_self->_jobs = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":185
 *         self._scheduled = deque()
 *         self._jobs = deque()
 *         self._jobs_append = self._jobs.append             # <<<<<<<<<<<<<<
 *         self._jobs_appendleft = self._jobs.appendleft
 *         self._done = deque()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_append); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_jobs_append);
  __Pyx_DECREF(__pyx_v_self->_jobs_append);
  __pyx_v_self->_jobs_append = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":186
 *         self._jobs = deque()
 *         self._jobs_append = self._jobs.append
 *         self._jobs_appendleft = self._jobs.appendleft             # <<<<<<<<<<<<<<
 *         self._done = deque()
 *         self._failed = deque()
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_appendleft); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_jobs_appendleft);
  __Pyx_DECREF(__pyx_v_self->_jobs_appendleft);
  __pyx_v_self->_jobs_appendleft = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":187
 *         self._jobs_append = self._jobs.append
 *         self._jobs_appendleft = self._jobs.appendleft
 *         self._done = deque()             # <<<<<<<<<<<<<<
 *         self._failed = deque()
 *         self._done_cnt = Semaphore(0)
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_deque); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_done);
  __Pyx_DECREF(__pyx_v_self->_done);
  __pyx_v_self->_done = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":188
 *         self._jobs_appendleft = self._jobs.appendleft
 *         self._done = deque()
 *         self._failed = deque()             # <<<<<<<<<<<<<<
 *         self._done_cnt = Semaphore(0)
 *         self._failed_cnt = Semaphore(0)
 */
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool_deque); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_failed);
  __Pyx_DECREF(__pyx_v_self->_failed);
  __pyx_v_self->_failed = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":189
 *         self._done = deque()
 *         self._failed = deque()
 *         self._done_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self._failed_cnt = Semaphore(0)
 *         self._shutdown_children = False
 */
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore), __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_done_cnt);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_done_cnt));
  __pyx_v_self->_done_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":190
 *         self._failed = deque()
 *         self._done_cnt = Semaphore(0)
 *         self._failed_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self._shutdown_children = False
 *         self._shutdown = False
 */
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore), __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_failed_cnt);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_failed_cnt));
  __pyx_v_self->_failed_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":191
 *         self._done_cnt = Semaphore(0)
 *         self._failed_cnt = Semaphore(0)
 *         self._shutdown_children = False             # <<<<<<<<<<<<<<
 *         self._shutdown = False
 *         self.logger = None
 */
  __pyx_v_self->_shutdown_children = 0;

  /* "fastthreadpool/fastthreadpool.pyx":192
 *         self._failed_cnt = Semaphore(0)
 *         self._shutdown_children = False
 *         self._shutdown = False             # <<<<<<<<<<<<<<
 *         self.logger = None
 *         self.init_callback = init_callback
 */
  __pyx_v_self->_shutdown = 0;

  /* "fastthreadpool/fastthreadpool.pyx":193
 *         self._shutdown_children = False
 *         self._shutdown = False
 *         self.logger = None             # <<<<<<<<<<<<<<
 *         self.init_callback = init_callback
 *         if done_callback:
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->logger);
  __Pyx_DECREF(__pyx_v_self->logger);
  __pyx_v_self->logger = Py_None;

  /* "fastthreadpool/fastthreadpool.pyx":194
 *         self._shutdown = False
 *         self.logger = None
 *         self.init_callback = init_callback             # <<<<<<<<<<<<<<
 *         if done_callback:
 *             self._thr_done = Thread(target=self._done_thread, args=(done_callback, ),
 */
  __Pyx_INCREF(__pyx_v_init_callback);
  __Pyx_GIVEREF(__pyx_v_init_callback);
  __Pyx_GOTREF(__pyx_v_self->init_callback);
  __Pyx_DECREF(__pyx_v_self->init_callback);
  __pyx_v_self->init_callback = __pyx_v_init_callback;

  /* "fastthreadpool/fastthreadpool.pyx":195
 *         self.logger = None
 *         self.init_callback = init_callback
 *         if done_callback:             # <<<<<<<<<<<<<<
 *             self._thr_done = Thread(target=self._done_thread, args=(done_callback, ),
 *                                     name="ThreadPoolDone")
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_done_callback); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 195, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":196
 *         self.init_callback = init_callback
 *         if done_callback:
 *             self._thr_done = Thread(target=self._done_thread, args=(done_callback, ),             # <<<<<<<<<<<<<<
 *                                     name="ThreadPoolDone")
 *             self._thr_done.daemon = True
 */
    __pyx_t_5 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_done_thread); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_target, __pyx_t_1) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_done_callback);
    __Pyx_GIVEREF(__pyx_v_done_callback);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_done_callback);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_args, __pyx_t_1) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_name, __pyx_n_u_ThreadPoolDone) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Thread, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->_thr_done);
    __Pyx_DECREF(__pyx_v_self->_thr_done);
    __pyx_v_self->_thr_done = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":198
 *             self._thr_done = Thread(target=self._done_thread, args=(done_callback, ),
 *                                     name="ThreadPoolDone")
 *             self._thr_done.daemon = True             # <<<<<<<<<<<<<<
 *             self._thr_done.start()
 *         else:
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self->_thr_done, __pyx_n_s_daemon, Py_True) < 0) __PYX_ERR(0, 198, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":199
 *                                     name="ThreadPoolDone")
 *             self._thr_done.daemon = True
 *             self._thr_done.start()             # <<<<<<<<<<<<<<
 *         else:
 *             self._thr_done = None
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_thr_done, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":195
 *         self.logger = None
 *         self.init_callback = init_callback
 *         if done_callback:             # <<<<<<<<<<<<<<
 *             self._thr_done = Thread(target=self._done_thread, args=(done_callback, ),
 *                                     name="ThreadPoolDone")
 */
    goto __pyx_L5;
  }

  /* "fastthreadpool/fastthreadpool.pyx":201
 *             self._thr_done.start()
 *         else:
 *             self._thr_done = None             # <<<<<<<<<<<<<<
 *         if failed_callback or log_level:
 *             if log_level:
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_thr_done);
    __Pyx_DECREF(__pyx_v_self->_thr_done);
    __pyx_v_self->_thr_done = Py_None;
  }
  __pyx_L5:;

  /* "fastthreadpool/fastthreadpool.pyx":202
 *         else:
 *             self._thr_done = None
 *         if failed_callback or log_level:             # <<<<<<<<<<<<<<
 *             if log_level:
 *                 import logging
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_failed_callback); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 202, __pyx_L1_error)
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_6 = (__pyx_v_log_level != 0);
  __pyx_t_2 = __pyx_t_6;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":203
 *             self._thr_done = None
 *         if failed_callback or log_level:
 *             if log_level:             # <<<<<<<<<<<<<<
 *                 import logging
 *                 self.logger = logging.getLogger(LOGGER_NAME)
 */
    __pyx_t_2 = (__pyx_v_log_level != 0);
    if (__pyx_t_2) {

      /* "fastthreadpool/fastthreadpool.pyx":204
 *         if failed_callback or log_level:
 *             if log_level:
 *                 import logging             # <<<<<<<<<<<<<<
 *                 self.logger = logging.getLogger(LOGGER_NAME)
 *                 self.logger.propagate = False
 */
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_logging, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 204, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_v_logging = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":205
 *             if log_level:
 *                 import logging
 *                 self.logger = logging.getLogger(LOGGER_NAME)             # <<<<<<<<<<<<<<
 *                 self.logger.propagate = False
 *                 formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_logging, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_LOGGER_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 205, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_v_self->logger);
      __Pyx_DECREF(__pyx_v_self->logger);
      __pyx_v_self->logger = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":206
 *                 import logging
 *                 self.logger = logging.getLogger(LOGGER_NAME)
 *                 self.logger.propagate = False             # <<<<<<<<<<<<<<
 *                 formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)
 *                 handler = logging.StreamHandler()
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self->logger, __pyx_n_s_propagate, Py_False) < 0) __PYX_ERR(0, 206, __pyx_L1_error)

      /* "fastthreadpool/fastthreadpool.pyx":207
 *                 self.logger = logging.getLogger(LOGGER_NAME)
 *                 self.logger.propagate = False
 *                 formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)             # <<<<<<<<<<<<<<
 *                 handler = logging.StreamHandler()
 *                 handler.setFormatter(formatter)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_logging, __pyx_n_s_Formatter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_DEFAULT_LOGGING_FORMAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_formatter = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":208
 *                 self.logger.propagate = False
 *                 formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)
 *                 handler = logging.StreamHandler()             # <<<<<<<<<<<<<<
 *                 handler.setFormatter(formatter)
 *                 self.logger.addHandler(handler)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_logging, __pyx_n_s_StreamHandler); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_handler = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":209
 *                 formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)
 *                 handler = logging.StreamHandler()
 *                 handler.setFormatter(formatter)             # <<<<<<<<<<<<<<
 *                 self.logger.addHandler(handler)
 *                 if log_level:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_handler, __pyx_n_s_setFormatter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_formatter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":210
 *                 handler = logging.StreamHandler()
 *                 handler.setFormatter(formatter)
 *                 self.logger.addHandler(handler)             # <<<<<<<<<<<<<<
 *                 if log_level:
 *                     self.logger.setLevel(log_level)
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->logger, __pyx_n_s_addHandler); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_handler); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":211
 *                 handler.setFormatter(formatter)
 *                 self.logger.addHandler(handler)
 *                 if log_level:             # <<<<<<<<<<<<<<
 *                     self.logger.setLevel(log_level)
 *             self._thr_failed = Thread(target=self._failed_thread, args=(failed_callback, ),
 */
      __pyx_t_2 = (__pyx_v_log_level != 0);
      if (__pyx_t_2) {

        /* "fastthreadpool/fastthreadpool.pyx":212
 *                 self.logger.addHandler(handler)
 *                 if log_level:
 *                     self.logger.setLevel(log_level)             # <<<<<<<<<<<<<<
 *             self._thr_failed = Thread(target=self._failed_thread, args=(failed_callback, ),
 *                                       name="ThreadPoolFailed")
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->logger, __pyx_n_s_setLevel); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_log_level); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 212, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 212, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":211
 *                 handler.setFormatter(formatter)
 *                 self.logger.addHandler(handler)
 *                 if log_level:             # <<<<<<<<<<<<<<
 *                     self.logger.setLevel(log_level)
 *             self._thr_failed = Thread(target=self._failed_thread, args=(failed_callback, ),
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":203
 *             self._thr_done = None
 *         if failed_callback or log_level:
 *             if log_level:             # <<<<<<<<<<<<<<
 *                 import logging
 *                 self.logger = logging.getLogger(LOGGER_NAME)
 */
    }

    /* "fastthreadpool/fastthreadpool.pyx":213
 *                 if log_level:
 *                     self.logger.setLevel(log_level)
 *             self._thr_failed = Thread(target=self._failed_thread, args=(failed_callback, ),             # <<<<<<<<<<<<<<
 *                                       name="ThreadPoolFailed")
 *             self._thr_failed.daemon = True
 */
    __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_failed_thread); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_target, __pyx_t_5) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_failed_callback);
    __Pyx_GIVEREF(__pyx_v_failed_callback);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_failed_callback);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_args, __pyx_t_5) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_name, __pyx_n_u_ThreadPoolFailed) < 0) __PYX_ERR(0, 213, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Thread, __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_thr_failed);
    __Pyx_DECREF(__pyx_v_self->_thr_failed);
    __pyx_v_self->_thr_failed = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":215
 *             self._thr_failed = Thread(target=self._failed_thread, args=(failed_callback, ),
 *                                       name="ThreadPoolFailed")
 *             self._thr_failed.daemon = True             # <<<<<<<<<<<<<<
 *             self._thr_failed.start()
 *         else:
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_self->_thr_failed, __pyx_n_s_daemon, Py_True) < 0) __PYX_ERR(0, 215, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":216
 *                                       name="ThreadPoolFailed")
 *             self._thr_failed.daemon = True
 *             self._thr_failed.start()             # <<<<<<<<<<<<<<
 *         else:
 *             self._thr_failed = None
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_thr_failed, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":202
 *         else:
 *             self._thr_done = None
 *         if failed_callback or log_level:             # <<<<<<<<<<<<<<
 *             if log_level:
 *                 import logging
 */
    goto __pyx_L6;
  }

  /* "fastthreadpool/fastthreadpool.pyx":218
 *             self._thr_failed.start()
 *         else:
 *             self._thr_failed = None             # <<<<<<<<<<<<<<
 *         _pools.add(self)
 * 
 */
  /*else*/ {
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->_thr_failed);
    __Pyx_DECREF(__pyx_v_self->_thr_failed);
    __pyx_v_self->_thr_failed = Py_None;
  }
  __pyx_L6:;

  /* "fastthreadpool/fastthreadpool.pyx":219
 *         else:
 *             self._thr_failed = None
 *         _pools.add(self)             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
  if (unlikely(__pyx_v_14fastthreadpool_14fastthreadpool__pools == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
    __PYX_ERR(0, 219, __pyx_L1_error)
  }
  __pyx_t_7 = PySet_Add(__pyx_v_14fastthreadpool_14fastthreadpool__pools, ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 219, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":162
 *     cdef object _thr_done, _thr_failed
 * 
 *     def __cinit__(self, int max_children=-9999, str child_name_prefix="", init_callback=None,             # <<<<<<<<<<<<<<
 *                   done_callback=None, failed_callback=None, int log_level=0, bint result_id=False):
 *     #p def __init__(self, max_children=-9999, child_name_prefix="", init_callback=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_logging);
  __Pyx_XDECREF(__pyx_v_formatter);
  __Pyx_XDECREF(__pyx_v_handler);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":221
 *         _pools.add(self)
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         pythread.PyThread_free_lock(self._busy_lock)
 *         if _pools:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_3__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_3__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_2__del__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_2__del__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":222
 * 
 *     def __del__(self):
 *         pythread.PyThread_free_lock(self._busy_lock)             # <<<<<<<<<<<<<<
 *         if _pools:
 *             _pools.remove(self)
 */
  PyThread_free_lock(__pyx_v_self->_busy_lock);

  /* "fastthreadpool/fastthreadpool.pyx":223
 *     def __del__(self):
 *         pythread.PyThread_free_lock(self._busy_lock)
 *         if _pools:             # <<<<<<<<<<<<<<
 *             _pools.remove(self)
 * 
 */
  __pyx_t_1 = (__pyx_v_14fastthreadpool_14fastthreadpool__pools != Py_None)&&(PySet_GET_SIZE(__pyx_v_14fastthreadpool_14fastthreadpool__pools) != 0);
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":224
 *         pythread.PyThread_free_lock(self._busy_lock)
 *         if _pools:
 *             _pools.remove(self)             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(self):
 */
    if (unlikely(__pyx_v_14fastthreadpool_14fastthreadpool__pools == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "remove");
      __PYX_ERR(0, 224, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PySet_Remove(__pyx_v_14fastthreadpool_14fastthreadpool__pools, ((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 224, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":223
 *     def __del__(self):
 *         pythread.PyThread_free_lock(self._busy_lock)
 *         if _pools:             # <<<<<<<<<<<<<<
 *             _pools.remove(self)
 * 
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":221
 *         _pools.add(self)
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         pythread.PyThread_free_lock(self._busy_lock)
 *         if _pools:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":226
 *             _pools.remove(self)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_5__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_5__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4__enter__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4__enter__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":227
 * 
 *     def __enter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":226
 *             _pools.remove(self)
 * 
 *     def __enter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":229
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.shutdown()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_type = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_type,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); __PYX_ERR(0, 229, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); __PYX_ERR(0, 229, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) __PYX_ERR(0, 229, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_type = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 229, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_6__exit__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_exc_type, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_6__exit__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_type, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__exit__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":230
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):
 *         self.shutdown()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _busy_lock_inc(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shutdown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":229
 *         return self
 * 
 *     def __exit__(self, exc_type, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         self.shutdown()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":232
 *         self.shutdown()
 * 
 *     cdef void _busy_lock_inc(self):             # <<<<<<<<<<<<<<
 *     #p def _busy_lock_inc(self):
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)
 */

static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__busy_lock_inc(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_busy_lock_inc", 0);

  /* "fastthreadpool/fastthreadpool.pyx":234
 *     cdef void _busy_lock_inc(self):
 *     #p def _busy_lock_inc(self):
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)             # <<<<<<<<<<<<<<
 *         #p self._busy_lock.acquire()
 *         self._busy_cnt += 1
 */
  (void)(PyThread_acquire_lock(__pyx_v_self->_busy_lock, 1));

  /* "fastthreadpool/fastthreadpool.pyx":236
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)
 *         #p self._busy_lock.acquire()
 *         self._busy_cnt += 1             # <<<<<<<<<<<<<<
 *         pythread.PyThread_release_lock(self._busy_lock)
 *         #p self._busy_lock.release()
 */
  __pyx_v_self->_busy_cnt = (__pyx_v_self->_busy_cnt + 1);

  /* "fastthreadpool/fastthreadpool.pyx":237
 *         #p self._busy_lock.acquire()
 *         self._busy_cnt += 1
 *         pythread.PyThread_release_lock(self._busy_lock)             # <<<<<<<<<<<<<<
 *         #p self._busy_lock.release()
 * 
 */
  PyThread_release_lock(__pyx_v_self->_busy_lock);

  /* "fastthreadpool/fastthreadpool.pyx":232
 *         self.shutdown()
 * 
 *     cdef void _busy_lock_inc(self):             # <<<<<<<<<<<<<<
 *     #p def _busy_lock_inc(self):
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fastthreadpool/fastthreadpool.pyx":240
 *         #p self._busy_lock.release()
 * 
 *     cdef void _busy_lock_dec(self):             # <<<<<<<<<<<<<<
 *     #p def _busy_lock_dec(self):
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)
 */

static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__busy_lock_dec(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_busy_lock_dec", 0);

  /* "fastthreadpool/fastthreadpool.pyx":242
 *     cdef void _busy_lock_dec(self):
 *     #p def _busy_lock_dec(self):
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)             # <<<<<<<<<<<<<<
 *         #p self._busy_lock.acquire()
 *         self._busy_cnt -= 1
 */
  (void)(PyThread_acquire_lock(__pyx_v_self->_busy_lock, 1));

  /* "fastthreadpool/fastthreadpool.pyx":244
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)
 *         #p self._busy_lock.acquire()
 *         self._busy_cnt -= 1             # <<<<<<<<<<<<<<
 *         pythread.PyThread_release_lock(self._busy_lock)
 *         #p self._busy_lock.release()
 */
  __pyx_v_self->_busy_cnt = (__pyx_v_self->_busy_cnt - 1);

  /* "fastthreadpool/fastthreadpool.pyx":245
 *         #p self._busy_lock.acquire()
 *         self._busy_cnt -= 1
 *         pythread.PyThread_release_lock(self._busy_lock)             # <<<<<<<<<<<<<<
 *         #p self._busy_lock.release()
 * 
 */
  PyThread_release_lock(__pyx_v_self->_busy_lock);

  /* "fastthreadpool/fastthreadpool.pyx":240
 *         #p self._busy_lock.release()
 * 
 *     cdef void _busy_lock_dec(self):             # <<<<<<<<<<<<<<
 *     #p def _busy_lock_dec(self):
 *         pythread.PyThread_acquire_lock(self._busy_lock, 1)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "fastthreadpool/fastthreadpool.pyx":248
 *         #p self._busy_lock.release()
 * 
 *     def _done_thread(self, done_callback):             # <<<<<<<<<<<<<<
 *         done_popleft = self._done.popleft
 *         while True:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_9_done_thread(PyObject *__pyx_v_self, PyObject *__pyx_v_done_callback); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_9_done_thread(PyObject *__pyx_v_self, PyObject *__pyx_v_done_callback) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_done_thread (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_8_done_thread(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), ((PyObject *)__pyx_v_done_callback));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_8_done_thread(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_done_callback) {
  PyObject *__pyx_v_done_popleft = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("_done_thread", 0);

  /* "fastthreadpool/fastthreadpool.pyx":249
 * 
 *     def _done_thread(self, done_callback):
 *         done_popleft = self._done.popleft             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_done, __pyx_n_s_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_done_popleft = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":250
 *     def _done_thread(self, done_callback):
 *         done_popleft = self._done.popleft
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 while True:
 */
  while (1) {

    /* "fastthreadpool/fastthreadpool.pyx":251
 *         done_popleft = self._done.popleft
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     done_callback(done_popleft())
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":252
 *         while True:
 *             try:
 *                 while True:             # <<<<<<<<<<<<<<
 *                     done_callback(done_popleft())
 *             except:
 */
        while (1) {

          /* "fastthreadpool/fastthreadpool.pyx":253
 *             try:
 *                 while True:
 *                     done_callback(done_popleft())             # <<<<<<<<<<<<<<
 *             except:
 *                 if self._shutdown:
 */
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_done_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_v_done_callback, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }

        /* "fastthreadpool/fastthreadpool.pyx":251
 *         done_popleft = self._done.popleft
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     done_callback(done_popleft())
 */
      }
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":254
 *                 while True:
 *                     done_callback(done_popleft())
 *             except:             # <<<<<<<<<<<<<<
 *                 if self._shutdown:
 *                     break
 */
      /*except:*/ {
        __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._done_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_6) < 0) __PYX_ERR(0, 254, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_6);

        /* "fastthreadpool/fastthreadpool.pyx":255
 *                     done_callback(done_popleft())
 *             except:
 *                 if self._shutdown:             # <<<<<<<<<<<<<<
 *                     break
 *                 self._done_cnt.acquire()
 */
        __pyx_t_7 = (__pyx_v_self->_shutdown != 0);
        if (__pyx_t_7) {

          /* "fastthreadpool/fastthreadpool.pyx":256
 *             except:
 *                 if self._shutdown:
 *                     break             # <<<<<<<<<<<<<<
 *                 self._done_cnt.acquire()
 * 
 */
          goto __pyx_L15_except_break;

          /* "fastthreadpool/fastthreadpool.pyx":255
 *                     done_callback(done_popleft())
 *             except:
 *                 if self._shutdown:             # <<<<<<<<<<<<<<
 *                     break
 *                 self._done_cnt.acquire()
 */
        }

        /* "fastthreadpool/fastthreadpool.pyx":257
 *                 if self._shutdown:
 *                     break
 *                 self._done_cnt.acquire()             # <<<<<<<<<<<<<<
 * 
 *     def _failed_thread(self, failed_callback):
 */
        (void)(((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_done_cnt->__pyx_vtab)->acquire(__pyx_v_self->_done_cnt, 0, NULL));
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_exception_handled;
        __pyx_L15_except_break:;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L10_try_break;
      }
      __pyx_L7_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":251
 *         done_popleft = self._done.popleft
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     done_callback(done_popleft())
 */
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L10_try_break:;
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L4_break;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      __pyx_L12_try_end:;
    }
  }
  __pyx_L4_break:;

  /* "fastthreadpool/fastthreadpool.pyx":248
 *         #p self._busy_lock.release()
 * 
 *     def _done_thread(self, done_callback):             # <<<<<<<<<<<<<<
 *         done_popleft = self._done.popleft
 *         while True:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._done_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_done_popleft);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":259
 *                 self._done_cnt.acquire()
 * 
 *     def _failed_thread(self, failed_callback):             # <<<<<<<<<<<<<<
 *         failed_popleft = self._failed.popleft
 *         logger_exception = None if self.logger is None else self.logger.exception
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_11_failed_thread(PyObject *__pyx_v_self, PyObject *__pyx_v_failed_callback); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_11_failed_thread(PyObject *__pyx_v_self, PyObject *__pyx_v_failed_callback) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_failed_thread (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_10_failed_thread(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), ((PyObject *)__pyx_v_failed_callback));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_10_failed_thread(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_failed_callback) {
  PyObject *__pyx_v_failed_popleft = NULL;
  PyObject *__pyx_v_logger_exception = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("_failed_thread", 0);

  /* "fastthreadpool/fastthreadpool.pyx":260
 * 
 *     def _failed_thread(self, failed_callback):
 *         failed_popleft = self._failed.popleft             # <<<<<<<<<<<<<<
 *         logger_exception = None if self.logger is None else self.logger.exception
 *         while True:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_failed, __pyx_n_s_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_failed_popleft = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":261
 *     def _failed_thread(self, failed_callback):
 *         failed_popleft = self._failed.popleft
 *         logger_exception = None if self.logger is None else self.logger.exception             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_t_2 = (__pyx_v_self->logger == Py_None);
  if ((__pyx_t_2 != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  } else {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->logger, __pyx_n_s_exception); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_logger_exception = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":262
 *         failed_popleft = self._failed.popleft
 *         logger_exception = None if self.logger is None else self.logger.exception
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 if failed_callback is None:
 */
  while (1) {

    /* "fastthreadpool/fastthreadpool.pyx":263
 *         logger_exception = None if self.logger is None else self.logger.exception
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 if failed_callback is None:
 *                     if logger_exception is None:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":264
 *         while True:
 *             try:
 *                 if failed_callback is None:             # <<<<<<<<<<<<<<
 *                     if logger_exception is None:
 *                         while True:
 */
        __pyx_t_2 = (__pyx_v_failed_callback == Py_None);
        __pyx_t_7 = (__pyx_t_2 != 0);
        if (__pyx_t_7) {

          /* "fastthreadpool/fastthreadpool.pyx":265
 *             try:
 *                 if failed_callback is None:
 *                     if logger_exception is None:             # <<<<<<<<<<<<<<
 *                         while True:
 *                             failed_popleft()
 */
          __pyx_t_7 = (__pyx_v_logger_exception == Py_None);
          __pyx_t_2 = (__pyx_t_7 != 0);
          if (__pyx_t_2) {

            /* "fastthreadpool/fastthreadpool.pyx":266
 *                 if failed_callback is None:
 *                     if logger_exception is None:
 *                         while True:             # <<<<<<<<<<<<<<
 *                             failed_popleft()
 *                     else:
 */
            while (1) {

              /* "fastthreadpool/fastthreadpool.pyx":267
 *                     if logger_exception is None:
 *                         while True:
 *                             failed_popleft()             # <<<<<<<<<<<<<<
 *                     else:
 *                         while True:
 */
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_failed_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }

            /* "fastthreadpool/fastthreadpool.pyx":265
 *             try:
 *                 if failed_callback is None:
 *                     if logger_exception is None:             # <<<<<<<<<<<<<<
 *                         while True:
 *                             failed_popleft()
 */
            goto __pyx_L14;
          }

          /* "fastthreadpool/fastthreadpool.pyx":269
 *                             failed_popleft()
 *                     else:
 *                         while True:             # <<<<<<<<<<<<<<
 *                             logger_exception(failed_popleft()[1])
 *                 else:
 */
          /*else*/ {
            while (1) {

              /* "fastthreadpool/fastthreadpool.pyx":270
 *                     else:
 *                         while True:
 *                             logger_exception(failed_popleft()[1])             # <<<<<<<<<<<<<<
 *                 else:
 *                     while True:
 */
              __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_failed_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_v_logger_exception, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
          }
          __pyx_L14:;

          /* "fastthreadpool/fastthreadpool.pyx":264
 *         while True:
 *             try:
 *                 if failed_callback is None:             # <<<<<<<<<<<<<<
 *                     if logger_exception is None:
 *                         while True:
 */
          goto __pyx_L13;
        }

        /* "fastthreadpool/fastthreadpool.pyx":272
 *                             logger_exception(failed_popleft()[1])
 *                 else:
 *                     while True:             # <<<<<<<<<<<<<<
 *                         failed_callback(failed_popleft()[1])
 *             except:
 */
        /*else*/ {
          while (1) {

            /* "fastthreadpool/fastthreadpool.pyx":273
 *                 else:
 *                     while True:
 *                         failed_callback(failed_popleft()[1])             # <<<<<<<<<<<<<<
 *             except:
 *                 if self._shutdown:
 */
            __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_failed_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 273, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_v_failed_callback, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
        }
        __pyx_L13:;

        /* "fastthreadpool/fastthreadpool.pyx":263
 *         logger_exception = None if self.logger is None else self.logger.exception
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 if failed_callback is None:
 *                     if logger_exception is None:
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":274
 *                     while True:
 *                         failed_callback(failed_popleft()[1])
 *             except:             # <<<<<<<<<<<<<<
 *                 if self._shutdown:
 *                     break
 */
      /*except:*/ {
        __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._failed_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_8) < 0) __PYX_ERR(0, 274, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_8);

        /* "fastthreadpool/fastthreadpool.pyx":275
 *                         failed_callback(failed_popleft()[1])
 *             except:
 *                 if self._shutdown:             # <<<<<<<<<<<<<<
 *                     break
 *                 self._failed_cnt.acquire()
 */
        __pyx_t_2 = (__pyx_v_self->_shutdown != 0);
        if (__pyx_t_2) {

          /* "fastthreadpool/fastthreadpool.pyx":276
 *             except:
 *                 if self._shutdown:
 *                     break             # <<<<<<<<<<<<<<
 *                 self._failed_cnt.acquire()
 * 
 */
          goto __pyx_L21_except_break;

          /* "fastthreadpool/fastthreadpool.pyx":275
 *                         failed_callback(failed_popleft()[1])
 *             except:
 *                 if self._shutdown:             # <<<<<<<<<<<<<<
 *                     break
 *                 self._failed_cnt.acquire()
 */
        }

        /* "fastthreadpool/fastthreadpool.pyx":277
 *                 if self._shutdown:
 *                     break
 *                 self._failed_cnt.acquire()             # <<<<<<<<<<<<<<
 * 
 *     def _child(self, num):
 */
        (void)(((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->acquire(__pyx_v_self->_failed_cnt, 0, NULL));
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L6_exception_handled;
        __pyx_L21_except_break:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_try_break;
      }
      __pyx_L7_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":263
 *         logger_exception = None if self.logger is None else self.logger.exception
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 if failed_callback is None:
 *                     if logger_exception is None:
 */
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L10_try_break:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L4_break;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_L12_try_end:;
    }
  }
  __pyx_L4_break:;

  /* "fastthreadpool/fastthreadpool.pyx":259
 *                 self._done_cnt.acquire()
 * 
 *     def _failed_thread(self, failed_callback):             # <<<<<<<<<<<<<<
 *         failed_popleft = self._failed.popleft
 *         logger_exception = None if self.logger is None else self.logger.exception
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._failed_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_failed_popleft);
  __Pyx_XDECREF(__pyx_v_logger_exception);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":279
 *                 self._failed_cnt.acquire()
 * 
 *     def _child(self, num):             # <<<<<<<<<<<<<<
 *         cdef bint run_child, pop_failed
 *         self._busy_lock_inc()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_13_child(PyObject *__pyx_v_self, PyObject *__pyx_v_num); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_13_child(PyObject *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_child (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_12_child(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), ((PyObject *)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_12_child(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_num) {
  int __pyx_v_run_child;
  int __pyx_v_pop_failed;
  int __pyx_v_child_busy;
  PyObject *__pyx_v__done_append = NULL;
  PyObject *__pyx_v_failed_append = NULL;
  PyObject *__pyx_v_jobs_popleft = NULL;
  PyObject *__pyx_v_job = NULL;
  PyObject *__pyx_v_fn = NULL;
  PyObject *__pyx_v_done_callback = NULL;
  PyObject *__pyx_v_args = NULL;
  PyObject *__pyx_v_kwargs = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_jobid = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_exc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  __Pyx_RefNannySetupContext("_child", 0);

  /* "fastthreadpool/fastthreadpool.pyx":281
 *     def _child(self, num):
 *         cdef bint run_child, pop_failed
 *         self._busy_lock_inc()             # <<<<<<<<<<<<<<
 *         child_busy = True
 *         _done_append = self._done.append
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_inc(__pyx_v_self);

  /* "fastthreadpool/fastthreadpool.pyx":282
 *         cdef bint run_child, pop_failed
 *         self._busy_lock_inc()
 *         child_busy = True             # <<<<<<<<<<<<<<
 *         _done_append = self._done.append
 *         failed_append = self._failed.append
 */
  __pyx_v_child_busy = 1;

  /* "fastthreadpool/fastthreadpool.pyx":283
 *         self._busy_lock_inc()
 *         child_busy = True
 *         _done_append = self._done.append             # <<<<<<<<<<<<<<
 *         failed_append = self._failed.append
 *         jobs_popleft = self._jobs.popleft
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_done, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__done_append = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":284
 *         child_busy = True
 *         _done_append = self._done.append
 *         failed_append = self._failed.append             # <<<<<<<<<<<<<<
 *         jobs_popleft = self._jobs.popleft
 *         run_child = True
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_failed, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_failed_append = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":285
 *         _done_append = self._done.append
 *         failed_append = self._failed.append
 *         jobs_popleft = self._jobs.popleft             # <<<<<<<<<<<<<<
 *         run_child = True
 *         pop_failed = False
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_jobs_popleft = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":286
 *         failed_append = self._failed.append
 *         jobs_popleft = self._jobs.popleft
 *         run_child = True             # <<<<<<<<<<<<<<
 *         pop_failed = False
 *         while run_child:
 */
  __pyx_v_run_child = 1;

  /* "fastthreadpool/fastthreadpool.pyx":287
 *         jobs_popleft = self._jobs.popleft
 *         run_child = True
 *         pop_failed = False             # <<<<<<<<<<<<<<
 *         while run_child:
 *             try:
 */
  __pyx_v_pop_failed = 0;

  /* "fastthreadpool/fastthreadpool.pyx":288
 *         run_child = True
 *         pop_failed = False
 *         while run_child:             # <<<<<<<<<<<<<<
 *             try:
 *                 while True:
 */
  while (1) {
    __pyx_t_2 = (__pyx_v_run_child != 0);
    if (!__pyx_t_2) break;

    /* "fastthreadpool/fastthreadpool.pyx":289
 *         pop_failed = False
 *         while run_child:
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if not child_busy:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":290
 *         while run_child:
 *             try:
 *                 while True:             # <<<<<<<<<<<<<<
 *                     if not child_busy:
 *                         self._busy_lock_inc()
 */
        while (1) {

          /* "fastthreadpool/fastthreadpool.pyx":291
 *             try:
 *                 while True:
 *                     if not child_busy:             # <<<<<<<<<<<<<<
 *                         self._busy_lock_inc()
 *                         child_busy = True
 */
          __pyx_t_2 = ((!(__pyx_v_child_busy != 0)) != 0);
          if (__pyx_t_2) {

            /* "fastthreadpool/fastthreadpool.pyx":292
 *                 while True:
 *                     if not child_busy:
 *                         self._busy_lock_inc()             # <<<<<<<<<<<<<<
 *                         child_busy = True
 *                     pop_failed = True
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_inc(__pyx_v_self);

            /* "fastthreadpool/fastthreadpool.pyx":293
 *                     if not child_busy:
 *                         self._busy_lock_inc()
 *                         child_busy = True             # <<<<<<<<<<<<<<
 *                     pop_failed = True
 *                     job = jobs_popleft()
 */
            __pyx_v_child_busy = 1;

            /* "fastthreadpool/fastthreadpool.pyx":291
 *             try:
 *                 while True:
 *                     if not child_busy:             # <<<<<<<<<<<<<<
 *                         self._busy_lock_inc()
 *                         child_busy = True
 */
          }

          /* "fastthreadpool/fastthreadpool.pyx":294
 *                         self._busy_lock_inc()
 *                         child_busy = True
 *                     pop_failed = True             # <<<<<<<<<<<<<<
 *                     job = jobs_popleft()
 *                     pop_failed = False
 */
          __pyx_v_pop_failed = 1;

          /* "fastthreadpool/fastthreadpool.pyx":295
 *                         child_busy = True
 *                     pop_failed = True
 *                     job = jobs_popleft()             # <<<<<<<<<<<<<<
 *                     pop_failed = False
 *                     if job is None or self._shutdown_children:
 */
          __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_jobs_popleft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_v_job, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":296
 *                     pop_failed = True
 *                     job = jobs_popleft()
 *                     pop_failed = False             # <<<<<<<<<<<<<<
 *                     if job is None or self._shutdown_children:
 *                         self._job_cnt.release()
 */
          __pyx_v_pop_failed = 0;

          /* "fastthreadpool/fastthreadpool.pyx":297
 *                     job = jobs_popleft()
 *                     pop_failed = False
 *                     if job is None or self._shutdown_children:             # <<<<<<<<<<<<<<
 *                         self._job_cnt.release()
 *                         run_child = False
 */
          __pyx_t_6 = (__pyx_v_job == Py_None);
          __pyx_t_7 = (__pyx_t_6 != 0);
          if (!__pyx_t_7) {
          } else {
            __pyx_t_2 = __pyx_t_7;
            goto __pyx_L17_bool_binop_done;
          }
          __pyx_t_7 = (__pyx_v_self->_shutdown_children != 0);
          __pyx_t_2 = __pyx_t_7;
          __pyx_L17_bool_binop_done:;
          if (__pyx_t_2) {

            /* "fastthreadpool/fastthreadpool.pyx":298
 *                     pop_failed = False
 *                     if job is None or self._shutdown_children:
 *                         self._job_cnt.release()             # <<<<<<<<<<<<<<
 *                         run_child = False
 *                         break
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_job_cnt->__pyx_vtab)->release(__pyx_v_self->_job_cnt, 0);

            /* "fastthreadpool/fastthreadpool.pyx":299
 *                     if job is None or self._shutdown_children:
 *                         self._job_cnt.release()
 *                         run_child = False             # <<<<<<<<<<<<<<
 *                         break
 *                     fn, done_callback, args, kwargs = job
 */
            __pyx_v_run_child = 0;

            /* "fastthreadpool/fastthreadpool.pyx":300
 *                         self._job_cnt.release()
 *                         run_child = False
 *                         break             # <<<<<<<<<<<<<<
 *                     fn, done_callback, args, kwargs = job
 *                     if done_callback is False:
 */
            goto __pyx_L14_break;

            /* "fastthreadpool/fastthreadpool.pyx":297
 *                     job = jobs_popleft()
 *                     pop_failed = False
 *                     if job is None or self._shutdown_children:             # <<<<<<<<<<<<<<
 *                         self._job_cnt.release()
 *                         run_child = False
 */
          }

          /* "fastthreadpool/fastthreadpool.pyx":301
 *                         run_child = False
 *                         break
 *                     fn, done_callback, args, kwargs = job             # <<<<<<<<<<<<<<
 *                     if done_callback is False:
 *                         if isgeneratorfunction(fn):
 */
          if ((likely(PyTuple_CheckExact(__pyx_v_job))) || (PyList_CheckExact(__pyx_v_job))) {
            PyObject* sequence = __pyx_v_job;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 4)) {
              if (size > 4) __Pyx_RaiseTooManyValuesError(4);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 301, __pyx_L5_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
              __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
            } else {
              __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
              __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
            }
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            #else
            {
              Py_ssize_t i;
              PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
              for (i=0; i < 4; i++) {
                PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 301, __pyx_L5_error)
                __Pyx_GOTREF(item);
                *(temps[i]) = item;
              }
            }
            #endif
          } else {
            Py_ssize_t index = -1;
            PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
            __pyx_t_11 = PyObject_GetIter(__pyx_v_job); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 301, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_12 = Py_TYPE(__pyx_t_11)->tp_iternext;
            for (index=0; index < 4; index++) {
              PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L19_unpacking_failed;
              __Pyx_GOTREF(item);
              *(temps[index]) = item;
            }
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 301, __pyx_L5_error)
            __pyx_t_12 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L20_unpacking_done;
            __pyx_L19_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 301, __pyx_L5_error)
            __pyx_L20_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_fn, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_XDECREF_SET(__pyx_v_done_callback, __pyx_t_8);
          __pyx_t_8 = 0;
          __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_kwargs, __pyx_t_10);
          __pyx_t_10 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":302
 *                         break
 *                     fn, done_callback, args, kwargs = job
 *                     if done_callback is False:             # <<<<<<<<<<<<<<
 *                         if isgeneratorfunction(fn):
 *                             for _ in fn(*args, **kwargs):
 */
          __pyx_t_2 = (__pyx_v_done_callback == Py_False);
          __pyx_t_7 = (__pyx_t_2 != 0);
          if (__pyx_t_7) {

            /* "fastthreadpool/fastthreadpool.pyx":303
 *                     fn, done_callback, args, kwargs = job
 *                     if done_callback is False:
 *                         if isgeneratorfunction(fn):             # <<<<<<<<<<<<<<
 *                             for _ in fn(*args, **kwargs):
 *                                 pass
 */
            __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction, __pyx_v_fn); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 303, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 303, __pyx_L5_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_7) {

              /* "fastthreadpool/fastthreadpool.pyx":304
 *                     if done_callback is False:
 *                         if isgeneratorfunction(fn):
 *                             for _ in fn(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                                 pass
 *                         else:
 */
              __pyx_t_10 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 304, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_10);
              if (unlikely(__pyx_v_kwargs == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                __PYX_ERR(0, 304, __pyx_L5_error)
              }
              if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                __pyx_t_9 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 304, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_9);
              } else {
                __pyx_t_9 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 304, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_9);
              }
              __pyx_t_8 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
                __pyx_t_9 = __pyx_t_8; __Pyx_INCREF(__pyx_t_9); __pyx_t_13 = 0;
                __pyx_t_14 = NULL;
              } else {
                __pyx_t_13 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 304, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 304, __pyx_L5_error)
              }
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              for (;;) {
                if (likely(!__pyx_t_14)) {
                  if (likely(PyList_CheckExact(__pyx_t_9))) {
                    if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_9)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_8 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 304, __pyx_L5_error)
                    #else
                    __pyx_t_8 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    #endif
                  } else {
                    if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_8); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 304, __pyx_L5_error)
                    #else
                    __pyx_t_8 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 304, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_8);
                    #endif
                  }
                } else {
                  __pyx_t_8 = __pyx_t_14(__pyx_t_9);
                  if (unlikely(!__pyx_t_8)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 304, __pyx_L5_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_8);
                }
                __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_8);
                __pyx_t_8 = 0;
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

              /* "fastthreadpool/fastthreadpool.pyx":303
 *                     fn, done_callback, args, kwargs = job
 *                     if done_callback is False:
 *                         if isgeneratorfunction(fn):             # <<<<<<<<<<<<<<
 *                             for _ in fn(*args, **kwargs):
 *                                 pass
 */
              goto __pyx_L22;
            }

            /* "fastthreadpool/fastthreadpool.pyx":307
 *                                 pass
 *                         else:
 *                             fn(*args, **kwargs)             # <<<<<<<<<<<<<<
 *                     elif done_callback is True:
 *                         if isgeneratorfunction(fn):
 */
            /*else*/ {
              __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 307, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_9);
              if (unlikely(__pyx_v_kwargs == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                __PYX_ERR(0, 307, __pyx_L5_error)
              }
              if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                __pyx_t_8 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
              } else {
                __pyx_t_8 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
              }
              __pyx_t_10 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 307, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }
            __pyx_L22:;

            /* "fastthreadpool/fastthreadpool.pyx":302
 *                         break
 *                     fn, done_callback, args, kwargs = job
 *                     if done_callback is False:             # <<<<<<<<<<<<<<
 *                         if isgeneratorfunction(fn):
 *                             for _ in fn(*args, **kwargs):
 */
            goto __pyx_L21;
          }

          /* "fastthreadpool/fastthreadpool.pyx":308
 *                         else:
 *                             fn(*args, **kwargs)
 *                     elif done_callback is True:             # <<<<<<<<<<<<<<
 *                         if isgeneratorfunction(fn):
 *                             jobid = id(job)
 */
          __pyx_t_7 = (__pyx_v_done_callback == Py_True);
          __pyx_t_2 = (__pyx_t_7 != 0);
          if (__pyx_t_2) {

            /* "fastthreadpool/fastthreadpool.pyx":309
 *                             fn(*args, **kwargs)
 *                     elif done_callback is True:
 *                         if isgeneratorfunction(fn):             # <<<<<<<<<<<<<<
 *                             jobid = id(job)
 *                             for result in fn(*args, **kwargs):
 */
            __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction, __pyx_v_fn); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 309, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 309, __pyx_L5_error)
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (__pyx_t_2) {

              /* "fastthreadpool/fastthreadpool.pyx":310
 *                     elif done_callback is True:
 *                         if isgeneratorfunction(fn):
 *                             jobid = id(job)             # <<<<<<<<<<<<<<
 *                             for result in fn(*args, **kwargs):
 *                                 if self.result_id:
 */
              __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_job); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 310, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_XDECREF_SET(__pyx_v_jobid, __pyx_t_10);
              __pyx_t_10 = 0;

              /* "fastthreadpool/fastthreadpool.pyx":311
 *                         if isgeneratorfunction(fn):
 *                             jobid = id(job)
 *                             for result in fn(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                                 if self.result_id:
 *                                     _done_append((jobid, result))
 */
              __pyx_t_10 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 311, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_10);
              if (unlikely(__pyx_v_kwargs == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                __PYX_ERR(0, 311, __pyx_L5_error)
              }
              if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                __pyx_t_8 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
              } else {
                __pyx_t_8 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
              }
              __pyx_t_9 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
                __pyx_t_8 = __pyx_t_9; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
                __pyx_t_14 = NULL;
              } else {
                __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 311, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 311, __pyx_L5_error)
              }
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              for (;;) {
                if (likely(!__pyx_t_14)) {
                  if (likely(PyList_CheckExact(__pyx_t_8))) {
                    if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_9); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 311, __pyx_L5_error)
                    #else
                    __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    #endif
                  } else {
                    if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_9); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 311, __pyx_L5_error)
                    #else
                    __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 311, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    #endif
                  }
                } else {
                  __pyx_t_9 = __pyx_t_14(__pyx_t_8);
                  if (unlikely(!__pyx_t_9)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 311, __pyx_L5_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_9);
                }
                __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_9);
                __pyx_t_9 = 0;

                /* "fastthreadpool/fastthreadpool.pyx":312
 *                             jobid = id(job)
 *                             for result in fn(*args, **kwargs):
 *                                 if self.result_id:             # <<<<<<<<<<<<<<
 *                                     _done_append((jobid, result))
 *                                 else:
 */
                __pyx_t_2 = (__pyx_v_self->result_id != 0);
                if (__pyx_t_2) {

                  /* "fastthreadpool/fastthreadpool.pyx":313
 *                             for result in fn(*args, **kwargs):
 *                                 if self.result_id:
 *                                     _done_append((jobid, result))             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     _done_append(result)
 */
                  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 313, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  __Pyx_INCREF(__pyx_v_jobid);
                  __Pyx_GIVEREF(__pyx_v_jobid);
                  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_jobid);
                  __Pyx_INCREF(__pyx_v_result);
                  __Pyx_GIVEREF(__pyx_v_result);
                  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_result);
                  __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v__done_append, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 313, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

                  /* "fastthreadpool/fastthreadpool.pyx":312
 *                             jobid = id(job)
 *                             for result in fn(*args, **kwargs):
 *                                 if self.result_id:             # <<<<<<<<<<<<<<
 *                                     _done_append((jobid, result))
 *                                 else:
 */
                  goto __pyx_L28;
                }

                /* "fastthreadpool/fastthreadpool.pyx":315
 *                                     _done_append((jobid, result))
 *                                 else:
 *                                     _done_append(result)             # <<<<<<<<<<<<<<
 *                                 self._done_cnt.release()
 *                         else:
 */
                /*else*/ {
                  __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v__done_append, __pyx_v_result); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 315, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                }
                __pyx_L28:;

                /* "fastthreadpool/fastthreadpool.pyx":316
 *                                 else:
 *                                     _done_append(result)
 *                                 self._done_cnt.release()             # <<<<<<<<<<<<<<
 *                         else:
 *                             if self.result_id:
 */
                ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_done_cnt->__pyx_vtab)->release(__pyx_v_self->_done_cnt, 0);

                /* "fastthreadpool/fastthreadpool.pyx":311
 *                         if isgeneratorfunction(fn):
 *                             jobid = id(job)
 *                             for result in fn(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                                 if self.result_id:
 *                                     _done_append((jobid, result))
 */
              }
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "fastthreadpool/fastthreadpool.pyx":309
 *                             fn(*args, **kwargs)
 *                     elif done_callback is True:
 *                         if isgeneratorfunction(fn):             # <<<<<<<<<<<<<<
 *                             jobid = id(job)
 *                             for result in fn(*args, **kwargs):
 */
              goto __pyx_L25;
            }

            /* "fastthreadpool/fastthreadpool.pyx":318
 *                                 self._done_cnt.release()
 *                         else:
 *                             if self.result_id:             # <<<<<<<<<<<<<<
 *                                 _done_append((id(job), fn(*args, **kwargs)))
 *                             else:
 */
            /*else*/ {
              __pyx_t_2 = (__pyx_v_self->result_id != 0);
              if (__pyx_t_2) {

                /* "fastthreadpool/fastthreadpool.pyx":319
 *                         else:
 *                             if self.result_id:
 *                                 _done_append((id(job), fn(*args, **kwargs)))             # <<<<<<<<<<<<<<
 *                             else:
 *                                 _done_append(fn(*args, **kwargs))
 */
                __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_job); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 319, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_10 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 319, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_10);
                if (unlikely(__pyx_v_kwargs == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                  __PYX_ERR(0, 319, __pyx_L5_error)
                }
                if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                  __pyx_t_9 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 319, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_9);
                } else {
                  __pyx_t_9 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 319, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_9);
                }
                __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 319, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_8);
                PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
                __Pyx_GIVEREF(__pyx_t_1);
                PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1);
                __pyx_t_8 = 0;
                __pyx_t_1 = 0;
                __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_v__done_append, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                /* "fastthreadpool/fastthreadpool.pyx":318
 *                                 self._done_cnt.release()
 *                         else:
 *                             if self.result_id:             # <<<<<<<<<<<<<<
 *                                 _done_append((id(job), fn(*args, **kwargs)))
 *                             else:
 */
                goto __pyx_L29;
              }

              /* "fastthreadpool/fastthreadpool.pyx":321
 *                                 _done_append((id(job), fn(*args, **kwargs)))
 *                             else:
 *                                 _done_append(fn(*args, **kwargs))             # <<<<<<<<<<<<<<
 *                             self._done_cnt.release()
 *                     elif callable(done_callback):
 */
              /*else*/ {
                __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_1);
                if (unlikely(__pyx_v_kwargs == Py_None)) {
                  PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                  __PYX_ERR(0, 321, __pyx_L5_error)
                }
                if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                  __pyx_t_9 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 321, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_9);
                } else {
                  __pyx_t_9 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 321, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_9);
                }
                __pyx_t_8 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 321, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_v__done_append, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 321, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_9);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              }
              __pyx_L29:;

              /* "fastthreadpool/fastthreadpool.pyx":322
 *                             else:
 *                                 _done_append(fn(*args, **kwargs))
 *                             self._done_cnt.release()             # <<<<<<<<<<<<<<
 *                     elif callable(done_callback):
 *                         if isgeneratorfunction(fn):
 */
              ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_done_cnt->__pyx_vtab)->release(__pyx_v_self->_done_cnt, 0);
            }
            __pyx_L25:;

            /* "fastthreadpool/fastthreadpool.pyx":308
 *                         else:
 *                             fn(*args, **kwargs)
 *                     elif done_callback is True:             # <<<<<<<<<<<<<<
 *                         if isgeneratorfunction(fn):
 *                             jobid = id(job)
 */
            goto __pyx_L21;
          }

          /* "fastthreadpool/fastthreadpool.pyx":323
 *                                 _done_append(fn(*args, **kwargs))
 *                             self._done_cnt.release()
 *                     elif callable(done_callback):             # <<<<<<<<<<<<<<
 *                         if isgeneratorfunction(fn):
 *                             for result in fn(*args, **kwargs):
 */
          __pyx_t_2 = __Pyx_PyCallable_Check(__pyx_v_done_callback); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 323, __pyx_L5_error)
          __pyx_t_7 = (__pyx_t_2 != 0);
          if (__pyx_t_7) {

            /* "fastthreadpool/fastthreadpool.pyx":324
 *                             self._done_cnt.release()
 *                     elif callable(done_callback):
 *                         if isgeneratorfunction(fn):             # <<<<<<<<<<<<<<
 *                             for result in fn(*args, **kwargs):
 *                                 done_callback(result)
 */
            __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction, __pyx_v_fn); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 324, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 324, __pyx_L5_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (__pyx_t_7) {

              /* "fastthreadpool/fastthreadpool.pyx":325
 *                     elif callable(done_callback):
 *                         if isgeneratorfunction(fn):
 *                             for result in fn(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                                 done_callback(result)
 *                         else:
 */
              __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 325, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_9);
              if (unlikely(__pyx_v_kwargs == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                __PYX_ERR(0, 325, __pyx_L5_error)
              }
              if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                __pyx_t_8 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 325, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
              } else {
                __pyx_t_8 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 325, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
              }
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
                __pyx_t_8 = __pyx_t_1; __Pyx_INCREF(__pyx_t_8); __pyx_t_13 = 0;
                __pyx_t_14 = NULL;
              } else {
                __pyx_t_13 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 325, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_14 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 325, __pyx_L5_error)
              }
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              for (;;) {
                if (likely(!__pyx_t_14)) {
                  if (likely(PyList_CheckExact(__pyx_t_8))) {
                    if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 325, __pyx_L5_error)
                    #else
                    __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    #endif
                  } else {
                    if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_13); __Pyx_INCREF(__pyx_t_1); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(0, 325, __pyx_L5_error)
                    #else
                    __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_1);
                    #endif
                  }
                } else {
                  __pyx_t_1 = __pyx_t_14(__pyx_t_8);
                  if (unlikely(!__pyx_t_1)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 325, __pyx_L5_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_1);
                }
                __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_1);
                __pyx_t_1 = 0;

                /* "fastthreadpool/fastthreadpool.pyx":326
 *                         if isgeneratorfunction(fn):
 *                             for result in fn(*args, **kwargs):
 *                                 done_callback(result)             # <<<<<<<<<<<<<<
 *                         else:
 *                             done_callback(fn(*args, **kwargs))
 */
                __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_v_done_callback, __pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 326, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

                /* "fastthreadpool/fastthreadpool.pyx":325
 *                     elif callable(done_callback):
 *                         if isgeneratorfunction(fn):
 *                             for result in fn(*args, **kwargs):             # <<<<<<<<<<<<<<
 *                                 done_callback(result)
 *                         else:
 */
              }
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "fastthreadpool/fastthreadpool.pyx":324
 *                             self._done_cnt.release()
 *                     elif callable(done_callback):
 *                         if isgeneratorfunction(fn):             # <<<<<<<<<<<<<<
 *                             for result in fn(*args, **kwargs):
 *                                 done_callback(result)
 */
              goto __pyx_L30;
            }

            /* "fastthreadpool/fastthreadpool.pyx":328
 *                                 done_callback(result)
 *                         else:
 *                             done_callback(fn(*args, **kwargs))             # <<<<<<<<<<<<<<
 *             except Exception as exc:
 *                 if self._shutdown_children:
 */
            /*else*/ {
              __pyx_t_8 = __Pyx_PySequence_Tuple(__pyx_v_args); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 328, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (unlikely(__pyx_v_kwargs == Py_None)) {
                PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
                __PYX_ERR(0, 328, __pyx_L5_error)
              }
              if (likely(PyDict_CheckExact(__pyx_v_kwargs))) {
                __pyx_t_1 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_1);
              } else {
                __pyx_t_1 = PyObject_CallFunctionObjArgs((PyObject*)&PyDict_Type, __pyx_v_kwargs, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_1);
              }
              __pyx_t_9 = __Pyx_PyObject_Call(__pyx_v_fn, __pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 328, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_9);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_v_done_callback, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            }
            __pyx_L30:;

            /* "fastthreadpool/fastthreadpool.pyx":323
 *                                 _done_append(fn(*args, **kwargs))
 *                             self._done_cnt.release()
 *                     elif callable(done_callback):             # <<<<<<<<<<<<<<
 *                         if isgeneratorfunction(fn):
 *                             for result in fn(*args, **kwargs):
 */
          }
          __pyx_L21:;
        }
        __pyx_L14_break:;

        /* "fastthreadpool/fastthreadpool.pyx":289
 *         pop_failed = False
 *         while run_child:
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if not child_busy:
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":329
 *                         else:
 *                             done_callback(fn(*args, **kwargs))
 *             except Exception as exc:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     self._job_cnt.release()
 */
      __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_15) {
        __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._child", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_9, &__pyx_t_8) < 0) __PYX_ERR(0, 329, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_v_exc = __pyx_t_9;
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":330
 *                             done_callback(fn(*args, **kwargs))
 *             except Exception as exc:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     self._job_cnt.release()
 *                     break
 */
          __pyx_t_7 = (__pyx_v_self->_shutdown_children != 0);
          if (__pyx_t_7) {

            /* "fastthreadpool/fastthreadpool.pyx":331
 *             except Exception as exc:
 *                 if self._shutdown_children:
 *                     self._job_cnt.release()             # <<<<<<<<<<<<<<
 *                     break
 *                 if pop_failed:
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_job_cnt->__pyx_vtab)->release(__pyx_v_self->_job_cnt, 0);

            /* "fastthreadpool/fastthreadpool.pyx":332
 *                 if self._shutdown_children:
 *                     self._job_cnt.release()
 *                     break             # <<<<<<<<<<<<<<
 *                 if pop_failed:
 *                     self._busy_lock_dec()
 */
            goto __pyx_L36_break;

            /* "fastthreadpool/fastthreadpool.pyx":330
 *                             done_callback(fn(*args, **kwargs))
 *             except Exception as exc:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     self._job_cnt.release()
 *                     break
 */
          }

          /* "fastthreadpool/fastthreadpool.pyx":333
 *                     self._job_cnt.release()
 *                     break
 *                 if pop_failed:             # <<<<<<<<<<<<<<
 *                     self._busy_lock_dec()
 *                     child_busy = False
 */
          __pyx_t_7 = (__pyx_v_pop_failed != 0);
          if (__pyx_t_7) {

            /* "fastthreadpool/fastthreadpool.pyx":334
 *                     break
 *                 if pop_failed:
 *                     self._busy_lock_dec()             # <<<<<<<<<<<<<<
 *                     child_busy = False
 *                     self._job_cnt.acquire()
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_dec(__pyx_v_self);

            /* "fastthreadpool/fastthreadpool.pyx":335
 *                 if pop_failed:
 *                     self._busy_lock_dec()
 *                     child_busy = False             # <<<<<<<<<<<<<<
 *                     self._job_cnt.acquire()
 *                 else:
 */
            __pyx_v_child_busy = 0;

            /* "fastthreadpool/fastthreadpool.pyx":336
 *                     self._busy_lock_dec()
 *                     child_busy = False
 *                     self._job_cnt.acquire()             # <<<<<<<<<<<<<<
 *                 else:
 *                     if self.result_id:
 */
            (void)(((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_job_cnt->__pyx_vtab)->acquire(__pyx_v_self->_job_cnt, 0, NULL));

            /* "fastthreadpool/fastthreadpool.pyx":333
 *                     self._job_cnt.release()
 *                     break
 *                 if pop_failed:             # <<<<<<<<<<<<<<
 *                     self._busy_lock_dec()
 *                     child_busy = False
 */
            goto __pyx_L41;
          }

          /* "fastthreadpool/fastthreadpool.pyx":338
 *                     self._job_cnt.acquire()
 *                 else:
 *                     if self.result_id:             # <<<<<<<<<<<<<<
 *                         failed_append((id(job), exc))
 *                     else:
 */
          /*else*/ {
            __pyx_t_7 = (__pyx_v_self->result_id != 0);
            if (__pyx_t_7) {

              /* "fastthreadpool/fastthreadpool.pyx":339
 *                 else:
 *                     if self.result_id:
 *                         failed_append((id(job), exc))             # <<<<<<<<<<<<<<
 *                     else:
 *                         failed_append(exc)
 */
              if (unlikely(!__pyx_v_job)) { __Pyx_RaiseUnboundLocalError("job"); __PYX_ERR(0, 339, __pyx_L38_error) }
              __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_job); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 339, __pyx_L38_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 339, __pyx_L38_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
              __Pyx_INCREF(__pyx_v_exc);
              __Pyx_GIVEREF(__pyx_v_exc);
              PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_v_exc);
              __pyx_t_10 = 0;
              __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v_failed_append, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 339, __pyx_L38_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

              /* "fastthreadpool/fastthreadpool.pyx":338
 *                     self._job_cnt.acquire()
 *                 else:
 *                     if self.result_id:             # <<<<<<<<<<<<<<
 *                         failed_append((id(job), exc))
 *                     else:
 */
              goto __pyx_L42;
            }

            /* "fastthreadpool/fastthreadpool.pyx":341
 *                         failed_append((id(job), exc))
 *                     else:
 *                         failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         self._busy_lock_dec()
 */
            /*else*/ {
              __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v_failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 341, __pyx_L38_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            }
            __pyx_L42:;

            /* "fastthreadpool/fastthreadpool.pyx":342
 *                     else:
 *                         failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         self._busy_lock_dec()
 * 
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }
          __pyx_L41:;
        }

        /* "fastthreadpool/fastthreadpool.pyx":329
 *                         else:
 *                             done_callback(fn(*args, **kwargs))
 *             except Exception as exc:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     self._job_cnt.release()
 */
        /*finally:*/ {
          /*normal exit:*/{
            __Pyx_DECREF(__pyx_v_exc);
            __pyx_v_exc = NULL;
            goto __pyx_L39;
          }
          __pyx_L38_error:;
          /*exception exit:*/{
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
            if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_21);
            __Pyx_XGOTREF(__pyx_t_22);
            __Pyx_XGOTREF(__pyx_t_23);
            __pyx_t_15 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
            {
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
            }
            if (PY_MAJOR_VERSION >= 3) {
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_XGIVEREF(__pyx_t_22);
              __Pyx_XGIVEREF(__pyx_t_23);
              __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
            }
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
            __pyx_lineno = __pyx_t_15; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
            goto __pyx_L7_except_error;
          }
          __pyx_L36_break: {
            __Pyx_DECREF(__pyx_v_exc);
            __pyx_v_exc = NULL;
            goto __pyx_L33_except_break;
          }
          __pyx_L39:;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L6_exception_handled;
        __pyx_L33_except_break:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L10_try_break;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":289
 *         pop_failed = False
 *         while run_child:
 *             try:             # <<<<<<<<<<<<<<
 *                 while True:
 *                     if not child_busy:
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L10_try_break:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L4_break;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      __pyx_L12_try_end:;
    }
  }
  __pyx_L4_break:;

  /* "fastthreadpool/fastthreadpool.pyx":343
 *                         failed_append(exc)
 *                     self._failed_cnt.release()
 *         self._busy_lock_dec()             # <<<<<<<<<<<<<<
 * 
 *     cdef object _submit(self, fn, done_callback, args, kwargs, bint high_priority) except +:
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_dec(__pyx_v_self);

  /* "fastthreadpool/fastthreadpool.pyx":279
 *                 self._failed_cnt.acquire()
 * 
 *     def _child(self, num):             # <<<<<<<<<<<<<<
 *         cdef bint run_child, pop_failed
 *         self._busy_lock_inc()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__done_append);
  __Pyx_XDECREF(__pyx_v_failed_append);
  __Pyx_XDECREF(__pyx_v_jobs_popleft);
  __Pyx_XDECREF(__pyx_v_job);
  __Pyx_XDECREF(__pyx_v_fn);
  __Pyx_XDECREF(__pyx_v_done_callback);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_jobid);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_exc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":345
 *         self._busy_lock_dec()
 * 
 *     cdef object _submit(self, fn, done_callback, args, kwargs, bint high_priority) except +:             # <<<<<<<<<<<<<<
 *     #p def _submit(self, fn, done_callback, args, kwargs, high_priority):
 *         if self._shutdown_children:
 */

static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, int __pyx_v_high_priority) {
  PyObject *__pyx_v_thr_child = NULL;
  PyObject *__pyx_v_job = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("_submit", 0);

  /* "fastthreadpool/fastthreadpool.pyx":347
 *     cdef object _submit(self, fn, done_callback, args, kwargs, bint high_priority) except +:
 *     #p def _submit(self, fn, done_callback, args, kwargs, high_priority):
 *         if self._shutdown_children:             # <<<<<<<<<<<<<<
 *             raise PoolStopped("Pool not running")
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 */
  __pyx_t_1 = (__pyx_v_self->_shutdown_children != 0);
  if (unlikely(__pyx_t_1)) {

    /* "fastthreadpool/fastthreadpool.pyx":348
 *     #p def _submit(self, fn, done_callback, args, kwargs, high_priority):
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")             # <<<<<<<<<<<<<<
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 *             self._child_cnt += 1
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PoolStopped); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 348, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":347
 *     cdef object _submit(self, fn, done_callback, args, kwargs, bint high_priority) except +:
 *     #p def _submit(self, fn, done_callback, args, kwargs, high_priority):
 *         if self._shutdown_children:             # <<<<<<<<<<<<<<
 *             raise PoolStopped("Pool not running")
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":349
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):             # <<<<<<<<<<<<<<
 *             self._child_cnt += 1
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),
 */
  __pyx_t_4 = ((__pyx_v_self->_job_cnt->_value >= __pyx_v_self->_child_cnt) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = ((__pyx_v_self->_child_cnt < __pyx_v_self->max_children) != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":350
 *             raise PoolStopped("Pool not running")
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 *             self._child_cnt += 1             # <<<<<<<<<<<<<<
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),
 *                                name=self.child_name_prefix + str(self._child_cnt))
 */
    __pyx_v_self->_child_cnt = (__pyx_v_self->_child_cnt + 1);

    /* "fastthreadpool/fastthreadpool.pyx":351
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 *             self._child_cnt += 1
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),             # <<<<<<<<<<<<<<
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_child); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_target, __pyx_t_2) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_child_cnt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_args, __pyx_t_5) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":352
 *             self._child_cnt += 1
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),
 *                                name=self.child_name_prefix + str(self._child_cnt))             # <<<<<<<<<<<<<<
 *             thr_child.daemon = True
 *             if self.init_callback is not None:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_child_cnt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_self->child_name_prefix, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_name, __pyx_t_5) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":351
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 *             self._child_cnt += 1
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),             # <<<<<<<<<<<<<<
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Thread, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_thr_child = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":353
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True             # <<<<<<<<<<<<<<
 *             if self.init_callback is not None:
 *                 self.init_callback(thr_child)
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_thr_child, __pyx_n_s_daemon, Py_True) < 0) __PYX_ERR(0, 353, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":354
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 *             if self.init_callback is not None:             # <<<<<<<<<<<<<<
 *                 self.init_callback(thr_child)
 *             thr_child.start()
 */
    __pyx_t_1 = (__pyx_v_self->init_callback != Py_None);
    __pyx_t_4 = (__pyx_t_1 != 0);
    if (__pyx_t_4) {

      /* "fastthreadpool/fastthreadpool.pyx":355
 *             thr_child.daemon = True
 *             if self.init_callback is not None:
 *                 self.init_callback(thr_child)             # <<<<<<<<<<<<<<
 *             thr_child.start()
 *             self.children.add(thr_child)
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_v_self->init_callback, __pyx_v_thr_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":354
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 *             if self.init_callback is not None:             # <<<<<<<<<<<<<<
 *                 self.init_callback(thr_child)
 *             thr_child.start()
 */
    }

    /* "fastthreadpool/fastthreadpool.pyx":356
 *             if self.init_callback is not None:
 *                 self.init_callback(thr_child)
 *             thr_child.start()             # <<<<<<<<<<<<<<
 *             self.children.add(thr_child)
 *         job = (fn, done_callback, args, kwargs)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_thr_child, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":357
 *                 self.init_callback(thr_child)
 *             thr_child.start()
 *             self.children.add(thr_child)             # <<<<<<<<<<<<<<
 *         job = (fn, done_callback, args, kwargs)
 *         if high_priority:
 */
    if (unlikely(__pyx_v_self->children == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
      __PYX_ERR(0, 357, __pyx_L1_error)
    }
    __pyx_t_6 = PySet_Add(__pyx_v_self->children, __pyx_v_thr_child); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 357, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":349
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):             # <<<<<<<<<<<<<<
 *             self._child_cnt += 1
 *             thr_child = Thread(target=self._child, args = ( self._child_cnt, ),
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":358
 *             thr_child.start()
 *             self.children.add(thr_child)
 *         job = (fn, done_callback, args, kwargs)             # <<<<<<<<<<<<<<
 *         if high_priority:
 *             self._jobs_appendleft(job)
 */
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_fn);
  __Pyx_GIVEREF(__pyx_v_fn);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_fn);
  __Pyx_INCREF(__pyx_v_done_callback);
  __Pyx_GIVEREF(__pyx_v_done_callback);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_done_callback);
  __Pyx_INCREF(__pyx_v_args);
  __Pyx_GIVEREF(__pyx_v_args);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_args);
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_kwargs);
  __pyx_v_job = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":359
 *             self.children.add(thr_child)
 *         job = (fn, done_callback, args, kwargs)
 *         if high_priority:             # <<<<<<<<<<<<<<
 *             self._jobs_appendleft(job)
 *         else:
 */
  __pyx_t_4 = (__pyx_v_high_priority != 0);
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":360
 *         job = (fn, done_callback, args, kwargs)
 *         if high_priority:
 *             self._jobs_appendleft(job)             # <<<<<<<<<<<<<<
 *         else:
 *             self._jobs_append(job)
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_v_self->_jobs_appendleft, __pyx_v_job); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":359
 *             self.children.add(thr_child)
 *         job = (fn, done_callback, args, kwargs)
 *         if high_priority:             # <<<<<<<<<<<<<<
 *             self._jobs_appendleft(job)
 *         else:
 */
    goto __pyx_L8;
  }

  /* "fastthreadpool/fastthreadpool.pyx":362
 *             self._jobs_appendleft(job)
 *         else:
 *             self._jobs_append(job)             # <<<<<<<<<<<<<<
 *         if  self._job_cnt._value < self._child_cnt:
 *             self._job_cnt.release()
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_v_self->_jobs_append, __pyx_v_job); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L8:;

  /* "fastthreadpool/fastthreadpool.pyx":363
 *         else:
 *             self._jobs_append(job)
 *         if  self._job_cnt._value < self._child_cnt:             # <<<<<<<<<<<<<<
 *             self._job_cnt.release()
 *         if self.result_id:
 */
  __pyx_t_4 = ((__pyx_v_self->_job_cnt->_value < __pyx_v_self->_child_cnt) != 0);
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":364
 *             self._jobs_append(job)
 *         if  self._job_cnt._value < self._child_cnt:
 *             self._job_cnt.release()             # <<<<<<<<<<<<<<
 *         if self.result_id:
 *             return id(job)
 */
    ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_job_cnt->__pyx_vtab)->release(__pyx_v_self->_job_cnt, 0);

    /* "fastthreadpool/fastthreadpool.pyx":363
 *         else:
 *             self._jobs_append(job)
 *         if  self._job_cnt._value < self._child_cnt:             # <<<<<<<<<<<<<<
 *             self._job_cnt.release()
 *         if self.result_id:
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":365
 *         if  self._job_cnt._value < self._child_cnt:
 *             self._job_cnt.release()
 *         if self.result_id:             # <<<<<<<<<<<<<<
 *             return id(job)
 *         return None
 */
  __pyx_t_4 = (__pyx_v_self->result_id != 0);
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":366
 *             self._job_cnt.release()
 *         if self.result_id:
 *             return id(job)             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_job); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "fastthreadpool/fastthreadpool.pyx":365
 *         if  self._job_cnt._value < self._child_cnt:
 *             self._job_cnt.release()
 *         if self.result_id:             # <<<<<<<<<<<<<<
 *             return id(job)
 *         return None
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":367
 *         if self.result_id:
 *             return id(job)
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def submit(self, fn, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":345
 *         self._busy_lock_dec()
 * 
 *     cdef object _submit(self, fn, done_callback, args, kwargs, bint high_priority) except +:             # <<<<<<<<<<<<<<
 *     #p def _submit(self, fn, done_callback, args, kwargs, high_priority):
 *         if self._shutdown_children:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._submit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_thr_child);
  __Pyx_XDECREF(__pyx_v_job);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":369
 *         return None
 * 
 *     def submit(self, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, True, args, kwargs, False)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_15submit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_15submit(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit") < 0)) __PYX_ERR(0, 369, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 369, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_14submit(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_14submit(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit", 0);

  /* "fastthreadpool/fastthreadpool.pyx":370
 * 
 *     def submit(self, fn, *args, **kwargs):
 *         return self._submit(fn, True, args, kwargs, False)             # <<<<<<<<<<<<<<
 * 
 *     def submit_done(self, fn, done_callback, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit(__pyx_v_self, __pyx_v_fn, Py_True, __pyx_v_args, __pyx_v_kwargs, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 370, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":369
 *         return None
 * 
 *     def submit(self, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, True, args, kwargs, False)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":372
 *         return self._submit(fn, True, args, kwargs, False)
 * 
 *     def submit_done(self, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, done_callback, args, kwargs, False)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_17submit_done(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_17submit_done(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_done (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,&__pyx_n_s_done_callback,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done", 0, 2, 2, 1); __PYX_ERR(0, 372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_done") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fn = values[0];
    __pyx_v_done_callback = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_done", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_16submit_done(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_16submit_done(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_done", 0);

  /* "fastthreadpool/fastthreadpool.pyx":373
 * 
 *     def submit_done(self, fn, done_callback, *args, **kwargs):
 *         return self._submit(fn, done_callback, args, kwargs, False)             # <<<<<<<<<<<<<<
 * 
 *     def submit_first(self, fn, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit(__pyx_v_self, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs, 0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 373, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":372
 *         return self._submit(fn, True, args, kwargs, False)
 * 
 *     def submit_done(self, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, done_callback, args, kwargs, False)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":375
 *         return self._submit(fn, done_callback, args, kwargs, False)
 * 
 *     def submit_first(self, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, True, args, kwargs, True)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_19submit_first(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_19submit_first(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_first (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_first") < 0)) __PYX_ERR(0, 375, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_fn = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_first", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 375, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_18submit_first(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_18submit_first(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_first", 0);

  /* "fastthreadpool/fastthreadpool.pyx":376
 * 
 *     def submit_first(self, fn, *args, **kwargs):
 *         return self._submit(fn, True, args, kwargs, True)             # <<<<<<<<<<<<<<
 * 
 *     def submit_done_first(self, fn, done_callback, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit(__pyx_v_self, __pyx_v_fn, Py_True, __pyx_v_args, __pyx_v_kwargs, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 376, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":375
 *         return self._submit(fn, done_callback, args, kwargs, False)
 * 
 *     def submit_first(self, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, True, args, kwargs, True)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":378
 *         return self._submit(fn, True, args, kwargs, True)
 * 
 *     def submit_done_first(self, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, done_callback, args, kwargs, True)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_21submit_done_first(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_21submit_done_first(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_done_first (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,&__pyx_n_s_done_callback,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done_first", 0, 2, 2, 1); __PYX_ERR(0, 378, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_done_first") < 0)) __PYX_ERR(0, 378, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_fn = values[0];
    __pyx_v_done_callback = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_done_first", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 378, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_20submit_done_first(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_20submit_done_first(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_done_first", 0);

  /* "fastthreadpool/fastthreadpool.pyx":379
 * 
 *     def submit_done_first(self, fn, done_callback, *args, **kwargs):
 *         return self._submit(fn, done_callback, args, kwargs, True)             # <<<<<<<<<<<<<<
 * 
 *     def _submit_later_do(self, timer_obj, fn, done_callback, args, kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit(__pyx_v_self, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 379, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":378
 *         return self._submit(fn, True, args, kwargs, True)
 * 
 *     def submit_done_first(self, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit(fn, done_callback, args, kwargs, True)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done_first", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":381
 *         return self._submit(fn, done_callback, args, kwargs, True)
 * 
 *     def _submit_later_do(self, timer_obj, fn, done_callback, args, kwargs):             # <<<<<<<<<<<<<<
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._delayed.remove(timer_obj[0])
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_23_submit_later_do(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_23_submit_later_do(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_timer_obj = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_submit_later_do (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timer_obj,&__pyx_n_s_fn,&__pyx_n_s_done_callback,&__pyx_n_s_args,&__pyx_n_s_kwargs,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timer_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_submit_later_do", 1, 5, 5, 1); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_submit_later_do", 1, 5, 5, 2); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_submit_later_do", 1, 5, 5, 3); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwargs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_submit_later_do", 1, 5, 5, 4); __PYX_ERR(0, 381, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_submit_later_do") < 0)) __PYX_ERR(0, 381, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_timer_obj = values[0];
    __pyx_v_fn = values[1];
    __pyx_v_done_callback = values[2];
    __pyx_v_args = values[3];
    __pyx_v_kwargs = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_submit_later_do", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._submit_later_do", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_22_submit_later_do(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_timer_obj, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_22_submit_later_do(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timer_obj, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("_submit_later_do", 0);

  /* "fastthreadpool/fastthreadpool.pyx":382
 * 
 *     def _submit_later_do(self, timer_obj, fn, done_callback, args, kwargs):
 *         self._submit(fn, done_callback, args, kwargs, True)             # <<<<<<<<<<<<<<
 *         self._delayed.remove(timer_obj[0])
 * 
 */
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit(__pyx_v_self, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 382, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":383
 *     def _submit_later_do(self, timer_obj, fn, done_callback, args, kwargs):
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._delayed.remove(timer_obj[0])             # <<<<<<<<<<<<<<
 * 
 *     cdef object _submit_later(self, delay, fn, done_callback, args, kwargs) except +:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_delayed, __pyx_n_s_remove); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_timer_obj, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":381
 *         return self._submit(fn, done_callback, args, kwargs, True)
 * 
 *     def _submit_later_do(self, timer_obj, fn, done_callback, args, kwargs):             # <<<<<<<<<<<<<<
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._delayed.remove(timer_obj[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._submit_later_do", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":385
 *         self._delayed.remove(timer_obj[0])
 * 
 *     cdef object _submit_later(self, delay, fn, done_callback, args, kwargs) except +:             # <<<<<<<<<<<<<<
 *     #p def _submit_later(self, delay, fn, done_callback, args, kwargs):
 *         timer_obj = [None]
 */

static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit_later(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_delay, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_timer_obj = NULL;
  PyObject *__pyx_v_timer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_submit_later", 0);

  /* "fastthreadpool/fastthreadpool.pyx":387
 *     cdef object _submit_later(self, delay, fn, done_callback, args, kwargs) except +:
 *     #p def _submit_later(self, delay, fn, done_callback, args, kwargs):
 *         timer_obj = [None]             # <<<<<<<<<<<<<<
 *         timer = Timer(delay, self._submit_later_do, (timer_obj, fn, done_callback, args, kwargs))
 *         timer_obj[0] = timer
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_None);
  __pyx_v_timer_obj = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":388
 *     #p def _submit_later(self, delay, fn, done_callback, args, kwargs):
 *         timer_obj = [None]
 *         timer = Timer(delay, self._submit_later_do, (timer_obj, fn, done_callback, args, kwargs))             # <<<<<<<<<<<<<<
 *         timer_obj[0] = timer
 *         timer.start()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_submit_later_do); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_timer_obj);
  __Pyx_GIVEREF(__pyx_v_timer_obj);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_timer_obj);
  __Pyx_INCREF(__pyx_v_fn);
  __Pyx_GIVEREF(__pyx_v_fn);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_fn);
  __Pyx_INCREF(__pyx_v_done_callback);
  __Pyx_GIVEREF(__pyx_v_done_callback);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_done_callback);
  __Pyx_INCREF(__pyx_v_args);
  __Pyx_GIVEREF(__pyx_v_args);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_args);
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_kwargs);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_delay);
  __Pyx_GIVEREF(__pyx_v_delay);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_delay);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Timer, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_timer = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":389
 *         timer_obj = [None]
 *         timer = Timer(delay, self._submit_later_do, (timer_obj, fn, done_callback, args, kwargs))
 *         timer_obj[0] = timer             # <<<<<<<<<<<<<<
 *         timer.start()
 *         self._delayed.append(timer)
 */
  if (unlikely(__Pyx_SetItemInt(__pyx_v_timer_obj, 0, __pyx_v_timer, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 389, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":390
 *         timer = Timer(delay, self._submit_later_do, (timer_obj, fn, done_callback, args, kwargs))
 *         timer_obj[0] = timer
 *         timer.start()             # <<<<<<<<<<<<<<
 *         self._delayed.append(timer)
 *         return timer
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":391
 *         timer_obj[0] = timer
 *         timer.start()
 *         self._delayed.append(timer)             # <<<<<<<<<<<<<<
 *         return timer
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_self->_delayed, __pyx_v_timer); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 391, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":392
 *         timer.start()
 *         self._delayed.append(timer)
 *         return timer             # <<<<<<<<<<<<<<
 * 
 *     def submit_later(self, delay, fn, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_timer);
  __pyx_r = __pyx_v_timer;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":385
 *         self._delayed.remove(timer_obj[0])
 * 
 *     cdef object _submit_later(self, delay, fn, done_callback, args, kwargs) except +:             # <<<<<<<<<<<<<<
 *     #p def _submit_later(self, delay, fn, done_callback, args, kwargs):
 *         timer_obj = [None]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._submit_later", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_timer_obj);
  __Pyx_XDECREF(__pyx_v_timer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":394
 *         return timer
 * 
 *     def submit_later(self, delay, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_later(delay, fn, True, args, kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_25submit_later(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_25submit_later(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_delay = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_later (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delay,&__pyx_n_s_fn,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_later", 0, 2, 2, 1); __PYX_ERR(0, 394, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_later") < 0)) __PYX_ERR(0, 394, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_delay = values[0];
    __pyx_v_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_later", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 394, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_later", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_24submit_later(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_delay, __pyx_v_fn, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_24submit_later(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_delay, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_later", 0);

  /* "fastthreadpool/fastthreadpool.pyx":395
 * 
 *     def submit_later(self, delay, fn, *args, **kwargs):
 *         return self._submit_later(delay, fn, True, args, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def submit_done_later(self, delay, fn, done_callback, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit_later(__pyx_v_self, __pyx_v_delay, __pyx_v_fn, Py_True, __pyx_v_args, __pyx_v_kwargs);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 395, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":394
 *         return timer
 * 
 *     def submit_later(self, delay, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_later(delay, fn, True, args, kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_later", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":397
 *         return self._submit_later(delay, fn, True, args, kwargs)
 * 
 *     def submit_done_later(self, delay, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_later(delay, fn, done_callback, args, kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_27submit_done_later(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_27submit_done_later(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_delay = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_done_later (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 3) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 3, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_delay,&__pyx_n_s_fn,&__pyx_n_s_done_callback,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_delay)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done_later", 0, 3, 3, 1); __PYX_ERR(0, 397, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done_later", 0, 3, 3, 2); __PYX_ERR(0, 397, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 3) ? pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_done_later") < 0)) __PYX_ERR(0, 397, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_delay = values[0];
    __pyx_v_fn = values[1];
    __pyx_v_done_callback = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_done_later", 0, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 397, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done_later", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_26submit_done_later(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_delay, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_26submit_done_later(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_delay, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_done_later", 0);

  /* "fastthreadpool/fastthreadpool.pyx":398
 * 
 *     def submit_done_later(self, delay, fn, done_callback, *args, **kwargs):
 *         return self._submit_later(delay, fn, done_callback, args, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _submit_at(self, _runat, interval, fn, done_callback, args, kwargs) except +:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit_later(__pyx_v_self, __pyx_v_delay, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 398, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":397
 *         return self._submit_later(delay, fn, True, args, kwargs)
 * 
 *     def submit_done_later(self, delay, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_later(delay, fn, done_callback, args, kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done_later", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":400
 *         return self._submit_later(delay, fn, done_callback, args, kwargs)
 * 
 *     cdef object _submit_at(self, _runat, interval, fn, done_callback, args, kwargs) except +:             # <<<<<<<<<<<<<<
 *     #p def _submit_at(self, _runat, interval, fn, done_callback, args, kwargs):
 *         if isinstance(_runat, struct_time):
 */

static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit_at(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_now = NULL;
  PyObject *__pyx_v_timer_obj = NULL;
  PyObject *__pyx_v_timer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("_submit_at", 0);
  __Pyx_INCREF(__pyx_v__runat);

  /* "fastthreadpool/fastthreadpool.pyx":402
 *     cdef object _submit_at(self, _runat, interval, fn, done_callback, args, kwargs) except +:
 *     #p def _submit_at(self, _runat, interval, fn, done_callback, args, kwargs):
 *         if isinstance(_runat, struct_time):             # <<<<<<<<<<<<<<
 *             _runat = mktime(_runat)
 *         now = _time()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_struct_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v__runat, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "fastthreadpool/fastthreadpool.pyx":403
 *     #p def _submit_at(self, _runat, interval, fn, done_callback, args, kwargs):
 *         if isinstance(_runat, struct_time):
 *             _runat = mktime(_runat)             # <<<<<<<<<<<<<<
 *         now = _time()
 *         if _runat < now:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_mktime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v__runat); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v__runat, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":402
 *     cdef object _submit_at(self, _runat, interval, fn, done_callback, args, kwargs) except +:
 *     #p def _submit_at(self, _runat, interval, fn, done_callback, args, kwargs):
 *         if isinstance(_runat, struct_time):             # <<<<<<<<<<<<<<
 *             _runat = mktime(_runat)
 *         now = _time()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":404
 *         if isinstance(_runat, struct_time):
 *             _runat = mktime(_runat)
 *         now = _time()             # <<<<<<<<<<<<<<
 *         if _runat < now:
 *             raise ValueError("_runat has invalid value!")
 */
  __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_now = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":405
 *             _runat = mktime(_runat)
 *         now = _time()
 *         if _runat < now:             # <<<<<<<<<<<<<<
 *             raise ValueError("_runat has invalid value!")
 *         timer_obj = TimerObj()
 */
  __pyx_t_4 = PyObject_RichCompare(__pyx_v__runat, __pyx_v_now, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_t_3)) {

    /* "fastthreadpool/fastthreadpool.pyx":406
 *         now = _time()
 *         if _runat < now:
 *             raise ValueError("_runat has invalid value!")             # <<<<<<<<<<<<<<
 *         timer_obj = TimerObj()
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 406, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":405
 *             _runat = mktime(_runat)
 *         now = _time()
 *         if _runat < now:             # <<<<<<<<<<<<<<
 *             raise ValueError("_runat has invalid value!")
 *         timer_obj = TimerObj()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":407
 *         if _runat < now:
 *             raise ValueError("_runat has invalid value!")
 *         timer_obj = TimerObj()             # <<<<<<<<<<<<<<
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,
 *                                                         fn, done_callback, args, kwargs))
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_TimerObj); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_timer_obj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":408
 *             raise ValueError("_runat has invalid value!")
 *         timer_obj = TimerObj()
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,             # <<<<<<<<<<<<<<
 *                                                         fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v__runat, __pyx_v_now); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_schedule_do); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Subtract(__pyx_v__runat, __pyx_v_interval); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "fastthreadpool/fastthreadpool.pyx":409
 *         timer_obj = TimerObj()
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,
 *                                                         fn, done_callback, args, kwargs))             # <<<<<<<<<<<<<<
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)
 */
  __pyx_t_6 = PyTuple_New(7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_timer_obj);
  __Pyx_GIVEREF(__pyx_v_timer_obj);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_timer_obj);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_interval);
  __Pyx_GIVEREF(__pyx_v_interval);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_interval);
  __Pyx_INCREF(__pyx_v_fn);
  __Pyx_GIVEREF(__pyx_v_fn);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_v_fn);
  __Pyx_INCREF(__pyx_v_done_callback);
  __Pyx_GIVEREF(__pyx_v_done_callback);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_done_callback);
  __Pyx_INCREF(__pyx_v_args);
  __Pyx_GIVEREF(__pyx_v_args);
  PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_v_args);
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_v_kwargs);
  __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":408
 *             raise ValueError("_runat has invalid value!")
 *         timer_obj = TimerObj()
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,             # <<<<<<<<<<<<<<
 *                                                         fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer
 */
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Timer, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_timer = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":410
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,
 *                                                         fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer             # <<<<<<<<<<<<<<
 *         self._scheduled.append(timer)
 *         timer.start()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_timer_obj, __pyx_n_s_timer_id, __pyx_v_timer) < 0) __PYX_ERR(0, 410, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":411
 *                                                         fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)             # <<<<<<<<<<<<<<
 *         timer.start()
 *         return timer_obj
 */
  __pyx_t_7 = __Pyx_PyObject_Append(__pyx_v_self->_scheduled, __pyx_v_timer); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 411, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":412
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)
 *         timer.start()             # <<<<<<<<<<<<<<
 *         return timer_obj
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_start); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":413
 *         self._scheduled.append(timer)
 *         timer.start()
 *         return timer_obj             # <<<<<<<<<<<<<<
 * 
 *     def submit_at(self, _runat, interval, fn, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_timer_obj);
  __pyx_r = __pyx_v_timer_obj;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":400
 *         return self._submit_later(delay, fn, done_callback, args, kwargs)
 * 
 *     cdef object _submit_at(self, _runat, interval, fn, done_callback, args, kwargs) except +:             # <<<<<<<<<<<<<<
 *     #p def _submit_at(self, _runat, interval, fn, done_callback, args, kwargs):
 *         if isinstance(_runat, struct_time):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._submit_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_now);
  __Pyx_XDECREF(__pyx_v_timer_obj);
  __Pyx_XDECREF(__pyx_v_timer);
  __Pyx_XDECREF(__pyx_v__runat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":415
 *         return timer_obj
 * 
 *     def submit_at(self, _runat, interval, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_at(_runat, interval, fn, True, args, kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_29submit_at(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_29submit_at(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__runat = 0;
  PyObject *__pyx_v_interval = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_at (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 3) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 3, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_runat,&__pyx_n_s_interval,&__pyx_n_s_fn,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_runat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_at", 0, 3, 3, 1); __PYX_ERR(0, 415, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_at", 0, 3, 3, 2); __PYX_ERR(0, 415, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 3) ? pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_at") < 0)) __PYX_ERR(0, 415, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v__runat = values[0];
    __pyx_v_interval = values[1];
    __pyx_v_fn = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_at", 0, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 415, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_28submit_at(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v__runat, __pyx_v_interval, __pyx_v_fn, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_28submit_at(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_at", 0);

  /* "fastthreadpool/fastthreadpool.pyx":416
 * 
 *     def submit_at(self, _runat, interval, fn, *args, **kwargs):
 *         return self._submit_at(_runat, interval, fn, True, args, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def submit_done_at(self, _runat, interval, fn, done_callback, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit_at(__pyx_v_self, __pyx_v__runat, __pyx_v_interval, __pyx_v_fn, Py_True, __pyx_v_args, __pyx_v_kwargs);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 416, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":415
 *         return timer_obj
 * 
 *     def submit_at(self, _runat, interval, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_at(_runat, interval, fn, True, args, kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":418
 *         return self._submit_at(_runat, interval, fn, True, args, kwargs)
 * 
 *     def submit_done_at(self, _runat, interval, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_at(_runat, interval, fn, done_callback, args, kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_31submit_done_at(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_31submit_done_at(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v__runat = 0;
  PyObject *__pyx_v_interval = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("submit_done_at (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_runat,&__pyx_n_s_interval,&__pyx_n_s_fn,&__pyx_n_s_done_callback,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_runat)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done_at", 0, 4, 4, 1); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done_at", 0, 4, 4, 2); __PYX_ERR(0, 418, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("submit_done_at", 0, 4, 4, 3); __PYX_ERR(0, 418, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "submit_done_at") < 0)) __PYX_ERR(0, 418, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v__runat = values[0];
    __pyx_v_interval = values[1];
    __pyx_v_fn = values[2];
    __pyx_v_done_callback = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("submit_done_at", 0, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 418, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_30submit_done_at(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v__runat, __pyx_v_interval, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_30submit_done_at(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("submit_done_at", 0);

  /* "fastthreadpool/fastthreadpool.pyx":419
 * 
 *     def submit_done_at(self, _runat, interval, fn, done_callback, *args, **kwargs):
 *         return self._submit_at(_runat, interval, fn, done_callback, args, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit_at(__pyx_v_self, __pyx_v__runat, __pyx_v_interval, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 419, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":418
 *         return self._submit_at(_runat, interval, fn, True, args, kwargs)
 * 
 *     def submit_done_at(self, _runat, interval, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._submit_at(_runat, interval, fn, done_callback, args, kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.submit_done_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":422
 * 
 *     @property
 *     def delayed(self):             # <<<<<<<<<<<<<<
 *         return self._delayed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7delayed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7delayed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_7delayed___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_7delayed___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":423
 *     @property
 *     def delayed(self):
 *         return self._delayed             # <<<<<<<<<<<<<<
 * 
 *     def _schedule_do(self, timer_obj, _runat, interval, fn, done_callback, args, kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_delayed);
  __pyx_r = __pyx_v_self->_delayed;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":422
 * 
 *     @property
 *     def delayed(self):             # <<<<<<<<<<<<<<
 *         return self._delayed
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":425
 *         return self._delayed
 * 
 *     def _schedule_do(self, timer_obj, _runat, interval, fn, done_callback, args, kwargs):             # <<<<<<<<<<<<<<
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._scheduled.remove(timer_obj.timer_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_33_schedule_do(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_33_schedule_do(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_timer_obj = 0;
  PyObject *__pyx_v__runat = 0;
  PyObject *__pyx_v_interval = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_schedule_do (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timer_obj,&__pyx_n_s_runat,&__pyx_n_s_interval,&__pyx_n_s_fn,&__pyx_n_s_done_callback,&__pyx_n_s_args,&__pyx_n_s_kwargs,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timer_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_runat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, 1); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, 2); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, 3); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, 4); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, 5); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwargs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, 6); __PYX_ERR(0, 425, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_schedule_do") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_timer_obj = values[0];
    __pyx_v__runat = values[1];
    __pyx_v_interval = values[2];
    __pyx_v_fn = values[3];
    __pyx_v_done_callback = values[4];
    __pyx_v_args = values[5];
    __pyx_v_kwargs = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_schedule_do", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._schedule_do", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_32_schedule_do(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_timer_obj, __pyx_v__runat, __pyx_v_interval, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_32_schedule_do(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timer_obj, PyObject *__pyx_v__runat, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_now = NULL;
  PyObject *__pyx_v_dt = NULL;
  PyObject *__pyx_v_timer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("_schedule_do", 0);

  /* "fastthreadpool/fastthreadpool.pyx":426
 * 
 *     def _schedule_do(self, timer_obj, _runat, interval, fn, done_callback, args, kwargs):
 *         self._submit(fn, done_callback, args, kwargs, True)             # <<<<<<<<<<<<<<
 *         self._scheduled.remove(timer_obj.timer_id)
 *         if interval <= 0.0:
 */
  try {
    __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_submit(__pyx_v_self, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs, 1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 426, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":427
 *     def _schedule_do(self, timer_obj, _runat, interval, fn, done_callback, args, kwargs):
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._scheduled.remove(timer_obj.timer_id)             # <<<<<<<<<<<<<<
 *         if interval <= 0.0:
 *             return
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_scheduled, __pyx_n_s_remove); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer_obj, __pyx_n_s_timer_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":428
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._scheduled.remove(timer_obj.timer_id)
 *         if interval <= 0.0:             # <<<<<<<<<<<<<<
 *             return
 *         now = _time()
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_interval, __pyx_float_0_0, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":429
 *         self._scheduled.remove(timer_obj.timer_id)
 *         if interval <= 0.0:
 *             return             # <<<<<<<<<<<<<<
 *         now = _time()
 *         dt = interval - (now - _runat - interval)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "fastthreadpool/fastthreadpool.pyx":428
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._scheduled.remove(timer_obj.timer_id)
 *         if interval <= 0.0:             # <<<<<<<<<<<<<<
 *             return
 *         now = _time()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":430
 *         if interval <= 0.0:
 *             return
 *         now = _time()             # <<<<<<<<<<<<<<
 *         dt = interval - (now - _runat - interval)
 *         timer = Timer(dt, self._schedule_do, (timer_obj, now, interval, fn,
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_now = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":431
 *             return
 *         now = _time()
 *         dt = interval - (now - _runat - interval)             # <<<<<<<<<<<<<<
 *         timer = Timer(dt, self._schedule_do, (timer_obj, now, interval, fn,
 *                                               done_callback, args, kwargs))
 */
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_now, __pyx_v__runat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_v_interval); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_interval, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dt = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":432
 *         now = _time()
 *         dt = interval - (now - _runat - interval)
 *         timer = Timer(dt, self._schedule_do, (timer_obj, now, interval, fn,             # <<<<<<<<<<<<<<
 *                                               done_callback, args, kwargs))
 *         timer_obj.old_timer_id = timer_obj.timer_id
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_schedule_do); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "fastthreadpool/fastthreadpool.pyx":433
 *         dt = interval - (now - _runat - interval)
 *         timer = Timer(dt, self._schedule_do, (timer_obj, now, interval, fn,
 *                                               done_callback, args, kwargs))             # <<<<<<<<<<<<<<
 *         timer_obj.old_timer_id = timer_obj.timer_id
 *         timer_obj.timer_id = timer
 */
  __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_timer_obj);
  __Pyx_GIVEREF(__pyx_v_timer_obj);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_timer_obj);
  __Pyx_INCREF(__pyx_v_now);
  __Pyx_GIVEREF(__pyx_v_now);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_now);
  __Pyx_INCREF(__pyx_v_interval);
  __Pyx_GIVEREF(__pyx_v_interval);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_interval);
  __Pyx_INCREF(__pyx_v_fn);
  __Pyx_GIVEREF(__pyx_v_fn);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_fn);
  __Pyx_INCREF(__pyx_v_done_callback);
  __Pyx_GIVEREF(__pyx_v_done_callback);
  PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_done_callback);
  __Pyx_INCREF(__pyx_v_args);
  __Pyx_GIVEREF(__pyx_v_args);
  PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_args);
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_v_kwargs);

  /* "fastthreadpool/fastthreadpool.pyx":432
 *         now = _time()
 *         dt = interval - (now - _runat - interval)
 *         timer = Timer(dt, self._schedule_do, (timer_obj, now, interval, fn,             # <<<<<<<<<<<<<<
 *                                               done_callback, args, kwargs))
 *         timer_obj.old_timer_id = timer_obj.timer_id
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_dt);
  __Pyx_GIVEREF(__pyx_v_dt);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_dt);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Timer, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_timer = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":434
 *         timer = Timer(dt, self._schedule_do, (timer_obj, now, interval, fn,
 *                                               done_callback, args, kwargs))
 *         timer_obj.old_timer_id = timer_obj.timer_id             # <<<<<<<<<<<<<<
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer_obj, __pyx_n_s_timer_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_timer_obj, __pyx_n_s_old_timer_id, __pyx_t_2) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":435
 *                                               done_callback, args, kwargs))
 *         timer_obj.old_timer_id = timer_obj.timer_id
 *         timer_obj.timer_id = timer             # <<<<<<<<<<<<<<
 *         self._scheduled.append(timer)
 *         timer.start()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_timer_obj, __pyx_n_s_timer_id, __pyx_v_timer) < 0) __PYX_ERR(0, 435, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":436
 *         timer_obj.old_timer_id = timer_obj.timer_id
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)             # <<<<<<<<<<<<<<
 *         timer.start()
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_Append(__pyx_v_self->_scheduled, __pyx_v_timer); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 436, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":437
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)
 *         timer.start()             # <<<<<<<<<<<<<<
 * 
 *     cdef object _schedule(self, interval, fn, done_callback, args, kwargs):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":425
 *         return self._delayed
 * 
 *     def _schedule_do(self, timer_obj, _runat, interval, fn, done_callback, args, kwargs):             # <<<<<<<<<<<<<<
 *         self._submit(fn, done_callback, args, kwargs, True)
 *         self._scheduled.remove(timer_obj.timer_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._schedule_do", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_now);
  __Pyx_XDECREF(__pyx_v_dt);
  __Pyx_XDECREF(__pyx_v_timer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":439
 *         timer.start()
 * 
 *     cdef object _schedule(self, interval, fn, done_callback, args, kwargs):             # <<<<<<<<<<<<<<
 *     #p def _schedule(self, interval, fn, done_callback, args, kwargs):
 *         timer_obj = TimerObj()
 */

static PyObject *__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__schedule(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_timer_obj = NULL;
  PyObject *__pyx_v_timer = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("_schedule", 0);

  /* "fastthreadpool/fastthreadpool.pyx":441
 *     cdef object _schedule(self, interval, fn, done_callback, args, kwargs):
 *     #p def _schedule(self, interval, fn, done_callback, args, kwargs):
 *         timer_obj = TimerObj()             # <<<<<<<<<<<<<<
 *         timer = Timer(interval, self._schedule_do, (timer_obj, _time(), interval,
 *                                                     fn, done_callback, args, kwargs))
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TimerObj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_timer_obj = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":442
 *     #p def _schedule(self, interval, fn, done_callback, args, kwargs):
 *         timer_obj = TimerObj()
 *         timer = Timer(interval, self._schedule_do, (timer_obj, _time(), interval,             # <<<<<<<<<<<<<<
 *                                                     fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_schedule_do); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "fastthreadpool/fastthreadpool.pyx":443
 *         timer_obj = TimerObj()
 *         timer = Timer(interval, self._schedule_do, (timer_obj, _time(), interval,
 *                                                     fn, done_callback, args, kwargs))             # <<<<<<<<<<<<<<
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)
 */
  __pyx_t_3 = PyTuple_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_timer_obj);
  __Pyx_GIVEREF(__pyx_v_timer_obj);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_timer_obj);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_interval);
  __Pyx_GIVEREF(__pyx_v_interval);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_interval);
  __Pyx_INCREF(__pyx_v_fn);
  __Pyx_GIVEREF(__pyx_v_fn);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_fn);
  __Pyx_INCREF(__pyx_v_done_callback);
  __Pyx_GIVEREF(__pyx_v_done_callback);
  PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_done_callback);
  __Pyx_INCREF(__pyx_v_args);
  __Pyx_GIVEREF(__pyx_v_args);
  PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_args);
  __Pyx_INCREF(__pyx_v_kwargs);
  __Pyx_GIVEREF(__pyx_v_kwargs);
  PyTuple_SET_ITEM(__pyx_t_3, 6, __pyx_v_kwargs);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":442
 *     #p def _schedule(self, interval, fn, done_callback, args, kwargs):
 *         timer_obj = TimerObj()
 *         timer = Timer(interval, self._schedule_do, (timer_obj, _time(), interval,             # <<<<<<<<<<<<<<
 *                                                     fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_interval);
  __Pyx_GIVEREF(__pyx_v_interval);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_interval);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Timer, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_timer = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":444
 *         timer = Timer(interval, self._schedule_do, (timer_obj, _time(), interval,
 *                                                     fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer             # <<<<<<<<<<<<<<
 *         self._scheduled.append(timer)
 *         timer.start()
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_timer_obj, __pyx_n_s_timer_id, __pyx_v_timer) < 0) __PYX_ERR(0, 444, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":445
 *                                                     fn, done_callback, args, kwargs))
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)             # <<<<<<<<<<<<<<
 *         timer.start()
 *         return timer_obj
 */
  __pyx_t_4 = __Pyx_PyObject_Append(__pyx_v_self->_scheduled, __pyx_v_timer); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":446
 *         timer_obj.timer_id = timer
 *         self._scheduled.append(timer)
 *         timer.start()             # <<<<<<<<<<<<<<
 *         return timer_obj
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":447
 *         self._scheduled.append(timer)
 *         timer.start()
 *         return timer_obj             # <<<<<<<<<<<<<<
 * 
 *     def schedule(self, interval, fn, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_timer_obj);
  __pyx_r = __pyx_v_timer_obj;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":439
 *         timer.start()
 * 
 *     cdef object _schedule(self, interval, fn, done_callback, args, kwargs):             # <<<<<<<<<<<<<<
 *     #p def _schedule(self, interval, fn, done_callback, args, kwargs):
 *         timer_obj = TimerObj()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._schedule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_timer_obj);
  __Pyx_XDECREF(__pyx_v_timer);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":449
 *         return timer_obj
 * 
 *     def schedule(self, interval, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._schedule(interval, fn, True, args, kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_35schedule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_35schedule(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_interval = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("schedule (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_interval,&__pyx_n_s_fn,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("schedule", 0, 2, 2, 1); __PYX_ERR(0, 449, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "schedule") < 0)) __PYX_ERR(0, 449, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_interval = values[0];
    __pyx_v_fn = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("schedule", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.schedule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_34schedule(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_interval, __pyx_v_fn, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_34schedule(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("schedule", 0);

  /* "fastthreadpool/fastthreadpool.pyx":450
 * 
 *     def schedule(self, interval, fn, *args, **kwargs):
 *         return self._schedule(interval, fn, True, args, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def schedule_done(self, interval, fn, done_callback, *args, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_schedule(__pyx_v_self, __pyx_v_interval, __pyx_v_fn, Py_True, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":449
 *         return timer_obj
 * 
 *     def schedule(self, interval, fn, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._schedule(interval, fn, True, args, kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.schedule", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":452
 *         return self._schedule(interval, fn, True, args, kwargs)
 * 
 *     def schedule_done(self, interval, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._schedule(interval, fn, done_callback, args, kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_37schedule_done(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_37schedule_done(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_interval = 0;
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("schedule_done (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 3) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 3, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_interval,&__pyx_n_s_fn,&__pyx_n_s_done_callback,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_interval)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("schedule_done", 0, 3, 3, 1); __PYX_ERR(0, 452, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("schedule_done", 0, 3, 3, 2); __PYX_ERR(0, 452, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 3) ? pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "schedule_done") < 0)) __PYX_ERR(0, 452, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_interval = values[0];
    __pyx_v_fn = values[1];
    __pyx_v_done_callback = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("schedule_done", 0, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 452, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.schedule_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_36schedule_done(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_interval, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_36schedule_done(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_interval, PyObject *__pyx_v_fn, PyObject *__pyx_v_done_callback, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("schedule_done", 0);

  /* "fastthreadpool/fastthreadpool.pyx":453
 * 
 *     def schedule_done(self, interval, fn, done_callback, *args, **kwargs):
 *         return self._schedule(interval, fn, done_callback, args, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_schedule(__pyx_v_self, __pyx_v_interval, __pyx_v_fn, __pyx_v_done_callback, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":452
 *         return self._schedule(interval, fn, True, args, kwargs)
 * 
 *     def schedule_done(self, interval, fn, done_callback, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._schedule(interval, fn, done_callback, args, kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.schedule_done", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":456
 * 
 *     @property
 *     def scheduled(self):             # <<<<<<<<<<<<<<
 *         return self._scheduled
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_9scheduled_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_9scheduled_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_9scheduled___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_9scheduled___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":457
 *     @property
 *     def scheduled(self):
 *         return self._scheduled             # <<<<<<<<<<<<<<
 * 
 *     def as_completed(self, wait=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_scheduled);
  __pyx_r = __pyx_v_self->_scheduled;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":456
 * 
 *     @property
 *     def scheduled(self):             # <<<<<<<<<<<<<<
 *         return self._scheduled
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14fastthreadpool_14fastthreadpool_4Pool_40generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "fastthreadpool/fastthreadpool.pyx":459
 *         return self._scheduled
 * 
 *     def as_completed(self, wait=None):             # <<<<<<<<<<<<<<
 *         cdef float to
 *         cdef object pyto
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_39as_completed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_39as_completed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_wait = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_completed (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_wait,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wait);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "as_completed") < 0)) __PYX_ERR(0, 459, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_wait = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("as_completed", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 459, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.as_completed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_38as_completed(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_wait);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_38as_completed(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_wait) {
  struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_completed", 0);
  __pyx_cur_scope = (struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *)__pyx_tp_new_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed(__pyx_ptype_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 459, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_wait = __pyx_v_wait;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_wait);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_wait);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14fastthreadpool_14fastthreadpool_4Pool_40generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_as_completed, __pyx_n_s_Pool_as_completed, __pyx_n_s_fastthreadpool_fastthreadpool); if (unlikely(!gen)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.as_completed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14fastthreadpool_14fastthreadpool_4Pool_40generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *__pyx_cur_scope = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  float __pyx_t_7;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_completed", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L17_resume_from_yield;
    case 2: goto __pyx_L20_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 459, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":463
 *         cdef object pyto
 *         cdef bint do_sleep
 *         if self._thr_done is not None:             # <<<<<<<<<<<<<<
 *             raise PoolCallback("Using done_callback!")
 *         if self._thr_failed is not None:
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_self->_thr_done != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "fastthreadpool/fastthreadpool.pyx":464
 *         cdef bint do_sleep
 *         if self._thr_done is not None:
 *             raise PoolCallback("Using done_callback!")             # <<<<<<<<<<<<<<
 *         if self._thr_failed is not None:
 *             raise PoolCallback("Using failed_callback!")
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_PoolCallback); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 464, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":463
 *         cdef object pyto
 *         cdef bint do_sleep
 *         if self._thr_done is not None:             # <<<<<<<<<<<<<<
 *             raise PoolCallback("Using done_callback!")
 *         if self._thr_failed is not None:
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":465
 *         if self._thr_done is not None:
 *             raise PoolCallback("Using done_callback!")
 *         if self._thr_failed is not None:             # <<<<<<<<<<<<<<
 *             raise PoolCallback("Using failed_callback!")
 *         if wait is not False and isinstance(wait, (int, float)):
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->_thr_failed != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "fastthreadpool/fastthreadpool.pyx":466
 *             raise PoolCallback("Using done_callback!")
 *         if self._thr_failed is not None:
 *             raise PoolCallback("Using failed_callback!")             # <<<<<<<<<<<<<<
 *         if wait is not False and isinstance(wait, (int, float)):
 *             pyto = _time() + wait
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_PoolCallback); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 466, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":465
 *         if self._thr_done is not None:
 *             raise PoolCallback("Using done_callback!")
 *         if self._thr_failed is not None:             # <<<<<<<<<<<<<<
 *             raise PoolCallback("Using failed_callback!")
 *         if wait is not False and isinstance(wait, (int, float)):
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":467
 *         if self._thr_failed is not None:
 *             raise PoolCallback("Using failed_callback!")
 *         if wait is not False and isinstance(wait, (int, float)):             # <<<<<<<<<<<<<<
 *             pyto = _time() + wait
 *             to = pyto
 */
  __pyx_t_2 = (__pyx_cur_scope->__pyx_v_wait != Py_False);
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_1 = __pyx_t_5;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_2 = PyInt_Check(__pyx_cur_scope->__pyx_v_wait); 
  __pyx_t_6 = (__pyx_t_2 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_6 = PyFloat_Check(__pyx_cur_scope->__pyx_v_wait); 
  __pyx_t_2 = (__pyx_t_6 != 0);
  __pyx_t_5 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_5 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":468
 *             raise PoolCallback("Using failed_callback!")
 *         if wait is not False and isinstance(wait, (int, float)):
 *             pyto = _time() + wait             # <<<<<<<<<<<<<<
 *             to = pyto
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_cur_scope->__pyx_v_wait); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_cur_scope->__pyx_v_pyto = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":469
 *         if wait is not False and isinstance(wait, (int, float)):
 *             pyto = _time() + wait
 *             to = pyto             # <<<<<<<<<<<<<<
 *         else:
 *             to = pyto = 0.0
 */
    __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_cur_scope->__pyx_v_pyto); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_to = __pyx_t_7;

    /* "fastthreadpool/fastthreadpool.pyx":467
 *         if self._thr_failed is not None:
 *             raise PoolCallback("Using failed_callback!")
 *         if wait is not False and isinstance(wait, (int, float)):             # <<<<<<<<<<<<<<
 *             pyto = _time() + wait
 *             to = pyto
 */
    goto __pyx_L6;
  }

  /* "fastthreadpool/fastthreadpool.pyx":471
 *             to = pyto
 *         else:
 *             to = pyto = 0.0             # <<<<<<<<<<<<<<
 *         done = self._done
 *         failed = self._failed
 */
  /*else*/ {
    __pyx_cur_scope->__pyx_v_to = 0.0;
    __Pyx_INCREF(__pyx_float_0_0);
    __Pyx_GIVEREF(__pyx_float_0_0);
    __pyx_cur_scope->__pyx_v_pyto = __pyx_float_0_0;
  }
  __pyx_L6:;

  /* "fastthreadpool/fastthreadpool.pyx":472
 *         else:
 *             to = pyto = 0.0
 *         done = self._done             # <<<<<<<<<<<<<<
 *         failed = self._failed
 *         done_popleft = done.popleft
 */
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->_done;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_done = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":473
 *             to = pyto = 0.0
 *         done = self._done
 *         failed = self._failed             # <<<<<<<<<<<<<<
 *         done_popleft = done.popleft
 *         failed_popleft = failed.popleft
 */
  __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->_failed;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_failed = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":474
 *         done = self._done
 *         failed = self._failed
 *         done_popleft = done.popleft             # <<<<<<<<<<<<<<
 *         failed_popleft = failed.popleft
 *         while self._busy_cnt or self._jobs:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_done, __pyx_n_s_popleft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_done_popleft = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":475
 *         failed = self._failed
 *         done_popleft = done.popleft
 *         failed_popleft = failed.popleft             # <<<<<<<<<<<<<<
 *         while self._busy_cnt or self._jobs:
 *             do_sleep = True
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_failed, __pyx_n_s_popleft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_cur_scope->__pyx_v_failed_popleft = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":476
 *         done_popleft = done.popleft
 *         failed_popleft = failed.popleft
 *         while self._busy_cnt or self._jobs:             # <<<<<<<<<<<<<<
 *             do_sleep = True
 *             while done:
 */
  while (1) {
    __pyx_t_2 = (__pyx_cur_scope->__pyx_v_self->_busy_cnt != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_self->_jobs); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 476, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_2;
    __pyx_L13_bool_binop_done:;
    if (!__pyx_t_1) break;

    /* "fastthreadpool/fastthreadpool.pyx":477
 *         failed_popleft = failed.popleft
 *         while self._busy_cnt or self._jobs:
 *             do_sleep = True             # <<<<<<<<<<<<<<
 *             while done:
 *                 yield done_popleft()
 */
    __pyx_cur_scope->__pyx_v_do_sleep = 1;

    /* "fastthreadpool/fastthreadpool.pyx":478
 *         while self._busy_cnt or self._jobs:
 *             do_sleep = True
 *             while done:             # <<<<<<<<<<<<<<
 *                 yield done_popleft()
 *                 do_sleep = False
 */
    while (1) {
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_done); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 478, __pyx_L1_error)
      if (!__pyx_t_1) break;

      /* "fastthreadpool/fastthreadpool.pyx":479
 *             do_sleep = True
 *             while done:
 *                 yield done_popleft()             # <<<<<<<<<<<<<<
 *                 do_sleep = False
 *             while failed:
 */
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_cur_scope->__pyx_v_done_popleft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L17_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 479, __pyx_L1_error)

      /* "fastthreadpool/fastthreadpool.pyx":480
 *             while done:
 *                 yield done_popleft()
 *                 do_sleep = False             # <<<<<<<<<<<<<<
 *             while failed:
 *                 yield failed_popleft()
 */
      __pyx_cur_scope->__pyx_v_do_sleep = 0;
    }

    /* "fastthreadpool/fastthreadpool.pyx":481
 *                 yield done_popleft()
 *                 do_sleep = False
 *             while failed:             # <<<<<<<<<<<<<<
 *                 yield failed_popleft()
 *                 do_sleep = False
 */
    while (1) {
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_failed); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 481, __pyx_L1_error)
      if (!__pyx_t_1) break;

      /* "fastthreadpool/fastthreadpool.pyx":482
 *                 do_sleep = False
 *             while failed:
 *                 yield failed_popleft()             # <<<<<<<<<<<<<<
 *                 do_sleep = False
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):
 */
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_cur_scope->__pyx_v_failed_popleft); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 482, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L20_resume_from_yield:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 482, __pyx_L1_error)

      /* "fastthreadpool/fastthreadpool.pyx":483
 *             while failed:
 *                 yield failed_popleft()
 *                 do_sleep = False             # <<<<<<<<<<<<<<
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):
 *                 return
 */
      __pyx_cur_scope->__pyx_v_do_sleep = 0;
    }

    /* "fastthreadpool/fastthreadpool.pyx":484
 *                 yield failed_popleft()
 *                 do_sleep = False
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):             # <<<<<<<<<<<<<<
 *                 return
 *             if do_sleep:
 */
    __pyx_t_2 = (__pyx_cur_scope->__pyx_v_wait == Py_False);
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_5 = ((__pyx_cur_scope->__pyx_v_to > 0.0) != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_cur_scope->__pyx_v_pyto, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_5;
    __pyx_L22_bool_binop_done:;
    if (__pyx_t_1) {

      /* "fastthreadpool/fastthreadpool.pyx":485
 *                 do_sleep = False
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):
 *                 return             # <<<<<<<<<<<<<<
 *             if do_sleep:
 *                 sleep(0.01)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = NULL;
      goto __pyx_L0;

      /* "fastthreadpool/fastthreadpool.pyx":484
 *                 yield failed_popleft()
 *                 do_sleep = False
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):             # <<<<<<<<<<<<<<
 *                 return
 *             if do_sleep:
 */
    }

    /* "fastthreadpool/fastthreadpool.pyx":486
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):
 *                 return
 *             if do_sleep:             # <<<<<<<<<<<<<<
 *                 sleep(0.01)
 * 
 */
    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_do_sleep != 0);
    if (__pyx_t_1) {

      /* "fastthreadpool/fastthreadpool.pyx":487
 *                 return
 *             if do_sleep:
 *                 sleep(0.01)             # <<<<<<<<<<<<<<
 * 
 *     def _map_child(self, fn, itr, done_callback):
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_sleep, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":486
 *             if wait is False or ((to > 0.0) and (_time() > pyto)):
 *                 return
 *             if do_sleep:             # <<<<<<<<<<<<<<
 *                 sleep(0.01)
 * 
 */
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "fastthreadpool/fastthreadpool.pyx":459
 *         return self._scheduled
 * 
 *     def as_completed(self, wait=None):             # <<<<<<<<<<<<<<
 *         cdef float to
 *         cdef object pyto
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("as_completed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":489
 *                 sleep(0.01)
 * 
 *     def _map_child(self, fn, itr, done_callback):             # <<<<<<<<<<<<<<
 *     #p def _map_child(self, fn, itr, done_callback):
 *         cdef bint append_done
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_42_map_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_42_map_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_itr = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_map_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,&__pyx_n_s_itr,&__pyx_n_s_done_callback,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_map_child", 1, 3, 3, 1); __PYX_ERR(0, 489, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_map_child", 1, 3, 3, 2); __PYX_ERR(0, 489, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_map_child") < 0)) __PYX_ERR(0, 489, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fn = values[0];
    __pyx_v_itr = values[1];
    __pyx_v_done_callback = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_map_child", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 489, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._map_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_41_map_child(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_itr, __pyx_v_done_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_41_map_child(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_itr, PyObject *__pyx_v_done_callback) {
  PyObject *__pyx_v__done_append = NULL;
  PyObject *__pyx_v__failed_append = NULL;
  PyObject *__pyx_v_args = NULL;
  PyObject *__pyx_v_exc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  char const *__pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  char const *__pyx_t_22;
  char const *__pyx_t_23;
  __Pyx_RefNannySetupContext("_map_child", 0);

  /* "fastthreadpool/fastthreadpool.pyx":492
 *     #p def _map_child(self, fn, itr, done_callback):
 *         cdef bint append_done
 *         self._busy_lock_inc()             # <<<<<<<<<<<<<<
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_inc(__pyx_v_self);

  /* "fastthreadpool/fastthreadpool.pyx":493
 *         cdef bint append_done
 *         self._busy_lock_inc()
 *         _done_append = self._done.append             # <<<<<<<<<<<<<<
 *         _failed_append = self._failed.append
 *         if done_callback is False:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_done, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__done_append = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":494
 *         self._busy_lock_inc()
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append             # <<<<<<<<<<<<<<
 *         if done_callback is False:
 *             for args in itr:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_failed, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__failed_append = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":495
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append
 *         if done_callback is False:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  __pyx_t_2 = (__pyx_v_done_callback == Py_False);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "fastthreadpool/fastthreadpool.pyx":496
 *         _failed_append = self._failed.append
 *         if done_callback is False:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    if (likely(PyList_CheckExact(__pyx_v_itr)) || PyTuple_CheckExact(__pyx_v_itr)) {
      __pyx_t_1 = __pyx_v_itr; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 496, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 496, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":497
 *         if done_callback is False:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      __pyx_t_3 = (__pyx_v_self->_shutdown_children != 0);
      if (__pyx_t_3) {

        /* "fastthreadpool/fastthreadpool.pyx":498
 *             for args in itr:
 *                 if self._shutdown_children:
 *                     break             # <<<<<<<<<<<<<<
 *                 try:
 *                     fn(args)
 */
        goto __pyx_L5_break;

        /* "fastthreadpool/fastthreadpool.pyx":497
 *         if done_callback is False:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":499
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     fn(args)
 *                 except Exception as exc:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":500
 *                     break
 *                 try:
 *                     fn(args)             # <<<<<<<<<<<<<<
 *                 except Exception as exc:
 *                     _failed_append(exc)
 */
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_v_fn, __pyx_v_args); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 500, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":499
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     fn(args)
 *                 except Exception as exc:
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":501
 *                 try:
 *                     fn(args)
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
        __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_10) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._map_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_11, &__pyx_t_12) < 0) __PYX_ERR(0, 501, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __pyx_v_exc = __pyx_t_11;
          /*try:*/ {

            /* "fastthreadpool/fastthreadpool.pyx":502
 *                     fn(args)
 *                 except Exception as exc:
 *                     _failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         elif done_callback is True:
 */
            __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_v__failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 502, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":503
 *                 except Exception as exc:
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         elif done_callback is True:
 *             for args in itr:
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }

          /* "fastthreadpool/fastthreadpool.pyx":501
 *                 try:
 *                     fn(args)
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
              goto __pyx_L21;
            }
            __pyx_L20_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_16);
              __Pyx_XGOTREF(__pyx_t_17);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_15 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_exc);
                __pyx_v_exc = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_XGIVEREF(__pyx_t_21);
                __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
              }
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
              __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
              __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_15;
              goto __pyx_L9_except_error;
            }
            __pyx_L21:;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L8_exception_handled;
        }
        goto __pyx_L9_except_error;
        __pyx_L9_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":499
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     fn(args)
 *                 except Exception as exc:
 */
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":496
 *         _failed_append = self._failed.append
 *         if done_callback is False:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":495
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append
 *         if done_callback is False:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":504
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif done_callback is True:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  __pyx_t_3 = (__pyx_v_done_callback == Py_True);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":505
 *                     self._failed_cnt.release()
 *         elif done_callback is True:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    if (likely(PyList_CheckExact(__pyx_v_itr)) || PyTuple_CheckExact(__pyx_v_itr)) {
      __pyx_t_1 = __pyx_v_itr; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_12 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_12); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 505, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 505, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_12); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 505, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 505, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        }
      } else {
        __pyx_t_12 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_12)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 505, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_12);
      }
      __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":506
 *         elif done_callback is True:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      __pyx_t_2 = (__pyx_v_self->_shutdown_children != 0);
      if (__pyx_t_2) {

        /* "fastthreadpool/fastthreadpool.pyx":507
 *             for args in itr:
 *                 if self._shutdown_children:
 *                     break             # <<<<<<<<<<<<<<
 *                 try:
 *                     _done_append(fn(args))
 */
        goto __pyx_L27_break;

        /* "fastthreadpool/fastthreadpool.pyx":506
 *         elif done_callback is True:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":508
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     _done_append(fn(args))
 *                     self._done_cnt.release()
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":509
 *                     break
 *                 try:
 *                     _done_append(fn(args))             # <<<<<<<<<<<<<<
 *                     self._done_cnt.release()
 *                 except Exception as exc:
 */
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_v_fn, __pyx_v_args); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 509, __pyx_L29_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_v__done_append, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 509, __pyx_L29_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":510
 *                 try:
 *                     _done_append(fn(args))
 *                     self._done_cnt.release()             # <<<<<<<<<<<<<<
 *                 except Exception as exc:
 *                     _failed_append(exc)
 */
          ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_done_cnt->__pyx_vtab)->release(__pyx_v_self->_done_cnt, 0);

          /* "fastthreadpool/fastthreadpool.pyx":508
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     _done_append(fn(args))
 *                     self._done_cnt.release()
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L36_try_end;
        __pyx_L29_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":511
 *                     _done_append(fn(args))
 *                     self._done_cnt.release()
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
        __pyx_t_14 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_14) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._map_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_12, &__pyx_t_6) < 0) __PYX_ERR(0, 511, __pyx_L31_except_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_12);
          __pyx_v_exc = __pyx_t_12;
          /*try:*/ {

            /* "fastthreadpool/fastthreadpool.pyx":512
 *                     self._done_cnt.release()
 *                 except Exception as exc:
 *                     _failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):
 */
            __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_v__failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 512, __pyx_L42_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":513
 *                 except Exception as exc:
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         elif callable(done_callback):
 *             for args in itr:
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }

          /* "fastthreadpool/fastthreadpool.pyx":511
 *                     _done_append(fn(args))
 *                     self._done_cnt.release()
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
              goto __pyx_L43;
            }
            __pyx_L42_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19) < 0)) __Pyx_ErrFetch(&__pyx_t_21, &__pyx_t_20, &__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_17);
              __Pyx_XGOTREF(__pyx_t_16);
              __pyx_t_14 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_22 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_exc);
                __pyx_v_exc = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_XGIVEREF(__pyx_t_17);
                __Pyx_XGIVEREF(__pyx_t_16);
                __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_17, __pyx_t_16);
              }
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_ErrRestore(__pyx_t_21, __pyx_t_20, __pyx_t_19);
              __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0; __pyx_t_17 = 0; __pyx_t_16 = 0;
              __pyx_lineno = __pyx_t_14; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_22;
              goto __pyx_L31_except_error;
            }
            __pyx_L43:;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L30_exception_handled;
        }
        goto __pyx_L31_except_error;
        __pyx_L31_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":508
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     _done_append(fn(args))
 *                     self._done_cnt.release()
 */
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L30_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        __pyx_L36_try_end:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":505
 *                     self._failed_cnt.release()
 *         elif done_callback is True:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    }
    __pyx_L27_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":504
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif done_callback is True:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":514
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  __pyx_t_2 = __Pyx_PyCallable_Check(__pyx_v_done_callback); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "fastthreadpool/fastthreadpool.pyx":515
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    if (likely(PyList_CheckExact(__pyx_v_itr)) || PyTuple_CheckExact(__pyx_v_itr)) {
      __pyx_t_1 = __pyx_v_itr; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 515, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 515, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 515, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 515, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":516
 *         elif callable(done_callback):
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      __pyx_t_3 = (__pyx_v_self->_shutdown_children != 0);
      if (__pyx_t_3) {

        /* "fastthreadpool/fastthreadpool.pyx":517
 *             for args in itr:
 *                 if self._shutdown_children:
 *                     break             # <<<<<<<<<<<<<<
 *                 try:
 *                     done_callback(fn(args))
 */
        goto __pyx_L49_break;

        /* "fastthreadpool/fastthreadpool.pyx":516
 *         elif callable(done_callback):
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":518
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     done_callback(fn(args))
 *                 except Exception as exc:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":519
 *                     break
 *                 try:
 *                     done_callback(fn(args))             # <<<<<<<<<<<<<<
 *                 except Exception as exc:
 *                     _failed_append(exc)
 */
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_v_fn, __pyx_v_args); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 519, __pyx_L51_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_v_done_callback, __pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 519, __pyx_L51_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":518
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     done_callback(fn(args))
 *                 except Exception as exc:
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L58_try_end;
        __pyx_L51_error:;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":520
 *                 try:
 *                     done_callback(fn(args))
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
        __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_10) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._map_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_6, &__pyx_t_11) < 0) __PYX_ERR(0, 520, __pyx_L53_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_6);
          __pyx_v_exc = __pyx_t_6;
          /*try:*/ {

            /* "fastthreadpool/fastthreadpool.pyx":521
 *                     done_callback(fn(args))
 *                 except Exception as exc:
 *                     _failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         self._busy_lock_dec()
 */
            __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_v__failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 521, __pyx_L64_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":522
 *                 except Exception as exc:
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         self._busy_lock_dec()
 * 
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }

          /* "fastthreadpool/fastthreadpool.pyx":520
 *                 try:
 *                     done_callback(fn(args))
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
              goto __pyx_L65;
            }
            __pyx_L64_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18) < 0)) __Pyx_ErrFetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_16);
              __Pyx_XGOTREF(__pyx_t_17);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __pyx_t_10 = __pyx_lineno; __pyx_t_14 = __pyx_clineno; __pyx_t_23 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_exc);
                __pyx_v_exc = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_XGIVEREF(__pyx_t_21);
                __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
              }
              __Pyx_XGIVEREF(__pyx_t_16);
              __Pyx_XGIVEREF(__pyx_t_17);
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_ErrRestore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
              __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0;
              __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_14; __pyx_filename = __pyx_t_23;
              goto __pyx_L53_except_error;
            }
            __pyx_L65:;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L52_exception_handled;
        }
        goto __pyx_L53_except_error;
        __pyx_L53_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":518
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     done_callback(fn(args))
 *                 except Exception as exc:
 */
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L52_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L58_try_end:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":515
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    }
    __pyx_L49_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":514
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  }
  __pyx_L3:;

  /* "fastthreadpool/fastthreadpool.pyx":523
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         self._busy_lock_dec()             # <<<<<<<<<<<<<<
 * 
 *     def _imap_child(self, fn, itr, done_callback):
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_dec(__pyx_v_self);

  /* "fastthreadpool/fastthreadpool.pyx":489
 *                 sleep(0.01)
 * 
 *     def _map_child(self, fn, itr, done_callback):             # <<<<<<<<<<<<<<
 *     #p def _map_child(self, fn, itr, done_callback):
 *         cdef bint append_done
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._map_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__done_append);
  __Pyx_XDECREF(__pyx_v__failed_append);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_exc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":525
 *         self._busy_lock_dec()
 * 
 *     def _imap_child(self, fn, itr, done_callback):             # <<<<<<<<<<<<<<
 *     #p def _imap_child(self, fn, itr, done_callback):
 *         cdef bint append_done
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_44_imap_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_44_imap_child(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_itr = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_imap_child (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,&__pyx_n_s_itr,&__pyx_n_s_done_callback,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_imap_child", 1, 3, 3, 1); __PYX_ERR(0, 525, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_imap_child", 1, 3, 3, 2); __PYX_ERR(0, 525, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_imap_child") < 0)) __PYX_ERR(0, 525, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_fn = values[0];
    __pyx_v_itr = values[1];
    __pyx_v_done_callback = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_imap_child", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 525, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._imap_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_43_imap_child(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_itr, __pyx_v_done_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_43_imap_child(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_itr, PyObject *__pyx_v_done_callback) {
  PyObject *__pyx_v__done_append = NULL;
  PyObject *__pyx_v__failed_append = NULL;
  PyObject *__pyx_v_args = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_exc = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  char const *__pyx_t_24;
  char const *__pyx_t_25;
  __Pyx_RefNannySetupContext("_imap_child", 0);

  /* "fastthreadpool/fastthreadpool.pyx":528
 *     #p def _imap_child(self, fn, itr, done_callback):
 *         cdef bint append_done
 *         self._busy_lock_inc()             # <<<<<<<<<<<<<<
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_inc(__pyx_v_self);

  /* "fastthreadpool/fastthreadpool.pyx":529
 *         cdef bint append_done
 *         self._busy_lock_inc()
 *         _done_append = self._done.append             # <<<<<<<<<<<<<<
 *         _failed_append = self._failed.append
 *         if done_callback is False:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_done, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__done_append = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":530
 *         self._busy_lock_inc()
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append             # <<<<<<<<<<<<<<
 *         if done_callback is False:
 *             for args in itr:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_failed, __pyx_n_s_append); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__failed_append = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":531
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append
 *         if done_callback is False:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  __pyx_t_2 = (__pyx_v_done_callback == Py_False);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "fastthreadpool/fastthreadpool.pyx":532
 *         _failed_append = self._failed.append
 *         if done_callback is False:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    if (likely(PyList_CheckExact(__pyx_v_itr)) || PyTuple_CheckExact(__pyx_v_itr)) {
      __pyx_t_1 = __pyx_v_itr; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 532, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 532, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 532, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":533
 *         if done_callback is False:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      __pyx_t_3 = (__pyx_v_self->_shutdown_children != 0);
      if (__pyx_t_3) {

        /* "fastthreadpool/fastthreadpool.pyx":534
 *             for args in itr:
 *                 if self._shutdown_children:
 *                     break             # <<<<<<<<<<<<<<
 *                 try:
 *                     for _ in fn(args):
 */
        goto __pyx_L5_break;

        /* "fastthreadpool/fastthreadpool.pyx":533
 *         if done_callback is False:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":535
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for _ in fn(args):
 *                         pass
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":536
 *                     break
 *                 try:
 *                     for _ in fn(args):             # <<<<<<<<<<<<<<
 *                         pass
 *                 except Exception as exc:
 */
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_v_fn, __pyx_v_args); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
            __pyx_t_10 = __pyx_t_6; __Pyx_INCREF(__pyx_t_10); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
          } else {
            __pyx_t_11 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 536, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 536, __pyx_L7_error)
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          for (;;) {
            if (likely(!__pyx_t_12)) {
              if (likely(PyList_CheckExact(__pyx_t_10))) {
                if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_10)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_6 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 536, __pyx_L7_error)
                #else
                __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_6);
                #endif
              } else {
                if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_6); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 536, __pyx_L7_error)
                #else
                __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_6);
                #endif
              }
            } else {
              __pyx_t_6 = __pyx_t_12(__pyx_t_10);
              if (unlikely(!__pyx_t_6)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 536, __pyx_L7_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_6);
            }
            __Pyx_XDECREF_SET(__pyx_v__, __pyx_t_6);
            __pyx_t_6 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":535
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for _ in fn(args):
 *                         pass
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L14_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":538
 *                     for _ in fn(args):
 *                         pass
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
        __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_13) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._imap_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_6, &__pyx_t_14) < 0) __PYX_ERR(0, 538, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_6);
          __pyx_v_exc = __pyx_t_6;
          /*try:*/ {

            /* "fastthreadpool/fastthreadpool.pyx":539
 *                         pass
 *                 except Exception as exc:
 *                     _failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         elif done_callback is True:
 */
            __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_v__failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 539, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":540
 *                 except Exception as exc:
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         elif done_callback is True:
 *             for args in itr:
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }

          /* "fastthreadpool/fastthreadpool.pyx":538
 *                     for _ in fn(args):
 *                         pass
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
              goto __pyx_L23;
            }
            __pyx_L22_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_22);
              __Pyx_XGOTREF(__pyx_t_23);
              __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_exc);
                __pyx_v_exc = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_21);
                __Pyx_XGIVEREF(__pyx_t_22);
                __Pyx_XGIVEREF(__pyx_t_23);
                __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
              }
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
              __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
              __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
              goto __pyx_L9_except_error;
            }
            __pyx_L23:;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L8_exception_handled;
        }
        goto __pyx_L9_except_error;
        __pyx_L9_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":535
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for _ in fn(args):
 *                         pass
 */
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L14_try_end:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":532
 *         _failed_append = self._failed.append
 *         if done_callback is False:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    }
    __pyx_L5_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":531
 *         _done_append = self._done.append
 *         _failed_append = self._failed.append
 *         if done_callback is False:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":541
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif done_callback is True:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  __pyx_t_3 = (__pyx_v_done_callback == Py_True);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":542
 *                     self._failed_cnt.release()
 *         elif done_callback is True:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    if (likely(PyList_CheckExact(__pyx_v_itr)) || PyTuple_CheckExact(__pyx_v_itr)) {
      __pyx_t_1 = __pyx_v_itr; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_14 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
          #else
          __pyx_t_14 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L1_error)
          #else
          __pyx_t_14 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          #endif
        }
      } else {
        __pyx_t_14 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_14)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 542, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_14);
      }
      __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_14);
      __pyx_t_14 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":543
 *         elif done_callback is True:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      __pyx_t_2 = (__pyx_v_self->_shutdown_children != 0);
      if (__pyx_t_2) {

        /* "fastthreadpool/fastthreadpool.pyx":544
 *             for args in itr:
 *                 if self._shutdown_children:
 *                     break             # <<<<<<<<<<<<<<
 *                 try:
 *                     for result in fn(args):
 */
        goto __pyx_L29_break;

        /* "fastthreadpool/fastthreadpool.pyx":543
 *         elif done_callback is True:
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":545
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for result in fn(args):
 *                         _done_append(result)
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_7);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":546
 *                     break
 *                 try:
 *                     for result in fn(args):             # <<<<<<<<<<<<<<
 *                         _done_append(result)
 *                         self._done_cnt.release()
 */
          __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_v_fn, __pyx_v_args); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 546, __pyx_L31_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
            __pyx_t_6 = __pyx_t_14; __Pyx_INCREF(__pyx_t_6); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
          } else {
            __pyx_t_11 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 546, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_12 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 546, __pyx_L31_error)
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          for (;;) {
            if (likely(!__pyx_t_12)) {
              if (likely(PyList_CheckExact(__pyx_t_6))) {
                if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_14 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_14); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 546, __pyx_L31_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 546, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
              } else {
                if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_11); __Pyx_INCREF(__pyx_t_14); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 546, __pyx_L31_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_6, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 546, __pyx_L31_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
              }
            } else {
              __pyx_t_14 = __pyx_t_12(__pyx_t_6);
              if (unlikely(!__pyx_t_14)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 546, __pyx_L31_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_14);
            }
            __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_14);
            __pyx_t_14 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":547
 *                 try:
 *                     for result in fn(args):
 *                         _done_append(result)             # <<<<<<<<<<<<<<
 *                         self._done_cnt.release()
 *                 except Exception as exc:
 */
            __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_v__done_append, __pyx_v_result); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 547, __pyx_L31_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":548
 *                     for result in fn(args):
 *                         _done_append(result)
 *                         self._done_cnt.release()             # <<<<<<<<<<<<<<
 *                 except Exception as exc:
 *                     _failed_append(exc)
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_done_cnt->__pyx_vtab)->release(__pyx_v_self->_done_cnt, 0);

            /* "fastthreadpool/fastthreadpool.pyx":546
 *                     break
 *                 try:
 *                     for result in fn(args):             # <<<<<<<<<<<<<<
 *                         _done_append(result)
 *                         self._done_cnt.release()
 */
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":545
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for result in fn(args):
 *                         _done_append(result)
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L38_try_end;
        __pyx_L31_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":549
 *                         _done_append(result)
 *                         self._done_cnt.release()
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
        __pyx_t_16 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_16) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._imap_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_14, &__pyx_t_10) < 0) __PYX_ERR(0, 549, __pyx_L33_except_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_14);
          __pyx_v_exc = __pyx_t_14;
          /*try:*/ {

            /* "fastthreadpool/fastthreadpool.pyx":550
 *                         self._done_cnt.release()
 *                 except Exception as exc:
 *                     _failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):
 */
            __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_v__failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 550, __pyx_L46_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":551
 *                 except Exception as exc:
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         elif callable(done_callback):
 *             for args in itr:
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }

          /* "fastthreadpool/fastthreadpool.pyx":549
 *                         _done_append(result)
 *                         self._done_cnt.release()
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
              goto __pyx_L47;
            }
            __pyx_L46_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_20, &__pyx_t_19, &__pyx_t_18);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_23, &__pyx_t_22, &__pyx_t_21) < 0)) __Pyx_ErrFetch(&__pyx_t_23, &__pyx_t_22, &__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_23);
              __Pyx_XGOTREF(__pyx_t_22);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_18);
              __pyx_t_16 = __pyx_lineno; __pyx_t_13 = __pyx_clineno; __pyx_t_24 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_exc);
                __pyx_v_exc = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_20);
                __Pyx_XGIVEREF(__pyx_t_19);
                __Pyx_XGIVEREF(__pyx_t_18);
                __Pyx_ExceptionReset(__pyx_t_20, __pyx_t_19, __pyx_t_18);
              }
              __Pyx_XGIVEREF(__pyx_t_23);
              __Pyx_XGIVEREF(__pyx_t_22);
              __Pyx_XGIVEREF(__pyx_t_21);
              __Pyx_ErrRestore(__pyx_t_23, __pyx_t_22, __pyx_t_21);
              __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0; __pyx_t_19 = 0; __pyx_t_18 = 0;
              __pyx_lineno = __pyx_t_16; __pyx_clineno = __pyx_t_13; __pyx_filename = __pyx_t_24;
              goto __pyx_L33_except_error;
            }
            __pyx_L47:;
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L32_exception_handled;
        }
        goto __pyx_L33_except_error;
        __pyx_L33_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":545
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for result in fn(args):
 *                         _done_append(result)
 */
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        goto __pyx_L1_error;
        __pyx_L32_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        __pyx_L38_try_end:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":542
 *                     self._failed_cnt.release()
 *         elif done_callback is True:
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    }
    __pyx_L29_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":541
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif done_callback is True:             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":552
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  __pyx_t_2 = __Pyx_PyCallable_Check(__pyx_v_done_callback); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 552, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "fastthreadpool/fastthreadpool.pyx":553
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    if (likely(PyList_CheckExact(__pyx_v_itr)) || PyTuple_CheckExact(__pyx_v_itr)) {
      __pyx_t_1 = __pyx_v_itr; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_10); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 553, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 553, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_10); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 553, __pyx_L1_error)
          #else
          __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 553, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          #endif
        }
      } else {
        __pyx_t_10 = __pyx_t_5(__pyx_t_1);
        if (unlikely(!__pyx_t_10)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 553, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_10);
      }
      __Pyx_XDECREF_SET(__pyx_v_args, __pyx_t_10);
      __pyx_t_10 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":554
 *         elif callable(done_callback):
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      __pyx_t_3 = (__pyx_v_self->_shutdown_children != 0);
      if (__pyx_t_3) {

        /* "fastthreadpool/fastthreadpool.pyx":555
 *             for args in itr:
 *                 if self._shutdown_children:
 *                     break             # <<<<<<<<<<<<<<
 *                 try:
 *                     for result in fn(args):
 */
        goto __pyx_L53_break;

        /* "fastthreadpool/fastthreadpool.pyx":554
 *         elif callable(done_callback):
 *             for args in itr:
 *                 if self._shutdown_children:             # <<<<<<<<<<<<<<
 *                     break
 *                 try:
 */
      }

      /* "fastthreadpool/fastthreadpool.pyx":556
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for result in fn(args):
 *                         done_callback(result)
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":557
 *                     break
 *                 try:
 *                     for result in fn(args):             # <<<<<<<<<<<<<<
 *                         done_callback(result)
 *                 except Exception as exc:
 */
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v_fn, __pyx_v_args); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 557, __pyx_L55_error)
          __Pyx_GOTREF(__pyx_t_10);
          if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
            __pyx_t_14 = __pyx_t_10; __Pyx_INCREF(__pyx_t_14); __pyx_t_11 = 0;
            __pyx_t_12 = NULL;
          } else {
            __pyx_t_11 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 557, __pyx_L55_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_12 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 557, __pyx_L55_error)
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          for (;;) {
            if (likely(!__pyx_t_12)) {
              if (likely(PyList_CheckExact(__pyx_t_14))) {
                if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_14)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_10 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_11); __Pyx_INCREF(__pyx_t_10); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 557, __pyx_L55_error)
                #else
                __pyx_t_10 = PySequence_ITEM(__pyx_t_14, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 557, __pyx_L55_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
              } else {
                if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_11); __Pyx_INCREF(__pyx_t_10); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 557, __pyx_L55_error)
                #else
                __pyx_t_10 = PySequence_ITEM(__pyx_t_14, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 557, __pyx_L55_error)
                __Pyx_GOTREF(__pyx_t_10);
                #endif
              }
            } else {
              __pyx_t_10 = __pyx_t_12(__pyx_t_14);
              if (unlikely(!__pyx_t_10)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 557, __pyx_L55_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_10);
            }
            __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_10);
            __pyx_t_10 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":558
 *                 try:
 *                     for result in fn(args):
 *                         done_callback(result)             # <<<<<<<<<<<<<<
 *                 except Exception as exc:
 *                     _failed_append(exc)
 */
            __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_v_done_callback, __pyx_v_result); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 558, __pyx_L55_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":557
 *                     break
 *                 try:
 *                     for result in fn(args):             # <<<<<<<<<<<<<<
 *                         done_callback(result)
 *                 except Exception as exc:
 */
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":556
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for result in fn(args):
 *                         done_callback(result)
 */
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L62_try_end;
        __pyx_L55_error:;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":559
 *                     for result in fn(args):
 *                         done_callback(result)
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
        __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_13) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._imap_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_10, &__pyx_t_6) < 0) __PYX_ERR(0, 559, __pyx_L57_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_10);
          __pyx_v_exc = __pyx_t_10;
          /*try:*/ {

            /* "fastthreadpool/fastthreadpool.pyx":560
 *                         done_callback(result)
 *                 except Exception as exc:
 *                     _failed_append(exc)             # <<<<<<<<<<<<<<
 *                     self._failed_cnt.release()
 *         self._busy_lock_dec()
 */
            __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_v__failed_append, __pyx_v_exc); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 560, __pyx_L70_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

            /* "fastthreadpool/fastthreadpool.pyx":561
 *                 except Exception as exc:
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *         self._busy_lock_dec()
 * 
 */
            ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
          }

          /* "fastthreadpool/fastthreadpool.pyx":559
 *                     for result in fn(args):
 *                         done_callback(result)
 *                 except Exception as exc:             # <<<<<<<<<<<<<<
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 */
          /*finally:*/ {
            /*normal exit:*/{
              __Pyx_DECREF(__pyx_v_exc);
              __pyx_v_exc = NULL;
              goto __pyx_L71;
            }
            __pyx_L70_error:;
            /*exception exit:*/{
              __Pyx_PyThreadState_declare
              __Pyx_PyThreadState_assign
              __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
              __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_21, &__pyx_t_22, &__pyx_t_23);
              if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20) < 0)) __Pyx_ErrFetch(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_18);
              __Pyx_XGOTREF(__pyx_t_19);
              __Pyx_XGOTREF(__pyx_t_20);
              __Pyx_XGOTREF(__pyx_t_21);
              __Pyx_XGOTREF(__pyx_t_22);
              __Pyx_XGOTREF(__pyx_t_23);
              __pyx_t_13 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_25 = __pyx_filename;
              {
                __Pyx_DECREF(__pyx_v_exc);
                __pyx_v_exc = NULL;
              }
              if (PY_MAJOR_VERSION >= 3) {
                __Pyx_XGIVEREF(__pyx_t_21);
                __Pyx_XGIVEREF(__pyx_t_22);
                __Pyx_XGIVEREF(__pyx_t_23);
                __Pyx_ExceptionReset(__pyx_t_21, __pyx_t_22, __pyx_t_23);
              }
              __Pyx_XGIVEREF(__pyx_t_18);
              __Pyx_XGIVEREF(__pyx_t_19);
              __Pyx_XGIVEREF(__pyx_t_20);
              __Pyx_ErrRestore(__pyx_t_18, __pyx_t_19, __pyx_t_20);
              __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0;
              __pyx_lineno = __pyx_t_13; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_25;
              goto __pyx_L57_except_error;
            }
            __pyx_L71:;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          goto __pyx_L56_exception_handled;
        }
        goto __pyx_L57_except_error;
        __pyx_L57_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":556
 *                 if self._shutdown_children:
 *                     break
 *                 try:             # <<<<<<<<<<<<<<
 *                     for result in fn(args):
 *                         done_callback(result)
 */
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L56_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L62_try_end:;
      }

      /* "fastthreadpool/fastthreadpool.pyx":553
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):
 *             for args in itr:             # <<<<<<<<<<<<<<
 *                 if self._shutdown_children:
 *                     break
 */
    }
    __pyx_L53_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":552
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         elif callable(done_callback):             # <<<<<<<<<<<<<<
 *             for args in itr:
 *                 if self._shutdown_children:
 */
  }
  __pyx_L3:;

  /* "fastthreadpool/fastthreadpool.pyx":562
 *                     _failed_append(exc)
 *                     self._failed_cnt.release()
 *         self._busy_lock_dec()             # <<<<<<<<<<<<<<
 * 
 *     def map(self, fn, itr, done_callback=True):
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_busy_lock_dec(__pyx_v_self);

  /* "fastthreadpool/fastthreadpool.pyx":525
 *         self._busy_lock_dec()
 * 
 *     def _imap_child(self, fn, itr, done_callback):             # <<<<<<<<<<<<<<
 *     #p def _imap_child(self, fn, itr, done_callback):
 *         cdef bint append_done
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._imap_child", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__done_append);
  __Pyx_XDECREF(__pyx_v__failed_append);
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_exc);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":564
 *         self._busy_lock_dec()
 * 
 *     def map(self, fn, itr, done_callback=True):             # <<<<<<<<<<<<<<
 *         cdef int itr_cnt, chunksize
 *         cdef object pychunksize
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_46map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_46map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fn = 0;
  PyObject *__pyx_v_itr = 0;
  PyObject *__pyx_v_done_callback = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fn,&__pyx_n_s_itr,&__pyx_n_s_done_callback,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fn)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itr)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("map", 0, 2, 3, 1); __PYX_ERR(0, 564, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_done_callback);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "map") < 0)) __PYX_ERR(0, 564, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_fn = values[0];
    __pyx_v_itr = values[1];
    __pyx_v_done_callback = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("map", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 564, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_45map(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_fn, __pyx_v_itr, __pyx_v_done_callback);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_45map(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_fn, PyObject *__pyx_v_itr, PyObject *__pyx_v_done_callback) {
  int __pyx_v_itr_cnt;
  int __pyx_v_chunksize;
  PyObject *__pyx_v_pychunksize = 0;
  PyObject *__pyx_v_child = NULL;
  PyObject *__pyx_v_it = NULL;
  PyObject *__pyx_v_cb_child = NULL;
  CYTHON_UNUSED int __pyx_v__;
  PyObject *__pyx_v_thr_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("map", 0);

  /* "fastthreadpool/fastthreadpool.pyx":567
 *         cdef int itr_cnt, chunksize
 *         cdef object pychunksize
 *         if self._shutdown_children:             # <<<<<<<<<<<<<<
 *             raise PoolStopped("Pool not running")
 *         for child in tuple(self.children):
 */
  __pyx_t_1 = (__pyx_v_self->_shutdown_children != 0);
  if (unlikely(__pyx_t_1)) {

    /* "fastthreadpool/fastthreadpool.pyx":568
 *         cdef object pychunksize
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")             # <<<<<<<<<<<<<<
 *         for child in tuple(self.children):
 *             if not child.is_alive():
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_PoolStopped); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 568, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":567
 *         cdef int itr_cnt, chunksize
 *         cdef object pychunksize
 *         if self._shutdown_children:             # <<<<<<<<<<<<<<
 *             raise PoolStopped("Pool not running")
 *         for child in tuple(self.children):
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":569
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")
 *         for child in tuple(self.children):             # <<<<<<<<<<<<<<
 *             if not child.is_alive():
 *                 self.children.remove(child)
 */
  __pyx_t_3 = PySequence_Tuple(__pyx_v_self->children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 569, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_child, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":570
 *             raise PoolStopped("Pool not running")
 *         for child in tuple(self.children):
 *             if not child.is_alive():             # <<<<<<<<<<<<<<
 *                 self.children.remove(child)
 *         itr_cnt = len(itr)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_child, __pyx_n_s_is_alive); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = ((!__pyx_t_1) != 0);
    if (__pyx_t_6) {

      /* "fastthreadpool/fastthreadpool.pyx":571
 *         for child in tuple(self.children):
 *             if not child.is_alive():
 *                 self.children.remove(child)             # <<<<<<<<<<<<<<
 *         itr_cnt = len(itr)
 *         chunksize = itr_cnt // self.max_children
 */
      if (unlikely(__pyx_v_self->children == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "remove");
        __PYX_ERR(0, 571, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PySet_Remove(__pyx_v_self->children, __pyx_v_child); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 571, __pyx_L1_error)

      /* "fastthreadpool/fastthreadpool.pyx":570
 *             raise PoolStopped("Pool not running")
 *         for child in tuple(self.children):
 *             if not child.is_alive():             # <<<<<<<<<<<<<<
 *                 self.children.remove(child)
 *         itr_cnt = len(itr)
 */
    }

    /* "fastthreadpool/fastthreadpool.pyx":569
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")
 *         for child in tuple(self.children):             # <<<<<<<<<<<<<<
 *             if not child.is_alive():
 *                 self.children.remove(child)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":572
 *             if not child.is_alive():
 *                 self.children.remove(child)
 *         itr_cnt = len(itr)             # <<<<<<<<<<<<<<
 *         chunksize = itr_cnt // self.max_children
 *         if itr_cnt % self.max_children:
 */
  __pyx_t_4 = PyObject_Length(__pyx_v_itr); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 572, __pyx_L1_error)
  __pyx_v_itr_cnt = __pyx_t_4;

  /* "fastthreadpool/fastthreadpool.pyx":573
 *                 self.children.remove(child)
 *         itr_cnt = len(itr)
 *         chunksize = itr_cnt // self.max_children             # <<<<<<<<<<<<<<
 *         if itr_cnt % self.max_children:
 *             pychunksize = chunksize + 1
 */
  __pyx_v_chunksize = (__pyx_v_itr_cnt / __pyx_v_self->max_children);

  /* "fastthreadpool/fastthreadpool.pyx":574
 *         itr_cnt = len(itr)
 *         chunksize = itr_cnt // self.max_children
 *         if itr_cnt % self.max_children:             # <<<<<<<<<<<<<<
 *             pychunksize = chunksize + 1
 *         else:
 */
  __pyx_t_6 = ((__pyx_v_itr_cnt % __pyx_v_self->max_children) != 0);
  if (__pyx_t_6) {

    /* "fastthreadpool/fastthreadpool.pyx":575
 *         chunksize = itr_cnt // self.max_children
 *         if itr_cnt % self.max_children:
 *             pychunksize = chunksize + 1             # <<<<<<<<<<<<<<
 *         else:
 *             pychunksize = chunksize
 */
    __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_v_chunksize + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_pychunksize = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":574
 *         itr_cnt = len(itr)
 *         chunksize = itr_cnt // self.max_children
 *         if itr_cnt % self.max_children:             # <<<<<<<<<<<<<<
 *             pychunksize = chunksize + 1
 *         else:
 */
    goto __pyx_L7;
  }

  /* "fastthreadpool/fastthreadpool.pyx":577
 *             pychunksize = chunksize + 1
 *         else:
 *             pychunksize = chunksize             # <<<<<<<<<<<<<<
 *         it = iter(itr)
 *         cb_child = self._imap_child if isgeneratorfunction(fn) else self._map_child
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_chunksize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_pychunksize = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L7:;

  /* "fastthreadpool/fastthreadpool.pyx":578
 *         else:
 *             pychunksize = chunksize
 *         it = iter(itr)             # <<<<<<<<<<<<<<
 *         cb_child = self._imap_child if isgeneratorfunction(fn) else self._map_child
 *         for _ in range(self.max_children):
 */
  __pyx_t_2 = PyObject_GetIter(__pyx_v_itr); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_it = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":579
 *             pychunksize = chunksize
 *         it = iter(itr)
 *         cb_child = self._imap_child if isgeneratorfunction(fn) else self._map_child             # <<<<<<<<<<<<<<
 *         for _ in range(self.max_children):
 *             self._child_cnt += 1
 */
  __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction, __pyx_v_fn); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 579, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_imap_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;
  } else {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_map_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;
  }
  __pyx_v_cb_child = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":580
 *         it = iter(itr)
 *         cb_child = self._imap_child if isgeneratorfunction(fn) else self._map_child
 *         for _ in range(self.max_children):             # <<<<<<<<<<<<<<
 *             self._child_cnt += 1
 *             thr_child = Thread(target=cb_child, args=(fn, islice(it, pychunksize), done_callback),
 */
  __pyx_t_8 = __pyx_v_self->max_children;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v__ = __pyx_t_10;

    /* "fastthreadpool/fastthreadpool.pyx":581
 *         cb_child = self._imap_child if isgeneratorfunction(fn) else self._map_child
 *         for _ in range(self.max_children):
 *             self._child_cnt += 1             # <<<<<<<<<<<<<<
 *             thr_child = Thread(target=cb_child, args=(fn, islice(it, pychunksize), done_callback),
 *                                name=self.child_name_prefix + str(self._child_cnt))
 */
    __pyx_v_self->_child_cnt = (__pyx_v_self->_child_cnt + 1);

    /* "fastthreadpool/fastthreadpool.pyx":582
 *         for _ in range(self.max_children):
 *             self._child_cnt += 1
 *             thr_child = Thread(target=cb_child, args=(fn, islice(it, pychunksize), done_callback),             # <<<<<<<<<<<<<<
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_target, __pyx_v_cb_child) < 0) __PYX_ERR(0, 582, __pyx_L1_error)
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_it);
    __Pyx_GIVEREF(__pyx_v_it);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_it);
    __Pyx_INCREF(__pyx_v_pychunksize);
    __Pyx_GIVEREF(__pyx_v_pychunksize);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_pychunksize);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_islice, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_fn);
    __Pyx_GIVEREF(__pyx_v_fn);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_fn);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_INCREF(__pyx_v_done_callback);
    __Pyx_GIVEREF(__pyx_v_done_callback);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_done_callback);
    __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_args, __pyx_t_5) < 0) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":583
 *             self._child_cnt += 1
 *             thr_child = Thread(target=cb_child, args=(fn, islice(it, pychunksize), done_callback),
 *                                name=self.child_name_prefix + str(self._child_cnt))             # <<<<<<<<<<<<<<
 *             thr_child.daemon = True
 *             if self.init_callback is not None:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->_child_cnt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_ConcatSafe(__pyx_v_self->child_name_prefix, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_name, __pyx_t_5) < 0) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":582
 *         for _ in range(self.max_children):
 *             self._child_cnt += 1
 *             thr_child = Thread(target=cb_child, args=(fn, islice(it, pychunksize), done_callback),             # <<<<<<<<<<<<<<
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_14fastthreadpool_14fastthreadpool_Thread, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_thr_child, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":584
 *             thr_child = Thread(target=cb_child, args=(fn, islice(it, pychunksize), done_callback),
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True             # <<<<<<<<<<<<<<
 *             if self.init_callback is not None:
 *                 self.init_callback(thr_child)
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_thr_child, __pyx_n_s_daemon, Py_True) < 0) __PYX_ERR(0, 584, __pyx_L1_error)

    /* "fastthreadpool/fastthreadpool.pyx":585
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 *             if self.init_callback is not None:             # <<<<<<<<<<<<<<
 *                 self.init_callback(thr_child)
 *             thr_child.start()
 */
    __pyx_t_6 = (__pyx_v_self->init_callback != Py_None);
    __pyx_t_1 = (__pyx_t_6 != 0);
    if (__pyx_t_1) {

      /* "fastthreadpool/fastthreadpool.pyx":586
 *             thr_child.daemon = True
 *             if self.init_callback is not None:
 *                 self.init_callback(thr_child)             # <<<<<<<<<<<<<<
 *             thr_child.start()
 *             self.children.add(thr_child)
 */
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_v_self->init_callback, __pyx_v_thr_child); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":585
 *                                name=self.child_name_prefix + str(self._child_cnt))
 *             thr_child.daemon = True
 *             if self.init_callback is not None:             # <<<<<<<<<<<<<<
 *                 self.init_callback(thr_child)
 *             thr_child.start()
 */
    }

    /* "fastthreadpool/fastthreadpool.pyx":587
 *             if self.init_callback is not None:
 *                 self.init_callback(thr_child)
 *             thr_child.start()             # <<<<<<<<<<<<<<
 *             self.children.add(thr_child)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_thr_child, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":588
 *                 self.init_callback(thr_child)
 *             thr_child.start()
 *             self.children.add(thr_child)             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
    if (unlikely(__pyx_v_self->children == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
      __PYX_ERR(0, 588, __pyx_L1_error)
    }
    __pyx_t_7 = PySet_Add(__pyx_v_self->children, __pyx_v_thr_child); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 588, __pyx_L1_error)
  }

  /* "fastthreadpool/fastthreadpool.pyx":564
 *         self._busy_lock_dec()
 * 
 *     def map(self, fn, itr, done_callback=True):             # <<<<<<<<<<<<<<
 *         cdef int itr_cnt, chunksize
 *         cdef object pychunksize
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pychunksize);
  __Pyx_XDECREF(__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_it);
  __Pyx_XDECREF(__pyx_v_cb_child);
  __Pyx_XDECREF(__pyx_v_thr_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":590
 *             self.children.add(thr_child)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._shutdown_children = False
 *         self._jobs.clear()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_48clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_48clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_47clear(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_47clear(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("clear", 0);

  /* "fastthreadpool/fastthreadpool.pyx":591
 * 
 *     def clear(self):
 *         self._shutdown_children = False             # <<<<<<<<<<<<<<
 *         self._jobs.clear()
 *         self._done.clear()
 */
  __pyx_v_self->_shutdown_children = 0;

  /* "fastthreadpool/fastthreadpool.pyx":592
 *     def clear(self):
 *         self._shutdown_children = False
 *         self._jobs.clear()             # <<<<<<<<<<<<<<
 *         self._done.clear()
 *         self._done_cnt = Semaphore(0)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_clear); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":593
 *         self._shutdown_children = False
 *         self._jobs.clear()
 *         self._done.clear()             # <<<<<<<<<<<<<<
 *         self._done_cnt = Semaphore(0)
 *         self._failed.clear()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_done, __pyx_n_s_clear); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":594
 *         self._jobs.clear()
 *         self._done.clear()
 *         self._done_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self._failed.clear()
 *         self._failed_cnt = Semaphore(0)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore), __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_done_cnt);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_done_cnt));
  __pyx_v_self->_done_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":595
 *         self._done.clear()
 *         self._done_cnt = Semaphore(0)
 *         self._failed.clear()             # <<<<<<<<<<<<<<
 *         self._failed_cnt = Semaphore(0)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_failed, __pyx_n_s_clear); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":596
 *         self._done_cnt = Semaphore(0)
 *         self._failed.clear()
 *         self._failed_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_failed_cnt);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_failed_cnt));
  __pyx_v_self->_failed_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":590
 *             self.children.add(thr_child)
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self._shutdown_children = False
 *         self._jobs.clear()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":599
 * 
 *     @property
 *     def alive(self):             # <<<<<<<<<<<<<<
 *         return len([1 for child in self.children if child.is_alive()])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_5alive_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_5alive_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_5alive___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_5alive___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_7genexpr__pyx_v_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":600
 *     @property
 *     def alive(self):
 *         return len([1 for child in self.children if child.is_alive()])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_set_iterator(__pyx_v_self->children, 1, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 600, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_set_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 600, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_child, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_child, __pyx_n_s_is_alive); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 600, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 600, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 600, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_9) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_int_1))) __PYX_ERR(0, 600, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_child); __pyx_7genexpr__pyx_v_child = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_child); __pyx_7genexpr__pyx_v_child = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_4 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":599
 * 
 *     @property
 *     def alive(self):             # <<<<<<<<<<<<<<
 *         return len([1 for child in self.children if child.is_alive()])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.alive.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":603
 * 
 *     @property
 *     def busy(self):             # <<<<<<<<<<<<<<
 *         return self._busy_cnt
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4busy_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4busy_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4busy___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4busy___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":604
 *     @property
 *     def busy(self):
 *         return self._busy_cnt             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_busy_cnt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":603
 * 
 *     @property
 *     def busy(self):             # <<<<<<<<<<<<<<
 *         return self._busy_cnt
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.busy.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":607
 * 
 *     @property
 *     def pending(self):             # <<<<<<<<<<<<<<
 *         return self._busy_cnt + len(self._jobs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7pending_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7pending_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_7pending___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_7pending___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":608
 *     @property
 *     def pending(self):
 *         return self._busy_cnt + len(self._jobs)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->_jobs;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->_busy_cnt + __pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":607
 * 
 *     @property
 *     def pending(self):             # <<<<<<<<<<<<<<
 *         return self._busy_cnt + len(self._jobs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.pending.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":611
 * 
 *     @property
 *     def jobs(self):             # <<<<<<<<<<<<<<
 *         return self._jobs
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4jobs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4jobs_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4jobs___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4jobs___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":612
 *     @property
 *     def jobs(self):
 *         return self._jobs             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_jobs);
  __pyx_r = __pyx_v_self->_jobs;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":611
 * 
 *     @property
 *     def jobs(self):             # <<<<<<<<<<<<<<
 *         return self._jobs
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":615
 * 
 *     @property
 *     def done(self):             # <<<<<<<<<<<<<<
 *         return self._done
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4done_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4done_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4done___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_4done___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":616
 *     @property
 *     def done(self):
 *         return self._done             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_done);
  __pyx_r = __pyx_v_self->_done;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":615
 * 
 *     @property
 *     def done(self):             # <<<<<<<<<<<<<<
 *         return self._done
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":619
 * 
 *     @property
 *     def done_cnt(self):             # <<<<<<<<<<<<<<
 *         return self._done_cnt
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_8done_cnt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_8done_cnt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_8done_cnt___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_8done_cnt___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":620
 *     @property
 *     def done_cnt(self):
 *         return self._done_cnt             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_done_cnt));
  __pyx_r = ((PyObject *)__pyx_v_self->_done_cnt);
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":619
 * 
 *     @property
 *     def done_cnt(self):             # <<<<<<<<<<<<<<
 *         return self._done_cnt
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":623
 * 
 *     @property
 *     def failed(self):             # <<<<<<<<<<<<<<
 *         return self._failed
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_6failed_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_6failed_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_6failed___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_6failed___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":624
 *     @property
 *     def failed(self):
 *         return self._failed             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_failed);
  __pyx_r = __pyx_v_self->_failed;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":623
 * 
 *     @property
 *     def failed(self):             # <<<<<<<<<<<<<<
 *         return self._failed
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":627
 * 
 *     @property
 *     def failed_cnt(self):             # <<<<<<<<<<<<<<
 *         return self._failed_cnt
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_10failed_cnt_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_10failed_cnt_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_10failed_cnt___get__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_10failed_cnt___get__(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "fastthreadpool/fastthreadpool.pyx":628
 *     @property
 *     def failed_cnt(self):
 *         return self._failed_cnt             # <<<<<<<<<<<<<<
 * 
 *     def _join_thread(self, thread, t):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_failed_cnt));
  __pyx_r = ((PyObject *)__pyx_v_self->_failed_cnt);
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":627
 * 
 *     @property
 *     def failed_cnt(self):             # <<<<<<<<<<<<<<
 *         return self._failed_cnt
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":630
 *         return self._failed_cnt
 * 
 *     def _join_thread(self, thread, t):             # <<<<<<<<<<<<<<
 *         cdef int cnt
 *         while True:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_50_join_thread(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_50_join_thread(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_thread = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_join_thread (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_thread,&__pyx_n_s_t,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_thread)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_join_thread", 1, 2, 2, 1); __PYX_ERR(0, 630, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_join_thread") < 0)) __PYX_ERR(0, 630, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_thread = values[0];
    __pyx_v_t = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_join_thread", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 630, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._join_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_49_join_thread(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_thread, __pyx_v_t);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_49_join_thread(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_thread, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("_join_thread", 0);

  /* "fastthreadpool/fastthreadpool.pyx":632
 *     def _join_thread(self, thread, t):
 *         cdef int cnt
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 thread.join(1.0)
 */
  while (1) {

    /* "fastthreadpool/fastthreadpool.pyx":633
 *         cdef int cnt
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 thread.join(1.0)
 *                 if not thread.is_alive():
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":634
 *         while True:
 *             try:
 *                 thread.join(1.0)             # <<<<<<<<<<<<<<
 *                 if not thread.is_alive():
 *                     return thread
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_thread, __pyx_n_s_join); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 634, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":635
 *             try:
 *                 thread.join(1.0)
 *                 if not thread.is_alive():             # <<<<<<<<<<<<<<
 *                     return thread
 *                 if t is not None and (_time() > t):
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_thread, __pyx_n_s_is_alive); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 635, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 635, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_7 = ((!__pyx_t_6) != 0);
        if (__pyx_t_7) {

          /* "fastthreadpool/fastthreadpool.pyx":636
 *                 thread.join(1.0)
 *                 if not thread.is_alive():
 *                     return thread             # <<<<<<<<<<<<<<
 *                 if t is not None and (_time() > t):
 *                     return None
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(__pyx_v_thread);
          __pyx_r = __pyx_v_thread;
          goto __pyx_L9_try_return;

          /* "fastthreadpool/fastthreadpool.pyx":635
 *             try:
 *                 thread.join(1.0)
 *                 if not thread.is_alive():             # <<<<<<<<<<<<<<
 *                     return thread
 *                 if t is not None and (_time() > t):
 */
        }

        /* "fastthreadpool/fastthreadpool.pyx":637
 *                 if not thread.is_alive():
 *                     return thread
 *                 if t is not None and (_time() > t):             # <<<<<<<<<<<<<<
 *                     return None
 *             except KeyboardInterrupt:
 */
        __pyx_t_6 = (__pyx_v_t != Py_None);
        __pyx_t_8 = (__pyx_t_6 != 0);
        if (__pyx_t_8) {
        } else {
          __pyx_t_7 = __pyx_t_8;
          goto __pyx_L15_bool_binop_done;
        }
        __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 637, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_v_t, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 637, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 637, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_7 = __pyx_t_8;
        __pyx_L15_bool_binop_done:;
        if (__pyx_t_7) {

          /* "fastthreadpool/fastthreadpool.pyx":638
 *                     return thread
 *                 if t is not None and (_time() > t):
 *                     return None             # <<<<<<<<<<<<<<
 *             except KeyboardInterrupt:
 *                 self._shutdown_children = True
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = Py_None; __Pyx_INCREF(Py_None);
          goto __pyx_L9_try_return;

          /* "fastthreadpool/fastthreadpool.pyx":637
 *                 if not thread.is_alive():
 *                     return thread
 *                 if t is not None and (_time() > t):             # <<<<<<<<<<<<<<
 *                     return None
 *             except KeyboardInterrupt:
 */
        }

        /* "fastthreadpool/fastthreadpool.pyx":633
 *         cdef int cnt
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 thread.join(1.0)
 *                 if not thread.is_alive():
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":639
 *                 if t is not None and (_time() > t):
 *                     return None
 *             except KeyboardInterrupt:             # <<<<<<<<<<<<<<
 *                 self._shutdown_children = True
 *                 self._shutdown = True
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyboardInterrupt);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._join_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(0, 639, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_10);

        /* "fastthreadpool/fastthreadpool.pyx":640
 *                     return None
 *             except KeyboardInterrupt:
 *                 self._shutdown_children = True             # <<<<<<<<<<<<<<
 *                 self._shutdown = True
 *                 raise
 */
        __pyx_v_self->_shutdown_children = 1;

        /* "fastthreadpool/fastthreadpool.pyx":641
 *             except KeyboardInterrupt:
 *                 self._shutdown_children = True
 *                 self._shutdown = True             # <<<<<<<<<<<<<<
 *                 raise
 * 
 */
        __pyx_v_self->_shutdown = 1;

        /* "fastthreadpool/fastthreadpool.pyx":642
 *                 self._shutdown_children = True
 *                 self._shutdown = True
 *                 raise             # <<<<<<<<<<<<<<
 * 
 *     def shutdown_children(self):
 */
        __Pyx_GIVEREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_4, __pyx_t_10);
        __pyx_t_5 = 0; __pyx_t_4 = 0; __pyx_t_10 = 0; 
        __PYX_ERR(0, 642, __pyx_L7_except_error)
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":633
 *         cdef int cnt
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 thread.join(1.0)
 *                 if not thread.is_alive():
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L9_try_return:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L0;
      __pyx_L12_try_end:;
    }
  }

  /* "fastthreadpool/fastthreadpool.pyx":630
 *         return self._failed_cnt
 * 
 *     def _join_thread(self, thread, t):             # <<<<<<<<<<<<<<
 *         cdef int cnt
 *         while True:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool._join_thread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":644
 *                 raise
 * 
 *     def shutdown_children(self):             # <<<<<<<<<<<<<<
 *         self._shutdown_children = True
 *         self._job_cnt.release()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_52shutdown_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_52shutdown_children(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown_children (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_51shutdown_children(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_51shutdown_children(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown_children", 0);

  /* "fastthreadpool/fastthreadpool.pyx":645
 * 
 *     def shutdown_children(self):
 *         self._shutdown_children = True             # <<<<<<<<<<<<<<
 *         self._job_cnt.release()
 * 
 */
  __pyx_v_self->_shutdown_children = 1;

  /* "fastthreadpool/fastthreadpool.pyx":646
 *     def shutdown_children(self):
 *         self._shutdown_children = True
 *         self._job_cnt.release()             # <<<<<<<<<<<<<<
 * 
 *     def shutdown(self, timeout=None, soon=False):
 */
  ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_job_cnt->__pyx_vtab)->release(__pyx_v_self->_job_cnt, 0);

  /* "fastthreadpool/fastthreadpool.pyx":644
 *                 raise
 * 
 *     def shutdown_children(self):             # <<<<<<<<<<<<<<
 *         self._shutdown_children = True
 *         self._job_cnt.release()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":648
 *         self._job_cnt.release()
 * 
 *     def shutdown(self, timeout=None, soon=False):             # <<<<<<<<<<<<<<
 *         for _ in range(self._child_cnt):
 *             if soon is True:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_54shutdown(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_54shutdown(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_timeout = 0;
  PyObject *__pyx_v_soon = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout,&__pyx_n_s_soon,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeout);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_soon);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "shutdown") < 0)) __PYX_ERR(0, 648, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timeout = values[0];
    __pyx_v_soon = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("shutdown", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 648, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_53shutdown(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_timeout, __pyx_v_soon);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_53shutdown(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timeout, PyObject *__pyx_v_soon) {
  CYTHON_UNUSED int __pyx_v__;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_thread = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("shutdown", 0);

  /* "fastthreadpool/fastthreadpool.pyx":649
 * 
 *     def shutdown(self, timeout=None, soon=False):
 *         for _ in range(self._child_cnt):             # <<<<<<<<<<<<<<
 *             if soon is True:
 *                 self._jobs.appendleft(None)
 */
  __pyx_t_1 = __pyx_v_self->_child_cnt;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v__ = __pyx_t_3;

    /* "fastthreadpool/fastthreadpool.pyx":650
 *     def shutdown(self, timeout=None, soon=False):
 *         for _ in range(self._child_cnt):
 *             if soon is True:             # <<<<<<<<<<<<<<
 *                 self._jobs.appendleft(None)
 *             elif soon is False:
 */
    __pyx_t_4 = (__pyx_v_soon == Py_True);
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "fastthreadpool/fastthreadpool.pyx":651
 *         for _ in range(self._child_cnt):
 *             if soon is True:
 *                 self._jobs.appendleft(None)             # <<<<<<<<<<<<<<
 *             elif soon is False:
 *                 self._jobs_append(None)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_appendleft); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 651, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":650
 *     def shutdown(self, timeout=None, soon=False):
 *         for _ in range(self._child_cnt):
 *             if soon is True:             # <<<<<<<<<<<<<<
 *                 self._jobs.appendleft(None)
 *             elif soon is False:
 */
      goto __pyx_L5;
    }

    /* "fastthreadpool/fastthreadpool.pyx":652
 *             if soon is True:
 *                 self._jobs.appendleft(None)
 *             elif soon is False:             # <<<<<<<<<<<<<<
 *                 self._jobs_append(None)
 *         while self._job_cnt._value <= 0:
 */
    __pyx_t_5 = (__pyx_v_soon == Py_False);
    __pyx_t_4 = (__pyx_t_5 != 0);
    if (__pyx_t_4) {

      /* "fastthreadpool/fastthreadpool.pyx":653
 *                 self._jobs.appendleft(None)
 *             elif soon is False:
 *                 self._jobs_append(None)             # <<<<<<<<<<<<<<
 *         while self._job_cnt._value <= 0:
 *             self._job_cnt.release()
 */
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_v_self->_jobs_append, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 653, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":652
 *             if soon is True:
 *                 self._jobs.appendleft(None)
 *             elif soon is False:             # <<<<<<<<<<<<<<
 *                 self._jobs_append(None)
 *         while self._job_cnt._value <= 0:
 */
    }
    __pyx_L5:;
  }

  /* "fastthreadpool/fastthreadpool.pyx":654
 *             elif soon is False:
 *                 self._jobs_append(None)
 *         while self._job_cnt._value <= 0:             # <<<<<<<<<<<<<<
 *             self._job_cnt.release()
 *         t = None if timeout is None else _time() + timeout
 */
  while (1) {
    __pyx_t_4 = ((__pyx_v_self->_job_cnt->_value <= 0) != 0);
    if (!__pyx_t_4) break;

    /* "fastthreadpool/fastthreadpool.pyx":655
 *                 self._jobs_append(None)
 *         while self._job_cnt._value <= 0:
 *             self._job_cnt.release()             # <<<<<<<<<<<<<<
 *         t = None if timeout is None else _time() + timeout
 *         for thread in tuple(self.children):
 */
    ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_job_cnt->__pyx_vtab)->release(__pyx_v_self->_job_cnt, 0);
  }

  /* "fastthreadpool/fastthreadpool.pyx":656
 *         while self._job_cnt._value <= 0:
 *             self._job_cnt.release()
 *         t = None if timeout is None else _time() + timeout             # <<<<<<<<<<<<<<
 *         for thread in tuple(self.children):
 *             self.children.discard(self._join_thread(thread, t))
 */
  __pyx_t_4 = (__pyx_v_timeout == Py_None);
  if ((__pyx_t_4 != 0)) {
    __Pyx_INCREF(Py_None);
    __pyx_t_7 = Py_None;
  } else {
    __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_v_timeout); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = __pyx_t_8;
    __pyx_t_8 = 0;
  }
  __pyx_v_t = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":657
 *             self._job_cnt.release()
 *         t = None if timeout is None else _time() + timeout
 *         for thread in tuple(self.children):             # <<<<<<<<<<<<<<
 *             self.children.discard(self._join_thread(thread, t))
 *         if t is not None and (_time() > t):
 */
  __pyx_t_7 = PySequence_Tuple(__pyx_v_self->children); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __pyx_t_7; __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_7); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 657, __pyx_L1_error)
    #else
    __pyx_t_7 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 657, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_thread, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":658
 *         t = None if timeout is None else _time() + timeout
 *         for thread in tuple(self.children):
 *             self.children.discard(self._join_thread(thread, t))             # <<<<<<<<<<<<<<
 *         if t is not None and (_time() > t):
 *             self._delayed_cancel()
 */
    if (unlikely(__pyx_v_self->children == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "discard");
      __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_join_thread); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_thread);
    __Pyx_GIVEREF(__pyx_v_thread);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_thread);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_t);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_11 = __Pyx_PySet_Discard(__pyx_v_self->children, __pyx_t_10); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":657
 *             self._job_cnt.release()
 *         t = None if timeout is None else _time() + timeout
 *         for thread in tuple(self.children):             # <<<<<<<<<<<<<<
 *             self.children.discard(self._join_thread(thread, t))
 *         if t is not None and (_time() > t):
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":659
 *         for thread in tuple(self.children):
 *             self.children.discard(self._join_thread(thread, t))
 *         if t is not None and (_time() > t):             # <<<<<<<<<<<<<<
 *             self._delayed_cancel()
 *         if self.children:
 */
  __pyx_t_5 = (__pyx_v_t != Py_None);
  __pyx_t_12 = (__pyx_t_5 != 0);
  if (__pyx_t_12) {
  } else {
    __pyx_t_4 = __pyx_t_12;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_v_14fastthreadpool_14fastthreadpool__time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyObject_RichCompare(__pyx_t_8, __pyx_v_t, Py_GT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_4 = __pyx_t_12;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":660
 *             self.children.discard(self._join_thread(thread, t))
 *         if t is not None and (_time() > t):
 *             self._delayed_cancel()             # <<<<<<<<<<<<<<
 *         if self.children:
 *             return False
 */
    ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_delayed_cancel(__pyx_v_self);

    /* "fastthreadpool/fastthreadpool.pyx":659
 *         for thread in tuple(self.children):
 *             self.children.discard(self._join_thread(thread, t))
 *         if t is not None and (_time() > t):             # <<<<<<<<<<<<<<
 *             self._delayed_cancel()
 *         if self.children:
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":661
 *         if t is not None and (_time() > t):
 *             self._delayed_cancel()
 *         if self.children:             # <<<<<<<<<<<<<<
 *             return False
 *         self._shutdown = True
 */
  __pyx_t_4 = (__pyx_v_self->children != Py_None)&&(PySet_GET_SIZE(__pyx_v_self->children) != 0);
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":662
 *             self._delayed_cancel()
 *         if self.children:
 *             return False             # <<<<<<<<<<<<<<
 *         self._shutdown = True
 *         if self._thr_done is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "fastthreadpool/fastthreadpool.pyx":661
 *         if t is not None and (_time() > t):
 *             self._delayed_cancel()
 *         if self.children:             # <<<<<<<<<<<<<<
 *             return False
 *         self._shutdown = True
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":663
 *         if self.children:
 *             return False
 *         self._shutdown = True             # <<<<<<<<<<<<<<
 *         if self._thr_done is not None:
 *             while self._done_cnt._value <= 0:
 */
  __pyx_v_self->_shutdown = 1;

  /* "fastthreadpool/fastthreadpool.pyx":664
 *             return False
 *         self._shutdown = True
 *         if self._thr_done is not None:             # <<<<<<<<<<<<<<
 *             while self._done_cnt._value <= 0:
 *                 self._done_cnt.release()
 */
  __pyx_t_4 = (__pyx_v_self->_thr_done != Py_None);
  __pyx_t_12 = (__pyx_t_4 != 0);
  if (__pyx_t_12) {

    /* "fastthreadpool/fastthreadpool.pyx":665
 *         self._shutdown = True
 *         if self._thr_done is not None:
 *             while self._done_cnt._value <= 0:             # <<<<<<<<<<<<<<
 *                 self._done_cnt.release()
 *             self._join_thread(self._thr_done, t)
 */
    while (1) {
      __pyx_t_12 = ((__pyx_v_self->_done_cnt->_value <= 0) != 0);
      if (!__pyx_t_12) break;

      /* "fastthreadpool/fastthreadpool.pyx":666
 *         if self._thr_done is not None:
 *             while self._done_cnt._value <= 0:
 *                 self._done_cnt.release()             # <<<<<<<<<<<<<<
 *             self._join_thread(self._thr_done, t)
 *         if self._thr_failed is not None:
 */
      ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_done_cnt->__pyx_vtab)->release(__pyx_v_self->_done_cnt, 0);
    }

    /* "fastthreadpool/fastthreadpool.pyx":667
 *             while self._done_cnt._value <= 0:
 *                 self._done_cnt.release()
 *             self._join_thread(self._thr_done, t)             # <<<<<<<<<<<<<<
 *         if self._thr_failed is not None:
 *             while self._failed_cnt._value <= 0:
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_join_thread); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_self->_thr_done);
    __Pyx_GIVEREF(__pyx_v_self->_thr_done);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_self->_thr_done);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_t);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":664
 *             return False
 *         self._shutdown = True
 *         if self._thr_done is not None:             # <<<<<<<<<<<<<<
 *             while self._done_cnt._value <= 0:
 *                 self._done_cnt.release()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":668
 *                 self._done_cnt.release()
 *             self._join_thread(self._thr_done, t)
 *         if self._thr_failed is not None:             # <<<<<<<<<<<<<<
 *             while self._failed_cnt._value <= 0:
 *                 self._failed_cnt.release()
 */
  __pyx_t_12 = (__pyx_v_self->_thr_failed != Py_None);
  __pyx_t_4 = (__pyx_t_12 != 0);
  if (__pyx_t_4) {

    /* "fastthreadpool/fastthreadpool.pyx":669
 *             self._join_thread(self._thr_done, t)
 *         if self._thr_failed is not None:
 *             while self._failed_cnt._value <= 0:             # <<<<<<<<<<<<<<
 *                 self._failed_cnt.release()
 *             self._join_thread(self._thr_failed, t)
 */
    while (1) {
      __pyx_t_4 = ((__pyx_v_self->_failed_cnt->_value <= 0) != 0);
      if (!__pyx_t_4) break;

      /* "fastthreadpool/fastthreadpool.pyx":670
 *         if self._thr_failed is not None:
 *             while self._failed_cnt._value <= 0:
 *                 self._failed_cnt.release()             # <<<<<<<<<<<<<<
 *             self._join_thread(self._thr_failed, t)
 *         return True
 */
      ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore *)__pyx_v_self->_failed_cnt->__pyx_vtab)->release(__pyx_v_self->_failed_cnt, 0);
    }

    /* "fastthreadpool/fastthreadpool.pyx":671
 *             while self._failed_cnt._value <= 0:
 *                 self._failed_cnt.release()
 *             self._join_thread(self._thr_failed, t)             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_join_thread); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_self->_thr_failed);
    __Pyx_GIVEREF(__pyx_v_self->_thr_failed);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_self->_thr_failed);
    __Pyx_INCREF(__pyx_v_t);
    __Pyx_GIVEREF(__pyx_v_t);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_t);
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 671, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":668
 *                 self._done_cnt.release()
 *             self._join_thread(self._thr_done, t)
 *         if self._thr_failed is not None:             # <<<<<<<<<<<<<<
 *             while self._failed_cnt._value <= 0:
 *                 self._failed_cnt.release()
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":672
 *                 self._failed_cnt.release()
 *             self._join_thread(self._thr_failed, t)
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def join(self, timeout=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_True);
  __pyx_r = Py_True;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":648
 *         self._job_cnt.release()
 * 
 *     def shutdown(self, timeout=None, soon=False):             # <<<<<<<<<<<<<<
 *         for _ in range(self._child_cnt):
 *             if soon is True:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.shutdown", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_thread);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":674
 *         return True
 * 
 *     def join(self, timeout=None):             # <<<<<<<<<<<<<<
 *         return self.shutdown(timeout, False)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_56join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_56join(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_timeout = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("join (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeout);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "join") < 0)) __PYX_ERR(0, 674, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timeout = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("join", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 674, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_55join(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_timeout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_55join(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_timeout) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("join", 0);

  /* "fastthreadpool/fastthreadpool.pyx":675
 * 
 *     def join(self, timeout=None):
 *         return self.shutdown(timeout, False)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _delayed_cancel(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_shutdown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_timeout);
  __Pyx_GIVEREF(__pyx_v_timeout);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_timeout);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_False);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":674
 *         return True
 * 
 *     def join(self, timeout=None):             # <<<<<<<<<<<<<<
 *         return self.shutdown(timeout, False)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.join", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "fastthreadpool/fastthreadpool.pyx":677
 *         return self.shutdown(timeout, False)
 * 
 *     cdef void _delayed_cancel(self):             # <<<<<<<<<<<<<<
 *     #p def _delayed_cancel(self):
 *         for timer in self._delayed:
 */

static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__delayed_cancel(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_v_timer = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_delayed_cancel", 0);

  /* "fastthreadpool/fastthreadpool.pyx":679
 *     cdef void _delayed_cancel(self):
 *     #p def _delayed_cancel(self):
 *         for timer in self._delayed:             # <<<<<<<<<<<<<<
 *             timer.cancel()
 *         self._delayed.clear()
 */
  if (likely(PyList_CheckExact(__pyx_v_self->_delayed)) || PyTuple_CheckExact(__pyx_v_self->_delayed)) {
    __pyx_t_1 = __pyx_v_self->_delayed; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_self->_delayed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 679, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_timer, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":680
 *     #p def _delayed_cancel(self):
 *         for timer in self._delayed:
 *             timer.cancel()             # <<<<<<<<<<<<<<
 *         self._delayed.clear()
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_cancel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":679
 *     cdef void _delayed_cancel(self):
 *     #p def _delayed_cancel(self):
 *         for timer in self._delayed:             # <<<<<<<<<<<<<<
 *             timer.cancel()
 *         self._delayed.clear()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":681
 *         for timer in self._delayed:
 *             timer.cancel()
 *         self._delayed.clear()             # <<<<<<<<<<<<<<
 * 
 *     cdef void _scheduled_cancel(self):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_delayed, __pyx_n_s_clear); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":677
 *         return self.shutdown(timeout, False)
 * 
 *     cdef void _delayed_cancel(self):             # <<<<<<<<<<<<<<
 *     #p def _delayed_cancel(self):
 *         for timer in self._delayed:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("fastthreadpool.fastthreadpool.Pool._delayed_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_timer);
  __Pyx_RefNannyFinishContext();
}

/* "fastthreadpool/fastthreadpool.pyx":683
 *         self._delayed.clear()
 * 
 *     cdef void _scheduled_cancel(self):             # <<<<<<<<<<<<<<
 *     #p def _scheduled_cancel(self):
 *         for timer in self._scheduled:
 */

static void __pyx_f_14fastthreadpool_14fastthreadpool_4Pool__scheduled_cancel(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_v_timer = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_scheduled_cancel", 0);

  /* "fastthreadpool/fastthreadpool.pyx":685
 *     cdef void _scheduled_cancel(self):
 *     #p def _scheduled_cancel(self):
 *         for timer in self._scheduled:             # <<<<<<<<<<<<<<
 *             timer.cancel()
 *         self._scheduled.clear()
 */
  if (likely(PyList_CheckExact(__pyx_v_self->_scheduled)) || PyTuple_CheckExact(__pyx_v_self->_scheduled)) {
    __pyx_t_1 = __pyx_v_self->_scheduled; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_self->_scheduled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 685, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 685, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 685, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 685, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_timer, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":686
 *     #p def _scheduled_cancel(self):
 *         for timer in self._scheduled:
 *             timer.cancel()             # <<<<<<<<<<<<<<
 *         self._scheduled.clear()
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_cancel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":685
 *     cdef void _scheduled_cancel(self):
 *     #p def _scheduled_cancel(self):
 *         for timer in self._scheduled:             # <<<<<<<<<<<<<<
 *             timer.cancel()
 *         self._scheduled.clear()
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":687
 *         for timer in self._scheduled:
 *             timer.cancel()
 *         self._scheduled.clear()             # <<<<<<<<<<<<<<
 * 
 *     def cancel(self, job_id=None, timer=None):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_scheduled, __pyx_n_s_clear); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":683
 *         self._delayed.clear()
 * 
 *     cdef void _scheduled_cancel(self):             # <<<<<<<<<<<<<<
 *     #p def _scheduled_cancel(self):
 *         for timer in self._scheduled:
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("fastthreadpool.fastthreadpool.Pool._scheduled_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_timer);
  __Pyx_RefNannyFinishContext();
}

/* "fastthreadpool/fastthreadpool.pyx":689
 *         self._scheduled.clear()
 * 
 *     def cancel(self, job_id=None, timer=None):             # <<<<<<<<<<<<<<
 *         if timer is True:
 *             self._delayed_cancel()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_58cancel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_58cancel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_job_id = 0;
  PyObject *__pyx_v_timer = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_job_id,&__pyx_n_s_timer,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_job_id);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timer);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "cancel") < 0)) __PYX_ERR(0, 689, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_job_id = values[0];
    __pyx_v_timer = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 689, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_57cancel(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), __pyx_v_job_id, __pyx_v_timer);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_57cancel(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, PyObject *__pyx_v_job_id, PyObject *__pyx_v_timer) {
  PyObject *__pyx_v_job = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("cancel", 0);

  /* "fastthreadpool/fastthreadpool.pyx":690
 * 
 *     def cancel(self, job_id=None, timer=None):
 *         if timer is True:             # <<<<<<<<<<<<<<
 *             self._delayed_cancel()
 *             self._scheduled_cancel()
 */
  __pyx_t_1 = (__pyx_v_timer == Py_True);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":691
 *     def cancel(self, job_id=None, timer=None):
 *         if timer is True:
 *             self._delayed_cancel()             # <<<<<<<<<<<<<<
 *             self._scheduled_cancel()
 *         elif isinstance(timer, TimerObj):
 */
    ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_delayed_cancel(__pyx_v_self);

    /* "fastthreadpool/fastthreadpool.pyx":692
 *         if timer is True:
 *             self._delayed_cancel()
 *             self._scheduled_cancel()             # <<<<<<<<<<<<<<
 *         elif isinstance(timer, TimerObj):
 *             try:
 */
    ((struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self->__pyx_vtab)->_scheduled_cancel(__pyx_v_self);

    /* "fastthreadpool/fastthreadpool.pyx":690
 * 
 *     def cancel(self, job_id=None, timer=None):
 *         if timer is True:             # <<<<<<<<<<<<<<
 *             self._delayed_cancel()
 *             self._scheduled_cancel()
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":693
 *             self._delayed_cancel()
 *             self._scheduled_cancel()
 *         elif isinstance(timer, TimerObj):             # <<<<<<<<<<<<<<
 *             try:
 *                 timer.timer_id.cancel()
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_TimerObj); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_timer, __pyx_t_3); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":694
 *             self._scheduled_cancel()
 *         elif isinstance(timer, TimerObj):
 *             try:             # <<<<<<<<<<<<<<
 *                 timer.timer_id.cancel()
 *                 self._scheduled.remove(timer.timer_id)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":695
 *         elif isinstance(timer, TimerObj):
 *             try:
 *                 timer.timer_id.cancel()             # <<<<<<<<<<<<<<
 *                 self._scheduled.remove(timer.timer_id)
 *             except ValueError:
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_timer_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 695, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cancel); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 695, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 695, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":696
 *             try:
 *                 timer.timer_id.cancel()
 *                 self._scheduled.remove(timer.timer_id)             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 pass
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_scheduled, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 696, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_timer_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 696, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 696, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":694
 *             self._scheduled_cancel()
 *         elif isinstance(timer, TimerObj):
 *             try:             # <<<<<<<<<<<<<<
 *                 timer.timer_id.cancel()
 *                 self._scheduled.remove(timer.timer_id)
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":697
 *                 timer.timer_id.cancel()
 *                 self._scheduled.remove(timer.timer_id)
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 pass
 *             try:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_9) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":694
 *             self._scheduled_cancel()
 *         elif isinstance(timer, TimerObj):
 *             try:             # <<<<<<<<<<<<<<
 *                 timer.timer_id.cancel()
 *                 self._scheduled.remove(timer.timer_id)
 */
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_L9_try_end:;
    }

    /* "fastthreadpool/fastthreadpool.pyx":699
 *             except ValueError:
 *                 pass
 *             try:             # <<<<<<<<<<<<<<
 *                 timer.old_timer_id.cancel()
 *                 self._scheduled.remove(timer.old_timer_id)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":700
 *                 pass
 *             try:
 *                 timer.old_timer_id.cancel()             # <<<<<<<<<<<<<<
 *                 self._scheduled.remove(timer.old_timer_id)
 *             except ValueError:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_old_timer_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 700, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_cancel); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 700, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 700, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":701
 *             try:
 *                 timer.old_timer_id.cancel()
 *                 self._scheduled.remove(timer.old_timer_id)             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 pass
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_scheduled, __pyx_n_s_remove); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 701, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_old_timer_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 701, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 701, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":699
 *             except ValueError:
 *                 pass
 *             try:             # <<<<<<<<<<<<<<
 *                 timer.old_timer_id.cancel()
 *                 self._scheduled.remove(timer.old_timer_id)
 */
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L15_try_end;
      __pyx_L10_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":702
 *                 timer.old_timer_id.cancel()
 *                 self._scheduled.remove(timer.old_timer_id)
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 pass
 *         elif timer is not None:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_9) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L11_exception_handled;
      }
      goto __pyx_L12_except_error;
      __pyx_L12_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":699
 *             except ValueError:
 *                 pass
 *             try:             # <<<<<<<<<<<<<<
 *                 timer.old_timer_id.cancel()
 *                 self._scheduled.remove(timer.old_timer_id)
 */
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L11_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      __pyx_L15_try_end:;
    }

    /* "fastthreadpool/fastthreadpool.pyx":693
 *             self._delayed_cancel()
 *             self._scheduled_cancel()
 *         elif isinstance(timer, TimerObj):             # <<<<<<<<<<<<<<
 *             try:
 *                 timer.timer_id.cancel()
 */
    goto __pyx_L3;
  }

  /* "fastthreadpool/fastthreadpool.pyx":704
 *             except ValueError:
 *                 pass
 *         elif timer is not None:             # <<<<<<<<<<<<<<
 *             timer.cancel()
 *             try:
 */
  __pyx_t_1 = (__pyx_v_timer != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":705
 *                 pass
 *         elif timer is not None:
 *             timer.cancel()             # <<<<<<<<<<<<<<
 *             try:
 *                 self._delayed.remove(timer)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_timer, __pyx_n_s_cancel); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":706
 *         elif timer is not None:
 *             timer.cancel()
 *             try:             # <<<<<<<<<<<<<<
 *                 self._delayed.remove(timer)
 *             except ValueError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":707
 *             timer.cancel()
 *             try:
 *                 self._delayed.remove(timer)             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 pass
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_delayed, __pyx_n_s_remove); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 707, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_timer); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 707, __pyx_L16_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":706
 *         elif timer is not None:
 *             timer.cancel()
 *             try:             # <<<<<<<<<<<<<<
 *                 self._delayed.remove(timer)
 *             except ValueError:
 */
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L21_try_end;
      __pyx_L16_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":708
 *             try:
 *                 self._delayed.remove(timer)
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 pass
 *             try:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_9) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L17_exception_handled;
      }
      goto __pyx_L18_except_error;
      __pyx_L18_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":706
 *         elif timer is not None:
 *             timer.cancel()
 *             try:             # <<<<<<<<<<<<<<
 *                 self._delayed.remove(timer)
 *             except ValueError:
 */
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L17_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_L21_try_end:;
    }

    /* "fastthreadpool/fastthreadpool.pyx":710
 *             except ValueError:
 *                 pass
 *             try:             # <<<<<<<<<<<<<<
 *                 self._scheduled.remove(timer)
 *             except ValueError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "fastthreadpool/fastthreadpool.pyx":711
 *                 pass
 *             try:
 *                 self._scheduled.remove(timer)             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 pass
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_scheduled, __pyx_n_s_remove); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_timer); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 711, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":710
 *             except ValueError:
 *                 pass
 *             try:             # <<<<<<<<<<<<<<
 *                 self._scheduled.remove(timer)
 *             except ValueError:
 */
      }
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L27_try_end;
      __pyx_L22_error:;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":712
 *             try:
 *                 self._scheduled.remove(timer)
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 pass
 *         if job_id is False:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_9) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L23_exception_handled;
      }
      goto __pyx_L24_except_error;
      __pyx_L24_except_error:;

      /* "fastthreadpool/fastthreadpool.pyx":710
 *             except ValueError:
 *                 pass
 *             try:             # <<<<<<<<<<<<<<
 *                 self._scheduled.remove(timer)
 *             except ValueError:
 */
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L23_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      __pyx_L27_try_end:;
    }

    /* "fastthreadpool/fastthreadpool.pyx":704
 *             except ValueError:
 *                 pass
 *         elif timer is not None:             # <<<<<<<<<<<<<<
 *             timer.cancel()
 *             try:
 */
  }
  __pyx_L3:;

  /* "fastthreadpool/fastthreadpool.pyx":714
 *             except ValueError:
 *                 pass
 *         if job_id is False:             # <<<<<<<<<<<<<<
 *             return True
 *         if job_id is None:
 */
  __pyx_t_2 = (__pyx_v_job_id == Py_False);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "fastthreadpool/fastthreadpool.pyx":715
 *                 pass
 *         if job_id is False:
 *             return True             # <<<<<<<<<<<<<<
 *         if job_id is None:
 *             self._jobs.clear()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "fastthreadpool/fastthreadpool.pyx":714
 *             except ValueError:
 *                 pass
 *         if job_id is False:             # <<<<<<<<<<<<<<
 *             return True
 *         if job_id is None:
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":716
 *         if job_id is False:
 *             return True
 *         if job_id is None:             # <<<<<<<<<<<<<<
 *             self._jobs.clear()
 *             return True
 */
  __pyx_t_1 = (__pyx_v_job_id == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "fastthreadpool/fastthreadpool.pyx":717
 *             return True
 *         if job_id is None:
 *             self._jobs.clear()             # <<<<<<<<<<<<<<
 *             return True
 *         for job in self._jobs:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_clear); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":718
 *         if job_id is None:
 *             self._jobs.clear()
 *             return True             # <<<<<<<<<<<<<<
 *         for job in self._jobs:
 *             if id(job) == job_id:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "fastthreadpool/fastthreadpool.pyx":716
 *         if job_id is False:
 *             return True
 *         if job_id is None:             # <<<<<<<<<<<<<<
 *             self._jobs.clear()
 *             return True
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":719
 *             self._jobs.clear()
 *             return True
 *         for job in self._jobs:             # <<<<<<<<<<<<<<
 *             if id(job) == job_id:
 *                 try:
 */
  if (likely(PyList_CheckExact(__pyx_v_self->_jobs)) || PyTuple_CheckExact(__pyx_v_self->_jobs)) {
    __pyx_t_3 = __pyx_v_self->_jobs; __Pyx_INCREF(__pyx_t_3); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_self->_jobs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 719, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 719, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 719, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(0, 719, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_3, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 719, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_11(__pyx_t_3);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 719, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_job, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":720
 *             return True
 *         for job in self._jobs:
 *             if id(job) == job_id:             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._jobs.remove(job)
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, __pyx_v_job); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_7, __pyx_v_job_id, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 720, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_2) {

      /* "fastthreadpool/fastthreadpool.pyx":721
 *         for job in self._jobs:
 *             if id(job) == job_id:
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._jobs.remove(job)
 *                     return True
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
        __Pyx_XGOTREF(__pyx_t_4);
        __Pyx_XGOTREF(__pyx_t_5);
        __Pyx_XGOTREF(__pyx_t_6);
        /*try:*/ {

          /* "fastthreadpool/fastthreadpool.pyx":722
 *             if id(job) == job_id:
 *                 try:
 *                     self._jobs.remove(job)             # <<<<<<<<<<<<<<
 *                     return True
 *                 except ValueError:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_jobs, __pyx_n_s_remove); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 722, __pyx_L33_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_job); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 722, __pyx_L33_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

          /* "fastthreadpool/fastthreadpool.pyx":723
 *                 try:
 *                     self._jobs.remove(job)
 *                     return True             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     return False
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_True);
          __pyx_r = Py_True;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L37_try_return;

          /* "fastthreadpool/fastthreadpool.pyx":721
 *         for job in self._jobs:
 *             if id(job) == job_id:
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._jobs.remove(job)
 *                     return True
 */
        }
        __pyx_L33_error:;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "fastthreadpool/fastthreadpool.pyx":724
 *                     self._jobs.remove(job)
 *                     return True
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     return False
 *         return False
 */
        __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_9) {
          __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_12) < 0) __PYX_ERR(0, 724, __pyx_L35_except_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GOTREF(__pyx_t_12);

          /* "fastthreadpool/fastthreadpool.pyx":725
 *                     return True
 *                 except ValueError:
 *                     return False             # <<<<<<<<<<<<<<
 *         return False
 */
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L36_except_return;
        }
        goto __pyx_L35_except_error;
        __pyx_L35_except_error:;

        /* "fastthreadpool/fastthreadpool.pyx":721
 *         for job in self._jobs:
 *             if id(job) == job_id:
 *                 try:             # <<<<<<<<<<<<<<
 *                     self._jobs.remove(job)
 *                     return True
 */
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
        goto __pyx_L1_error;
        __pyx_L37_try_return:;
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
        goto __pyx_L0;
        __pyx_L36_except_return:;
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_XGIVEREF(__pyx_t_5);
        __Pyx_XGIVEREF(__pyx_t_6);
        __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
        goto __pyx_L0;
      }

      /* "fastthreadpool/fastthreadpool.pyx":720
 *             return True
 *         for job in self._jobs:
 *             if id(job) == job_id:             # <<<<<<<<<<<<<<
 *                 try:
 *                     self._jobs.remove(job)
 */
    }

    /* "fastthreadpool/fastthreadpool.pyx":719
 *             self._jobs.clear()
 *             return True
 *         for job in self._jobs:             # <<<<<<<<<<<<<<
 *             if id(job) == job_id:
 *                 try:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":726
 *                 except ValueError:
 *                     return False
 *         return False             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "fastthreadpool/fastthreadpool.pyx":689
 *         self._scheduled.clear()
 * 
 *     def cancel(self, job_id=None, timer=None):             # <<<<<<<<<<<<<<
 *         if timer is True:
 *             self._delayed_cancel()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_job);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_60__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_60__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_59__reduce_cython__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_59__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_62__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_62__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_61__setstate_cython__(((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14fastthreadpool_14fastthreadpool_4Pool_61__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("fastthreadpool.fastthreadpool.Pool.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Semaphore __pyx_vtable_14fastthreadpool_14fastthreadpool_Semaphore;

static PyObject *__pyx_tp_new_14fastthreadpool_14fastthreadpool_Semaphore(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)o);
  p->__pyx_vtab = __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Semaphore;
  if (unlikely(__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14fastthreadpool_14fastthreadpool_Semaphore(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_9Semaphore_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_14fastthreadpool_14fastthreadpool_Semaphore[] = {
  {"acquire", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_5acquire, METH_VARARGS|METH_KEYWORDS, 0},
  {"release", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_7release, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_9Semaphore_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14fastthreadpool_14fastthreadpool_Semaphore[] = {
  {(char *)"value", __pyx_getprop_14fastthreadpool_14fastthreadpool_9Semaphore_value, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14fastthreadpool_14fastthreadpool_Semaphore = {
  PyVarObject_HEAD_INIT(0, 0)
  "fastthreadpool.fastthreadpool.Semaphore", /*tp_name*/
  sizeof(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14fastthreadpool_14fastthreadpool_Semaphore, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Fast semaphore.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14fastthreadpool_14fastthreadpool_Semaphore, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14fastthreadpool_14fastthreadpool_Semaphore, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14fastthreadpool_14fastthreadpool_Semaphore, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_14fastthreadpool_14fastthreadpool_Pool __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool;

static PyObject *__pyx_tp_new_14fastthreadpool_14fastthreadpool_Pool(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)o);
  p->__pyx_vtab = __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Pool;
  p->_job_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)Py_None); Py_INCREF(Py_None);
  p->children = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->child_name_prefix = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_delayed = Py_None; Py_INCREF(Py_None);
  p->_scheduled = Py_None; Py_INCREF(Py_None);
  p->_jobs = Py_None; Py_INCREF(Py_None);
  p->_jobs_append = Py_None; Py_INCREF(Py_None);
  p->_jobs_appendleft = Py_None; Py_INCREF(Py_None);
  p->_done = Py_None; Py_INCREF(Py_None);
  p->_failed = Py_None; Py_INCREF(Py_None);
  p->_done_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)Py_None); Py_INCREF(Py_None);
  p->_failed_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)Py_None); Py_INCREF(Py_None);
  p->logger = Py_None; Py_INCREF(Py_None);
  p->init_callback = Py_None; Py_INCREF(Py_None);
  p->_thr_done = Py_None; Py_INCREF(Py_None);
  p->_thr_failed = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14fastthreadpool_14fastthreadpool_Pool(PyObject *o) {
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *p = (struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_job_cnt);
  Py_CLEAR(p->children);
  Py_CLEAR(p->child_name_prefix);
  Py_CLEAR(p->_delayed);
  Py_CLEAR(p->_scheduled);
  Py_CLEAR(p->_jobs);
  Py_CLEAR(p->_jobs_append);
  Py_CLEAR(p->_jobs_appendleft);
  Py_CLEAR(p->_done);
  Py_CLEAR(p->_failed);
  Py_CLEAR(p->_done_cnt);
  Py_CLEAR(p->_failed_cnt);
  Py_CLEAR(p->logger);
  Py_CLEAR(p->init_callback);
  Py_CLEAR(p->_thr_done);
  Py_CLEAR(p->_thr_failed);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_14fastthreadpool_14fastthreadpool_Pool(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *p = (struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)o;
  if (p->_job_cnt) {
    e = (*v)(((PyObject *)p->_job_cnt), a); if (e) return e;
  }
  if (p->children) {
    e = (*v)(p->children, a); if (e) return e;
  }
  if (p->_delayed) {
    e = (*v)(p->_delayed, a); if (e) return e;
  }
  if (p->_scheduled) {
    e = (*v)(p->_scheduled, a); if (e) return e;
  }
  if (p->_jobs) {
    e = (*v)(p->_jobs, a); if (e) return e;
  }
  if (p->_jobs_append) {
    e = (*v)(p->_jobs_append, a); if (e) return e;
  }
  if (p->_jobs_appendleft) {
    e = (*v)(p->_jobs_appendleft, a); if (e) return e;
  }
  if (p->_done) {
    e = (*v)(p->_done, a); if (e) return e;
  }
  if (p->_failed) {
    e = (*v)(p->_failed, a); if (e) return e;
  }
  if (p->_done_cnt) {
    e = (*v)(((PyObject *)p->_done_cnt), a); if (e) return e;
  }
  if (p->_failed_cnt) {
    e = (*v)(((PyObject *)p->_failed_cnt), a); if (e) return e;
  }
  if (p->logger) {
    e = (*v)(p->logger, a); if (e) return e;
  }
  if (p->init_callback) {
    e = (*v)(p->init_callback, a); if (e) return e;
  }
  if (p->_thr_done) {
    e = (*v)(p->_thr_done, a); if (e) return e;
  }
  if (p->_thr_failed) {
    e = (*v)(p->_thr_failed, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14fastthreadpool_14fastthreadpool_Pool(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *p = (struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *)o;
  tmp = ((PyObject*)p->_job_cnt);
  p->_job_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->children);
  p->children = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_delayed);
  p->_delayed = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_scheduled);
  p->_scheduled = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_jobs);
  p->_jobs = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_jobs_append);
  p->_jobs_append = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_jobs_appendleft);
  p->_jobs_appendleft = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_done);
  p->_done = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_failed);
  p->_failed = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_done_cnt);
  p->_done_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_failed_cnt);
  p->_failed_cnt = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->logger);
  p->logger = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->init_callback);
  p->init_callback = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_thr_done);
  p->_thr_done = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_thr_failed);
  p->_thr_failed = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_delayed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7delayed_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_scheduled(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_9scheduled_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_alive(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_5alive_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_busy(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4busy_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_pending(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7pending_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_jobs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4jobs_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_done(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_4done_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_done_cnt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_8done_cnt_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_failed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_6failed_1__get__(o);
}

static PyObject *__pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_failed_cnt(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_10failed_cnt_1__get__(o);
}

static PyMethodDef __pyx_methods_14fastthreadpool_14fastthreadpool_Pool[] = {
  {"__del__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_3__del__, METH_NOARGS, 0},
  {"__enter__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_5__enter__, METH_NOARGS, 0},
  {"__exit__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_7__exit__, METH_VARARGS|METH_KEYWORDS, 0},
  {"_done_thread", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_9_done_thread, METH_O, 0},
  {"_failed_thread", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_11_failed_thread, METH_O, 0},
  {"_child", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_13_child, METH_O, 0},
  {"submit", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_15submit, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_done", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_17submit_done, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_first", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_19submit_first, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_done_first", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_21submit_done_first, METH_VARARGS|METH_KEYWORDS, 0},
  {"_submit_later_do", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_23_submit_later_do, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_later", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_25submit_later, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_done_later", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_27submit_done_later, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_at", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_29submit_at, METH_VARARGS|METH_KEYWORDS, 0},
  {"submit_done_at", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_31submit_done_at, METH_VARARGS|METH_KEYWORDS, 0},
  {"_schedule_do", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_33_schedule_do, METH_VARARGS|METH_KEYWORDS, 0},
  {"schedule", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_35schedule, METH_VARARGS|METH_KEYWORDS, 0},
  {"schedule_done", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_37schedule_done, METH_VARARGS|METH_KEYWORDS, 0},
  {"as_completed", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_39as_completed, METH_VARARGS|METH_KEYWORDS, 0},
  {"_map_child", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_42_map_child, METH_VARARGS|METH_KEYWORDS, 0},
  {"_imap_child", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_44_imap_child, METH_VARARGS|METH_KEYWORDS, 0},
  {"map", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_46map, METH_VARARGS|METH_KEYWORDS, 0},
  {"clear", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_48clear, METH_NOARGS, 0},
  {"_join_thread", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_50_join_thread, METH_VARARGS|METH_KEYWORDS, 0},
  {"shutdown_children", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_52shutdown_children, METH_NOARGS, 0},
  {"shutdown", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_54shutdown, METH_VARARGS|METH_KEYWORDS, 0},
  {"join", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_56join, METH_VARARGS|METH_KEYWORDS, 0},
  {"cancel", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_58cancel, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_60__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14fastthreadpool_14fastthreadpool_4Pool_62__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14fastthreadpool_14fastthreadpool_Pool[] = {
  {(char *)"delayed", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_delayed, 0, (char *)0, 0},
  {(char *)"scheduled", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_scheduled, 0, (char *)0, 0},
  {(char *)"alive", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_alive, 0, (char *)0, 0},
  {(char *)"busy", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_busy, 0, (char *)0, 0},
  {(char *)"pending", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_pending, 0, (char *)0, 0},
  {(char *)"jobs", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_jobs, 0, (char *)0, 0},
  {(char *)"done", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_done, 0, (char *)0, 0},
  {(char *)"done_cnt", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_done_cnt, 0, (char *)0, 0},
  {(char *)"failed", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_failed, 0, (char *)0, 0},
  {(char *)"failed_cnt", __pyx_getprop_14fastthreadpool_14fastthreadpool_4Pool_failed_cnt, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14fastthreadpool_14fastthreadpool_Pool = {
  PyVarObject_HEAD_INIT(0, 0)
  "fastthreadpool.fastthreadpool.Pool", /*tp_name*/
  sizeof(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14fastthreadpool_14fastthreadpool_Pool, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14fastthreadpool_14fastthreadpool_Pool, /*tp_traverse*/
  __pyx_tp_clear_14fastthreadpool_14fastthreadpool_Pool, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14fastthreadpool_14fastthreadpool_Pool, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14fastthreadpool_14fastthreadpool_Pool, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14fastthreadpool_14fastthreadpool_Pool, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *__pyx_freelist_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed[8];
static int __pyx_freecount_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed = 0;

static PyObject *__pyx_tp_new_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed)))) {
    o = (PyObject*)__pyx_freelist_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed[--__pyx_freecount_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed];
    memset(o, 0, sizeof(struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed(PyObject *o) {
  struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *p = (struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_done);
  Py_CLEAR(p->__pyx_v_done_popleft);
  Py_CLEAR(p->__pyx_v_failed);
  Py_CLEAR(p->__pyx_v_failed_popleft);
  Py_CLEAR(p->__pyx_v_pyto);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_wait);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed)))) {
    __pyx_freelist_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed[__pyx_freecount_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed++] = ((struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *p = (struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed *)o;
  if (p->__pyx_v_done) {
    e = (*v)(p->__pyx_v_done, a); if (e) return e;
  }
  if (p->__pyx_v_done_popleft) {
    e = (*v)(p->__pyx_v_done_popleft, a); if (e) return e;
  }
  if (p->__pyx_v_failed) {
    e = (*v)(p->__pyx_v_failed, a); if (e) return e;
  }
  if (p->__pyx_v_failed_popleft) {
    e = (*v)(p->__pyx_v_failed_popleft, a); if (e) return e;
  }
  if (p->__pyx_v_pyto) {
    e = (*v)(p->__pyx_v_pyto, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_wait) {
    e = (*v)(p->__pyx_v_wait, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed = {
  PyVarObject_HEAD_INIT(0, 0)
  "fastthreadpool.fastthreadpool.__pyx_scope_struct__as_completed", /*tp_name*/
  sizeof(struct __pyx_obj_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_fastthreadpool(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_fastthreadpool},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "fastthreadpool",
    __pyx_k_Implements_a_lightweight_and_fas, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_DEFAULT_LOGGING_FORMAT, __pyx_k_DEFAULT_LOGGING_FORMAT, sizeof(__pyx_k_DEFAULT_LOGGING_FORMAT), 0, 0, 1, 1},
  {&__pyx_n_s_Formatter, __pyx_k_Formatter, sizeof(__pyx_k_Formatter), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_KeyboardInterrupt, __pyx_k_KeyboardInterrupt, sizeof(__pyx_k_KeyboardInterrupt), 0, 0, 1, 1},
  {&__pyx_n_s_LOGGER_NAME, __pyx_k_LOGGER_NAME, sizeof(__pyx_k_LOGGER_NAME), 0, 0, 1, 1},
  {&__pyx_n_s_Lock, __pyx_k_Lock, sizeof(__pyx_k_Lock), 0, 0, 1, 1},
  {&__pyx_kp_u_Martin_Bammer_mrbm74_gmail_com, __pyx_k_Martin_Bammer_mrbm74_gmail_com, sizeof(__pyx_k_Martin_Bammer_mrbm74_gmail_com), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Number_of_child_threads_must_be, __pyx_k_Number_of_child_threads_must_be, sizeof(__pyx_k_Number_of_child_threads_must_be), 0, 1, 0, 0},
  {&__pyx_n_s_PoolCallback, __pyx_k_PoolCallback, sizeof(__pyx_k_PoolCallback), 0, 0, 1, 1},
  {&__pyx_n_s_PoolStopped, __pyx_k_PoolStopped, sizeof(__pyx_k_PoolStopped), 0, 0, 1, 1},
  {&__pyx_n_s_Pool_as_completed, __pyx_k_Pool_as_completed, sizeof(__pyx_k_Pool_as_completed), 0, 0, 1, 1},
  {&__pyx_kp_u_Pool_not_running, __pyx_k_Pool_not_running, sizeof(__pyx_k_Pool_not_running), 0, 1, 0, 0},
  {&__pyx_kp_u_Semaphore_Parameter_value_must_n, __pyx_k_Semaphore_Parameter_value_must_n, sizeof(__pyx_k_Semaphore_Parameter_value_must_n), 0, 1, 0, 0},
  {&__pyx_n_s_StreamHandler, __pyx_k_StreamHandler, sizeof(__pyx_k_StreamHandler), 0, 0, 1, 1},
  {&__pyx_n_s_Thread, __pyx_k_Thread, sizeof(__pyx_k_Thread), 0, 0, 1, 1},
  {&__pyx_n_u_ThreadPoolDone, __pyx_k_ThreadPoolDone, sizeof(__pyx_k_ThreadPoolDone), 0, 1, 0, 1},
  {&__pyx_n_u_ThreadPoolFailed, __pyx_k_ThreadPoolFailed, sizeof(__pyx_k_ThreadPoolFailed), 0, 1, 0, 1},
  {&__pyx_kp_u_ThreadPool_s, __pyx_k_ThreadPool_s, sizeof(__pyx_k_ThreadPool_s), 0, 1, 0, 0},
  {&__pyx_n_s_TimeoutError, __pyx_k_TimeoutError, sizeof(__pyx_k_TimeoutError), 0, 0, 1, 1},
  {&__pyx_n_s_Timer, __pyx_k_Timer, sizeof(__pyx_k_Timer), 0, 0, 1, 1},
  {&__pyx_n_s_TimerObj, __pyx_k_TimerObj, sizeof(__pyx_k_TimerObj), 0, 0, 1, 1},
  {&__pyx_n_s_TimerObj___init, __pyx_k_TimerObj___init, sizeof(__pyx_k_TimerObj___init), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_Using_done_callback, __pyx_k_Using_done_callback, sizeof(__pyx_k_Using_done_callback), 0, 1, 0, 0},
  {&__pyx_kp_u_Using_failed_callback, __pyx_k_Using_failed_callback, sizeof(__pyx_k_Using_failed_callback), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_n_s_acquire, __pyx_k_acquire, sizeof(__pyx_k_acquire), 0, 0, 1, 1},
  {&__pyx_n_s_addHandler, __pyx_k_addHandler, sizeof(__pyx_k_addHandler), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_appendleft, __pyx_k_appendleft, sizeof(__pyx_k_appendleft), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_as_completed, __pyx_k_as_completed, sizeof(__pyx_k_as_completed), 0, 0, 1, 1},
  {&__pyx_n_s_atexit, __pyx_k_atexit, sizeof(__pyx_k_atexit), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_blocking, __pyx_k_blocking, sizeof(__pyx_k_blocking), 0, 0, 1, 1},
  {&__pyx_n_s_cancel, __pyx_k_cancel, sizeof(__pyx_k_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_child, __pyx_k_child, sizeof(__pyx_k_child), 0, 0, 1, 1},
  {&__pyx_n_s_child_name_prefix, __pyx_k_child_name_prefix, sizeof(__pyx_k_child_name_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_n_s_cpu_count, __pyx_k_cpu_count, sizeof(__pyx_k_cpu_count), 0, 0, 1, 1},
  {&__pyx_n_s_daemon, __pyx_k_daemon, sizeof(__pyx_k_daemon), 0, 0, 1, 1},
  {&__pyx_n_s_delay, __pyx_k_delay, sizeof(__pyx_k_delay), 0, 0, 1, 1},
  {&__pyx_n_s_deque, __pyx_k_deque, sizeof(__pyx_k_deque), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_done_callback, __pyx_k_done_callback, sizeof(__pyx_k_done_callback), 0, 0, 1, 1},
  {&__pyx_n_s_done_thread, __pyx_k_done_thread, sizeof(__pyx_k_done_thread), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_type, __pyx_k_exc_type, sizeof(__pyx_k_exc_type), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_exception, __pyx_k_exception, sizeof(__pyx_k_exception), 0, 0, 1, 1},
  {&__pyx_n_s_failed_callback, __pyx_k_failed_callback, sizeof(__pyx_k_failed_callback), 0, 0, 1, 1},
  {&__pyx_n_s_failed_thread, __pyx_k_failed_thread, sizeof(__pyx_k_failed_thread), 0, 0, 1, 1},
  {&__pyx_n_u_fastthreadpool, __pyx_k_fastthreadpool, sizeof(__pyx_k_fastthreadpool), 0, 1, 0, 1},
  {&__pyx_n_s_fastthreadpool_fastthreadpool, __pyx_k_fastthreadpool_fastthreadpool, sizeof(__pyx_k_fastthreadpool_fastthreadpool), 0, 0, 1, 1},
  {&__pyx_kp_s_fastthreadpool_fastthreadpool_py, __pyx_k_fastthreadpool_fastthreadpool_py, sizeof(__pyx_k_fastthreadpool_fastthreadpool_py), 0, 0, 1, 0},
  {&__pyx_n_s_fn, __pyx_k_fn, sizeof(__pyx_k_fn), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_imap_child, __pyx_k_imap_child, sizeof(__pyx_k_imap_child), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init_callback, __pyx_k_init_callback, sizeof(__pyx_k_init_callback), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_interval, __pyx_k_interval, sizeof(__pyx_k_interval), 0, 0, 1, 1},
  {&__pyx_n_s_is_alive, __pyx_k_is_alive, sizeof(__pyx_k_is_alive), 0, 0, 1, 1},
  {&__pyx_n_s_isgeneratorfunction, __pyx_k_isgeneratorfunction, sizeof(__pyx_k_isgeneratorfunction), 0, 0, 1, 1},
  {&__pyx_n_s_islice, __pyx_k_islice, sizeof(__pyx_k_islice), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_itr, __pyx_k_itr, sizeof(__pyx_k_itr), 0, 0, 1, 1},
  {&__pyx_n_s_job_id, __pyx_k_job_id, sizeof(__pyx_k_job_id), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_join_thread, __pyx_k_join_thread, sizeof(__pyx_k_join_thread), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_kp_u_levelname_s_processName_s_messa, __pyx_k_levelname_s_processName_s_messa, sizeof(__pyx_k_levelname_s_processName_s_messa), 0, 1, 0, 0},
  {&__pyx_n_s_log_level, __pyx_k_log_level, sizeof(__pyx_k_log_level), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map_child, __pyx_k_map_child, sizeof(__pyx_k_map_child), 0, 0, 1, 1},
  {&__pyx_n_s_max_children, __pyx_k_max_children, sizeof(__pyx_k_max_children), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_mktime, __pyx_k_mktime, sizeof(__pyx_k_mktime), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_monotonic, __pyx_k_monotonic, sizeof(__pyx_k_monotonic), 0, 0, 1, 1},
  {&__pyx_n_s_multiprocessing, __pyx_k_multiprocessing, sizeof(__pyx_k_multiprocessing), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_now, __pyx_k_now, sizeof(__pyx_k_now), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_old_timer_id, __pyx_k_old_timer_id, sizeof(__pyx_k_old_timer_id), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_pool, __pyx_k_pool, sizeof(__pyx_k_pool), 0, 0, 1, 1},
  {&__pyx_n_s_popleft, __pyx_k_popleft, sizeof(__pyx_k_popleft), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_propagate, __pyx_k_propagate, sizeof(__pyx_k_propagate), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_release, __pyx_k_release, sizeof(__pyx_k_release), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_result_id, __pyx_k_result_id, sizeof(__pyx_k_result_id), 0, 0, 1, 1},
  {&__pyx_n_s_runat, __pyx_k_runat, sizeof(__pyx_k_runat), 0, 0, 1, 1},
  {&__pyx_kp_u_runat_has_invalid_value, __pyx_k_runat_has_invalid_value, sizeof(__pyx_k_runat_has_invalid_value), 0, 1, 0, 0},
  {&__pyx_n_s_schedule_do, __pyx_k_schedule_do, sizeof(__pyx_k_schedule_do), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setFormatter, __pyx_k_setFormatter, sizeof(__pyx_k_setFormatter), 0, 0, 1, 1},
  {&__pyx_n_s_setLevel, __pyx_k_setLevel, sizeof(__pyx_k_setLevel), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shutdown, __pyx_k_shutdown, sizeof(__pyx_k_shutdown), 0, 0, 1, 1},
  {&__pyx_n_s_shutdown_children, __pyx_k_shutdown_children, sizeof(__pyx_k_shutdown_children), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_soon, __pyx_k_soon, sizeof(__pyx_k_soon), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_struct_time, __pyx_k_struct_time, sizeof(__pyx_k_struct_time), 0, 0, 1, 1},
  {&__pyx_n_s_submit_later_do, __pyx_k_submit_later_do, sizeof(__pyx_k_submit_later_do), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thread, __pyx_k_thread, sizeof(__pyx_k_thread), 0, 0, 1, 1},
  {&__pyx_n_s_threading, __pyx_k_threading, sizeof(__pyx_k_threading), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_timer, __pyx_k_timer, sizeof(__pyx_k_timer), 0, 0, 1, 1},
  {&__pyx_n_s_timer_id, __pyx_k_timer_id, sizeof(__pyx_k_timer_id), 0, 0, 1, 1},
  {&__pyx_n_s_timer_obj, __pyx_k_timer_obj, sizeof(__pyx_k_timer_obj), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
  {&__pyx_n_s_wait, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_builtin_KeyboardInterrupt = __Pyx_GetBuiltinName(__pyx_n_s_KeyboardInterrupt); if (!__pyx_builtin_KeyboardInterrupt) __PYX_ERR(0, 639, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "fastthreadpool/fastthreadpool.pyx":56
 *         if now:
 *             pool.shutdown_children()
 *             pool.cancel(None, True)             # <<<<<<<<<<<<<<
 *             pool.shutdown(None, True)
 *         else:
 */
  __pyx_tuple_ = PyTuple_Pack(2, Py_None, Py_True); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "fastthreadpool/fastthreadpool.pyx":57
 *             pool.shutdown_children()
 *             pool.cancel(None, True)
 *             pool.shutdown(None, True)             # <<<<<<<<<<<<<<
 *         else:
 *             pool.cancel(None, False)
 */
  __pyx_tuple__2 = PyTuple_Pack(2, Py_None, Py_True); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "fastthreadpool/fastthreadpool.pyx":59
 *             pool.shutdown(None, True)
 *         else:
 *             pool.cancel(None, False)             # <<<<<<<<<<<<<<
 *             pool.shutdown()
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(2, Py_None, Py_False); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "fastthreadpool/fastthreadpool.pyx":79
 *     #p def __init__(self, value=1):
 *         if value < 0:
 *             raise ValueError( "Semaphore: Parameter 'value' must not be less than 0")             # <<<<<<<<<<<<<<
 *         self._lock = pythread.PyThread_allocate_lock()
 *         if not self._lock:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Semaphore_Parameter_value_must_n); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "fastthreadpool/fastthreadpool.pyx":166
 *     #p def __init__(self, max_children=-9999, child_name_prefix="", init_callback=None,
 *                  #p done_callback=None, failed_callback=None, log_level=None, result_id=False):
 *         self._job_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self.children = set()
 *         if max_children <= -9999:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "fastthreadpool/fastthreadpool.pyx":175
 *             self.max_children = cpu_count() + max_children
 *         if self.max_children <= 0:
 *             raise ValueError("Number of child threads must be greater than 0")             # <<<<<<<<<<<<<<
 *         self.child_name_prefix = child_name_prefix + "-" if child_name_prefix else "ThreadPool%s-" % id(self)
 *         self.result_id = result_id
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Number_of_child_threads_must_be); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "fastthreadpool/fastthreadpool.pyx":189
 *         self._done = deque()
 *         self._failed = deque()
 *         self._done_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self._failed_cnt = Semaphore(0)
 *         self._shutdown_children = False
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "fastthreadpool/fastthreadpool.pyx":190
 *         self._failed = deque()
 *         self._done_cnt = Semaphore(0)
 *         self._failed_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self._shutdown_children = False
 *         self._shutdown = False
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "fastthreadpool/fastthreadpool.pyx":348
 *     #p def _submit(self, fn, done_callback, args, kwargs, high_priority):
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")             # <<<<<<<<<<<<<<
 *         if (self._job_cnt._value >= self._child_cnt) and (self._child_cnt < self.max_children):
 *             self._child_cnt += 1
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Pool_not_running); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "fastthreadpool/fastthreadpool.pyx":406
 *         now = _time()
 *         if _runat < now:
 *             raise ValueError("_runat has invalid value!")             # <<<<<<<<<<<<<<
 *         timer_obj = TimerObj()
 *         timer = Timer(_runat - now, self._schedule_do, (timer_obj, _runat - interval, interval,
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_runat_has_invalid_value); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "fastthreadpool/fastthreadpool.pyx":464
 *         cdef bint do_sleep
 *         if self._thr_done is not None:
 *             raise PoolCallback("Using done_callback!")             # <<<<<<<<<<<<<<
 *         if self._thr_failed is not None:
 *             raise PoolCallback("Using failed_callback!")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Using_done_callback); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "fastthreadpool/fastthreadpool.pyx":466
 *             raise PoolCallback("Using done_callback!")
 *         if self._thr_failed is not None:
 *             raise PoolCallback("Using failed_callback!")             # <<<<<<<<<<<<<<
 *         if wait is not False and isinstance(wait, (int, float)):
 *             pyto = _time() + wait
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Using_failed_callback); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "fastthreadpool/fastthreadpool.pyx":487
 *                 return
 *             if do_sleep:
 *                 sleep(0.01)             # <<<<<<<<<<<<<<
 * 
 *     def _map_child(self, fn, itr, done_callback):
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_float_0_01); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "fastthreadpool/fastthreadpool.pyx":568
 *         cdef object pychunksize
 *         if self._shutdown_children:
 *             raise PoolStopped("Pool not running")             # <<<<<<<<<<<<<<
 *         for child in tuple(self.children):
 *             if not child.is_alive():
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Pool_not_running); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "fastthreadpool/fastthreadpool.pyx":594
 *         self._jobs.clear()
 *         self._done.clear()
 *         self._done_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 *         self._failed.clear()
 *         self._failed_cnt = Semaphore(0)
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "fastthreadpool/fastthreadpool.pyx":596
 *         self._done_cnt = Semaphore(0)
 *         self._failed.clear()
 *         self._failed_cnt = Semaphore(0)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "fastthreadpool/fastthreadpool.pyx":634
 *         while True:
 *             try:
 *                 thread.join(1.0)             # <<<<<<<<<<<<<<
 *                 if not thread.is_alive():
 *                     return thread
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_float_1_0); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "fastthreadpool/fastthreadpool.pyx":651
 *         for _ in range(self._child_cnt):
 *             if soon is True:
 *                 self._jobs.appendleft(None)             # <<<<<<<<<<<<<<
 *             elif soon is False:
 *                 self._jobs_append(None)
 */
  __pyx_tuple__22 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "fastthreadpool/fastthreadpool.pyx":653
 *                 self._jobs.appendleft(None)
 *             elif soon is False:
 *                 self._jobs_append(None)             # <<<<<<<<<<<<<<
 *         while self._job_cnt._value <= 0:
 *             self._job_cnt.release()
 */
  __pyx_tuple__23 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "fastthreadpool/fastthreadpool.pyx":52
 * 
 * 
 * def shutdown(now=True):             # <<<<<<<<<<<<<<
 *     for pool in _pools:
 *         if now:
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_now, __pyx_n_s_pool); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_fastthreadpool_fastthreadpool_py, __pyx_n_s_shutdown, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 52, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":138
 * 
 * 
 * class TimerObj(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_builtin_object); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "fastthreadpool/fastthreadpool.pyx":140
 * class TimerObj(object):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.old_timer_id = None   # Old timer id
 *         self.timer_id = None
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_fastthreadpool_fastthreadpool_py, __pyx_n_s_init, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_modinit_global_init_code(void); /*proto*/
static int __Pyx_modinit_variable_export_code(void); /*proto*/
static int __Pyx_modinit_function_export_code(void); /*proto*/
static int __Pyx_modinit_type_init_code(void); /*proto*/
static int __Pyx_modinit_type_import_code(void); /*proto*/
static int __Pyx_modinit_variable_import_code(void); /*proto*/
static int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_14fastthreadpool_14fastthreadpool_sys = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_Lock = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_Thread = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_Timer = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_islice = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_deque = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool__time = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_sleep = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool_cpu_count = Py_None; Py_INCREF(Py_None);
  __pyx_v_14fastthreadpool_14fastthreadpool__pools = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Semaphore = &__pyx_vtable_14fastthreadpool_14fastthreadpool_Semaphore;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Semaphore.acquire = (int (*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *, int __pyx_skip_dispatch, struct __pyx_opt_args_14fastthreadpool_14fastthreadpool_9Semaphore_acquire *__pyx_optional_args))__pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_acquire;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Semaphore.release = (void (*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Semaphore *, int __pyx_skip_dispatch))__pyx_f_14fastthreadpool_14fastthreadpool_9Semaphore_release;
  if (PyType_Ready(&__pyx_type_14fastthreadpool_14fastthreadpool_Semaphore) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_type_14fastthreadpool_14fastthreadpool_Semaphore.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14fastthreadpool_14fastthreadpool_Semaphore.tp_dictoffset && __pyx_type_14fastthreadpool_14fastthreadpool_Semaphore.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14fastthreadpool_14fastthreadpool_Semaphore.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_14fastthreadpool_14fastthreadpool_Semaphore.tp_dict, __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Semaphore) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Semaphore", (PyObject *)&__pyx_type_14fastthreadpool_14fastthreadpool_Semaphore) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14fastthreadpool_14fastthreadpool_Semaphore) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_ptype_14fastthreadpool_14fastthreadpool_Semaphore = &__pyx_type_14fastthreadpool_14fastthreadpool_Semaphore;
  __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Pool = &__pyx_vtable_14fastthreadpool_14fastthreadpool_Pool;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._busy_lock_inc = (void (*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__busy_lock_inc;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._busy_lock_dec = (void (*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__busy_lock_dec;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._submit = (PyObject *(*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, int))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._submit_later = (PyObject *(*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit_later;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._submit_at = (PyObject *(*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__submit_at;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._schedule = (PyObject *(*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__schedule;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._delayed_cancel = (void (*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__delayed_cancel;
  __pyx_vtable_14fastthreadpool_14fastthreadpool_Pool._scheduled_cancel = (void (*)(struct __pyx_obj_14fastthreadpool_14fastthreadpool_Pool *))__pyx_f_14fastthreadpool_14fastthreadpool_4Pool__scheduled_cancel;
  if (PyType_Ready(&__pyx_type_14fastthreadpool_14fastthreadpool_Pool) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_type_14fastthreadpool_14fastthreadpool_Pool.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14fastthreadpool_14fastthreadpool_Pool.tp_dictoffset && __pyx_type_14fastthreadpool_14fastthreadpool_Pool.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14fastthreadpool_14fastthreadpool_Pool.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_14fastthreadpool_14fastthreadpool_Pool.tp_dict, __pyx_vtabptr_14fastthreadpool_14fastthreadpool_Pool) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Pool", (PyObject *)&__pyx_type_14fastthreadpool_14fastthreadpool_Pool) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14fastthreadpool_14fastthreadpool_Pool) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_ptype_14fastthreadpool_14fastthreadpool_Pool = &__pyx_type_14fastthreadpool_14fastthreadpool_Pool;
  if (PyType_Ready(&__pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
  __pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed.tp_dictoffset && __pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed = &__pyx_type_14fastthreadpool_14fastthreadpool___pyx_scope_struct__as_completed;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(3, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(4, 15, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (!(defined(__cplusplus)) || (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 4)))
    #define CYTHON_SMALL_CODE __attribute__((optimize("Os")))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initfastthreadpool(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initfastthreadpool(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_fastthreadpool(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_fastthreadpool(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_fastthreadpool(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_fastthreadpool(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("fastthreadpool", __pyx_methods, __pyx_k_Implements_a_lightweight_and_fas, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_fastthreadpool__fastthreadpool) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "fastthreadpool.fastthreadpool")) {
      if (unlikely(PyDict_SetItemString(modules, "fastthreadpool.fastthreadpool", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "fastthreadpool/fastthreadpool.pyx":13
 * """Implements a lightweight and fast thread pool."""
 * 
 * __author__ = 'Martin Bammer (mrbm74@gmail.com)'             # <<<<<<<<<<<<<<
 * 
 * cdef sys, isgeneratorfunction, Lock, Thread, Timer, islice, deque, _time, sleep, cpu_count
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_u_Martin_Bammer_mrbm74_gmail_com) < 0) __PYX_ERR(0, 13, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":16
 * 
 * cdef sys, isgeneratorfunction, Lock, Thread, Timer, islice, deque, _time, sleep, cpu_count
 * import sys             # <<<<<<<<<<<<<<
 * import atexit
 * from inspect import isgeneratorfunction
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_sys);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_sys, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":17
 * cdef sys, isgeneratorfunction, Lock, Thread, Timer, islice, deque, _time, sleep, cpu_count
 * import sys
 * import atexit             # <<<<<<<<<<<<<<
 * from inspect import isgeneratorfunction
 * from threading import Lock, Thread, Timer
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_atexit, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atexit, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":18
 * import sys
 * import atexit
 * from inspect import isgeneratorfunction             # <<<<<<<<<<<<<<
 * from threading import Lock, Thread, Timer
 * from itertools import islice
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_isgeneratorfunction);
  __Pyx_GIVEREF(__pyx_n_s_isgeneratorfunction);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_isgeneratorfunction);
  __pyx_t_2 = __Pyx_patch_inspect(__Pyx_Import(__pyx_n_s_inspect, __pyx_t_1, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isgeneratorfunction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_isgeneratorfunction, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":19
 * import atexit
 * from inspect import isgeneratorfunction
 * from threading import Lock, Thread, Timer             # <<<<<<<<<<<<<<
 * from itertools import islice
 * from time import sleep, mktime, struct_time
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Lock);
  __Pyx_GIVEREF(__pyx_n_s_Lock);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Lock);
  __Pyx_INCREF(__pyx_n_s_Thread);
  __Pyx_GIVEREF(__pyx_n_s_Thread);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Thread);
  __Pyx_INCREF(__pyx_n_s_Timer);
  __Pyx_GIVEREF(__pyx_n_s_Timer);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Timer);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_threading, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Lock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_Lock);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_Lock, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Thread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_Thread);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_Thread, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Timer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_Timer);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_Timer, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":20
 * from inspect import isgeneratorfunction
 * from threading import Lock, Thread, Timer
 * from itertools import islice             # <<<<<<<<<<<<<<
 * from time import sleep, mktime, struct_time
 * try:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_islice);
  __Pyx_GIVEREF(__pyx_n_s_islice);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_islice);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_islice); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_islice);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_islice, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":21
 * from threading import Lock, Thread, Timer
 * from itertools import islice
 * from time import sleep, mktime, struct_time             # <<<<<<<<<<<<<<
 * try:
 *     from time import monotonic as _time
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_sleep);
  __Pyx_GIVEREF(__pyx_n_s_sleep);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_sleep);
  __Pyx_INCREF(__pyx_n_s_mktime);
  __Pyx_GIVEREF(__pyx_n_s_mktime);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_mktime);
  __Pyx_INCREF(__pyx_n_s_struct_time);
  __Pyx_GIVEREF(__pyx_n_s_struct_time);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_struct_time);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_time, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_sleep); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_sleep);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_sleep, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_mktime); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mktime, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_struct_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_struct_time, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":22
 * from itertools import islice
 * from time import sleep, mktime, struct_time
 * try:             # <<<<<<<<<<<<<<
 *     from time import monotonic as _time
 * except ImportError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "fastthreadpool/fastthreadpool.pyx":23
 * from time import sleep, mktime, struct_time
 * try:
 *     from time import monotonic as _time             # <<<<<<<<<<<<<<
 * except ImportError:
 *     from time import time as _time
 */
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_n_s_monotonic);
      __Pyx_GIVEREF(__pyx_n_s_monotonic);
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_monotonic);
      __pyx_t_2 = __Pyx_Import(__pyx_n_s_time, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_monotonic); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool__time);
      __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool__time, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "fastthreadpool/fastthreadpool.pyx":22
 * from itertools import islice
 * from time import sleep, mktime, struct_time
 * try:             # <<<<<<<<<<<<<<
 *     from time import monotonic as _time
 * except ImportError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":24
 * try:
 *     from time import monotonic as _time
 * except ImportError:             # <<<<<<<<<<<<<<
 *     from time import time as _time
 * from collections import deque
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("fastthreadpool.fastthreadpool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(0, 24, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);

      /* "fastthreadpool/fastthreadpool.pyx":25
 *     from time import monotonic as _time
 * except ImportError:
 *     from time import time as _time             # <<<<<<<<<<<<<<
 * from collections import deque
 * if sys.version_info[0] > 2:
 */
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_n_s_time);
      __Pyx_GIVEREF(__pyx_n_s_time);
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_time);
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_time, __pyx_t_8, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_time); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 25, __pyx_L4_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool__time);
      __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool__time, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }
    goto __pyx_L4_except_error;
    __pyx_L4_except_error:;

    /* "fastthreadpool/fastthreadpool.pyx":22
 * from itertools import islice
 * from time import sleep, mktime, struct_time
 * try:             # <<<<<<<<<<<<<<
 *     from time import monotonic as _time
 * except ImportError:
 */
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L7_try_end:;
  }

  /* "fastthreadpool/fastthreadpool.pyx":26
 * except ImportError:
 *     from time import time as _time
 * from collections import deque             # <<<<<<<<<<<<<<
 * if sys.version_info[0] > 2:
 *     from os import cpu_count
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_deque);
  __Pyx_GIVEREF(__pyx_n_s_deque);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_deque);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_7, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_deque); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_deque);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_deque, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":27
 *     from time import time as _time
 * from collections import deque
 * if sys.version_info[0] > 2:             # <<<<<<<<<<<<<<
 *     from os import cpu_count
 * else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_14fastthreadpool_14fastthreadpool_sys, __pyx_n_s_version_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_int_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "fastthreadpool/fastthreadpool.pyx":28
 * from collections import deque
 * if sys.version_info[0] > 2:
 *     from os import cpu_count             # <<<<<<<<<<<<<<
 * else:
 *     from multiprocessing import cpu_count
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_cpu_count);
    __Pyx_GIVEREF(__pyx_n_s_cpu_count);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_cpu_count);
    __pyx_t_7 = __Pyx_Import(__pyx_n_s_os, __pyx_t_1, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_cpu_count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count);
    __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":27
 *     from time import time as _time
 * from collections import deque
 * if sys.version_info[0] > 2:             # <<<<<<<<<<<<<<
 *     from os import cpu_count
 * else:
 */
    goto __pyx_L10;
  }

  /* "fastthreadpool/fastthreadpool.pyx":30
 *     from os import cpu_count
 * else:
 *     from multiprocessing import cpu_count             # <<<<<<<<<<<<<<
 * 
 * if sys.version_info[0] < 3:
 */
  /*else*/ {
    __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_n_s_cpu_count);
    __Pyx_GIVEREF(__pyx_n_s_cpu_count);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_cpu_count);
    __pyx_t_1 = __Pyx_Import(__pyx_n_s_multiprocessing, __pyx_t_7, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_cpu_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count);
    __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool_cpu_count, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L10:;

  /* "fastthreadpool/fastthreadpool.pyx":32
 *     from multiprocessing import cpu_count
 * 
 * if sys.version_info[0] < 3:             # <<<<<<<<<<<<<<
 *     class TimeoutError(Exception):
 *         pass
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_14fastthreadpool_14fastthreadpool_sys, __pyx_n_s_version_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_7, __pyx_int_3, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_10) {

    /* "fastthreadpool/fastthreadpool.pyx":33
 * 
 * if sys.version_info[0] < 3:
 *     class TimeoutError(Exception):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_1, __pyx_n_s_TimeoutError, __pyx_n_s_TimeoutError, (PyObject *) NULL, __pyx_n_s_fastthreadpool_fastthreadpool, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_TimeoutError, __pyx_t_1, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_TimeoutError, __pyx_t_9) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "fastthreadpool/fastthreadpool.pyx":32
 *     from multiprocessing import cpu_count
 * 
 * if sys.version_info[0] < 3:             # <<<<<<<<<<<<<<
 *     class TimeoutError(Exception):
 *         pass
 */
  }

  /* "fastthreadpool/fastthreadpool.pyx":37
 * 
 * 
 * class PoolCallback(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_1, __pyx_n_s_PoolCallback, __pyx_n_s_PoolCallback, (PyObject *) NULL, __pyx_n_s_fastthreadpool_fastthreadpool, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_PoolCallback, __pyx_t_1, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PoolCallback, __pyx_t_9) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":41
 * 
 * 
 * class PoolStopped(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_7 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare(__pyx_t_7, __pyx_t_1, __pyx_n_s_PoolStopped, __pyx_n_s_PoolStopped, (PyObject *) NULL, __pyx_n_s_fastthreadpool_fastthreadpool, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_Py3ClassCreate(__pyx_t_7, __pyx_n_s_PoolStopped, __pyx_t_1, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PoolStopped, __pyx_t_9) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":46
 * 
 * cdef set _pools
 * _pools = set()             # <<<<<<<<<<<<<<
 * 
 * LOGGER_NAME = 'fastthreadpool'
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(__pyx_v_14fastthreadpool_14fastthreadpool__pools);
  __Pyx_DECREF_SET(__pyx_v_14fastthreadpool_14fastthreadpool__pools, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":48
 * _pools = set()
 * 
 * LOGGER_NAME = 'fastthreadpool'             # <<<<<<<<<<<<<<
 * DEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOGGER_NAME, __pyx_n_u_fastthreadpool) < 0) __PYX_ERR(0, 48, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":49
 * 
 * LOGGER_NAME = 'fastthreadpool'
 * DEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DEFAULT_LOGGING_FORMAT, __pyx_kp_u_levelname_s_processName_s_messa) < 0) __PYX_ERR(0, 49, __pyx_L1_error)

  /* "fastthreadpool/fastthreadpool.pyx":52
 * 
 * 
 * def shutdown(now=True):             # <<<<<<<<<<<<<<
 *     for pool in _pools:
 *         if now:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14fastthreadpool_14fastthreadpool_1shutdown, NULL, __pyx_n_s_fastthreadpool_fastthreadpool); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shutdown, __pyx_t_1) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":63
 * 
 * 
 * atexit.register(shutdown)             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport pythread
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_atexit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_shutdown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":138
 * 
 * 
 * class TimerObj(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_tuple__28); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_tuple__28, __pyx_n_s_TimerObj, __pyx_n_s_TimerObj, (PyObject *) NULL, __pyx_n_s_fastthreadpool_fastthreadpool, (PyObject *) NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "fastthreadpool/fastthreadpool.pyx":140
 * class TimerObj(object):
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.old_timer_id = None   # Old timer id
 *         self.timer_id = None
 */
  __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_14fastthreadpool_14fastthreadpool_8TimerObj_1__init__, 0, __pyx_n_s_TimerObj___init, NULL, __pyx_n_s_fastthreadpool_fastthreadpool, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (__Pyx_SetNameInClass(__pyx_t_1, __pyx_n_s_init, __pyx_t_7) < 0) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":138
 * 
 * 
 * class TimerObj(object):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_t_7 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_TimerObj, __pyx_tuple__28, __pyx_t_1, NULL, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TimerObj, __pyx_t_7) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "fastthreadpool/fastthreadpool.pyx":1
 * # Copyright 2018 Martin Bammer. All Rights Reserved.             # <<<<<<<<<<<<<<
 * # Licensed under MIT license.
 * #cython: boundscheck=False
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init fastthreadpool.fastthreadpool", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init fastthreadpool.fastthreadpool");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyCFunctionFastCall */
  #if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyObjectSetAttrStr */
  #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* ArgTypeTest */
  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    if (likely(result)) {
        Py_INCREF(result);
    } else if (unlikely(PyErr_Occurred())) {
        result = NULL;
    } else {
#else
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* pyfrozenset_new */
      static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if (likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* py_set_discard_unhashable */
      static int __Pyx_PySet_DiscardUnhashable(PyObject *set, PyObject *key) {
    PyObject *tmpkey;
    int rv;
    if (likely(!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError)))
        return -1;
    PyErr_Clear();
    tmpkey = __Pyx_PyFrozenSet_New(key);
    if (tmpkey == NULL)
        return -1;
    rv = PySet_Discard(set, tmpkey);
    Py_DECREF(tmpkey);
    return rv;
}

/* py_set_remove */
      static int __Pyx_PySet_RemoveNotFound(PyObject *set, PyObject *key, int found) {
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    if (likely(found == 0)) {
        PyObject *tup;
        tup = PyTuple_Pack(1, key);
        if (!tup)
            return -1;
        PyErr_SetObject(PyExc_KeyError, tup);
        Py_DECREF(tup);
        return -1;
    }
    return found;
}
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found != 1)) {
        return __Pyx_PySet_RemoveNotFound(set, key, found);
    }
    return 0;
}

/* SaveResetException */
      #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A3
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
      #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = local_type;
    tstate->exc_state.exc_value = local_value;
    tstate->exc_state.exc_traceback = local_tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* GetItemInt */
        static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseTooManyValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
        static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* UnpackItemEndCheck */
        static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyErrExceptionMatches */
        #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* SwapException */
        #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A3
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* SetItemInt */
        static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectCallMethod1 */
          static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) return NULL;
    result = __Pyx__PyObject_CallMethod1(method, arg);
    Py_DECREF(method);
    return result;
}

/* append */
          static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* py_set_discard */
          static CYTHON_INLINE int __Pyx_PySet_Discard(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    return found;
}

/* PyObject_GenericGetAttrNoDict */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
          #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
          static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
          static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PatchModuleWithCoroutine */
          static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchInspect */
          static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if ((0)) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

/* ImportFrom */
          static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
          static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
          static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CLineInTraceback */
              #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
              static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
              #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
              #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
              static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
              static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
              static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
              #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CoroutineBase */
              #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchGeneratorABC */
                  #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
